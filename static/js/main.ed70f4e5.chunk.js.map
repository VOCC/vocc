{"version":3,"sources":["lib/interfaces.ts","lib/consts.ts","lib/exportUtils.ts","components/objects/Bitmap.ts","components/objects/ImageCanvas.ts","components/objects/Bitmap3.ts","lib/fileLoadUtils.ts","components/objects/Bitmap4.ts","lib/quantize.ts","lib/defaultPalette.ts","components/EditorCanvas.tsx","components/buttons/ExportButton.tsx","components/buttons/ImportButton.tsx","components/objects/Palette.ts","components/PaletteDisplay.tsx","components/buttons/QuantizeButton.tsx","components/PalettePanel.tsx","components/buttons/Toggle.tsx","components/ToolsPanel.tsx","components/Dropdown.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["EditorMode","Color","r","g","b","a","this","other","that","Tool","PALETTE_SIZE","height","width","PALETTE_LENGTH","generateCSourceFileString","image","mode","palette","generateMode3CSourceFileString","console","error","variableName","fileName","slice","lastIndexOf","bitmapLength","dimensions","imageDefinitionString","imageData","getImageData","imageDataHexString","i","length","paletteIndicesToHex","paletteCSourceString","palC","element","colorToHex","PaletteToGBA","generateMode4CSourceFileString","pixelCount","j","pixelToHex","generateHeaderString","params","generateMode3HeaderString","imageDimensions","bitmapLengthDefinition","toUpperCase","imageHeightDefinition","imageWidthDefinition","paletteLengthDefinition","paletteDefinitionString","generateMode4HeaderString","warn","bitmapSize","bitmapSizeDefinition","index1","index2","combinedIndexString","toString","padStart","bgr","binary_value","forEach","elementString","Math","floor","hex_value","parseInt","color","exportImage","img","type","getImageFileBlob","Blob","Bitmap","imageCanvas","Uint8ClampedArray","getImageCanvasElement","getPixelGridCanvasElement","Promise","resolve","toBlob","blob","pos","Loader","ImageCanvas","pixelGridRatio","hiddenCanvas","context","pixelGrid","log","createHiddenCanvas","getContext","PixelGrid","drawImageToHiddenCanvas","getCanvasElement","drawPixel","x","y","dx","dy","colorString","fillStyle","fillRect","getPixelColorAt","drawGrid","strokeStyle","beginPath","moveTo","lineTo","stroke","Bitmap3","updatePixel","d","document","createElement","hidden","setAttribute","loadImageDataFromCanvas","canvas","data","loadHiddenImage","imagefile","reject","Image","onload","onerror","src","URL","createObjectURL","loadNewImage","imageFile","hiddenImage","naturalHeight","naturalWidth","drawImage","name","offset","loadNewPalette","paletteFile","Response","text","fileString","trim","replace","colors","Array","substr","red","green","blue","Bitmap4","indexArray","currentPaletteIndex","newPaletteIndex","newPalette","redrawImage","BLACK","quantize","depth","centroids","imageArr","push","round","min","max","imageToArr","uniqueColors","uniqueColorsString","check","includes","JSON","stringify","pickedCentroids","maxDist","minDist","midDist","dist","centroidPossible","possible","centers","parse","findCentroids","arrayToProcess","clusters","Groups","iterations","tempdistance","oldcentroids","changed","reset","minCluster","clusterIterate","pow","abs","sqrt","groups","kmeans","newCluster","sort","spriteIndexArrayLength","spriteIndexArray","fill","center","imageIndex","getColorIndex","sprite","colorArr","points","numCentroids","currColor","DEFAULT_PALETTE","EditorCanvas","selectedPaletteIndex","settings","scale","onMouseWheel","canvasRef","useRef","useState","canvasSize","setCanvasSize","isPainting","setIsPainting","undefined","mousePos","setMousePos","imagePosition","setImagePosition","drawImageOnCanvas","useCallback","current","clearRect","grid","useLayoutEffect","window","addEventListener","clientWidth","clientHeight","imageSmoothingEnabled","devicePixelRatio","getMousePos","e","rect","getBoundingClientRect","scaleX","scaleY","clientX","left","clientY","top","getImageCoord","fillPixel","setPixelColor","bucketFill","newColor","isEqual","queue","explored","curr","shift","edges","filter","n","startPaint","mousePosition","imageCoord","currentTool","PENCIL","BUCKET","PAN","paint","newMousePos","newImagePosition","stopPaint","useEffect","removeEventListener","ref","className","generateEditorCanvasProps","tool","base","ExportButton","startImageExport","buttonLabel","onClick","ImportButton","onFileChange","fileInput","handleSubmit","preventDefault","files","accept","onChange","drawPaletteToHiddenCanvas","PALETTE_CANVAS_SIZE","SCALE","MOUSE_POS_TO_INDEX","XY_TO_INDEX","MOUSE_POS_TO_XY","PaletteDisplay","selectedColorIndex","onChangeSelectedColorIndex","paletteHiddenCanvas","setPaletteHiddenCanvas","setPixelGrid","drawPalette","PaletteUtils","drawSelectedColorHighlight","index","lineWidth","ratio","INDEX_TO_X","INDEX_TO_Y","setupCanvasSize","handleQuantize","setDepth","alert","value","target","PalettePanel","onChangeColor","ColorInput","currentColor","QuantizeButton","color32to256","color32","ceil","color256to32","newRValue","color256","handleRChange","newGValue","handleGChange","newBValue","handleBChange","Toggle","state","children","ToolsPanel","onSettingsChange","onToolChange","icon","faPen","faFillDrip","SQUARE","faSquare","ELLIPSE","faCircle","ZOOM","faSearchPlus","faHandPaper","DROPPER","faEyeDropper","newSettings","faBorderAll","faLayerGroup","faCode","editorMode","Dropdown","label","open","setOpen","id","scaleReducer","deltaY","App","setPalette","setImage","setSelectedColorIndex","editorSettings","setEditorSettings","useReducer","scaleDispatch","handleMouseWheelEvent","handleImageLoad","handleToolChange","newTool","handleEditorChange","handlePaletteLoad","palFile","updatePalette","handleImageExport","fileType","exportFailAlert","cBlob","getCSourceData","saveAs","hBlob","getHeaderData","pal","count","hex","paletteToHex","handleSettingsChange","Spritesheet","Background","bind","formAction","formTarget","toFixed","newIndex","setPaletteIndex","newColorDepth","confirm","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","getElementById","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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EAAG,GACvB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,GAAI,EAAG,EAAG,GACpB,IAAIA,EAAM,GAAI,EAAG,EAAG,GACpB,IAAIA,EAAM,GAAI,EAAG,EAAG,GACpB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,EAAG,GAAI,EAAG,GACpB,IAAIA,EAAM,EAAG,GAAI,EAAG,GACpB,IAAIA,EAAM,EAAG,GAAI,EAAG,GACpB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,GAAI,GAAI,EAAG,GACrB,IAAIA,EAAM,GAAI,GAAI,EAAG,GACrB,IAAIA,EAAM,GAAI,GAAI,EAAG,GACrB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,EAAG,EAAG,GAAI,GACpB,IAAIA,EAAM,EAAG,EAAG,GAAI,GACpB,IAAIA,EAAM,EAAG,EAAG,GAAI,GACpB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,GAAI,EAAG,GAAI,GACrB,IAAIA,EAAM,GAAI,EAAG,GAAI,GACrB,IAAIA,EAAM,GAAI,EAAG,GAAI,GACrB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,GAAI,GAAI,GACrB,IAAIA,EAAM,EAAG,GAAI,GAAI,GACrB,IAAIA,EAAM,EAAG,GAAI,GAAI,GACrB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,GAAI,EAAG,GACtB,IAAIA,EAAM,IAAK,GAAI,EAAG,GACtB,IAAIA,EAAM,IAAK,GAAI,EAAG,GACtB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,GAAI,IAAK,EAAG,GACtB,IAAIA,EAAM,GAAI,IAAK,EAAG,GACtB,IAAIA,EAAM,GAAI,IAAK,EAAG,GACtB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,GAAI,GACtB,IAAIA,EAAM,EAAG,IAAK,GAAI,GACtB,IAAIA,EAAM,EAAG,IAAK,GAAI,GACtB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,GAAI,IAAK,GACtB,IAAIA,EAAM,EAAG,GAAI,IAAK,GACtB,IAAIA,EAAM,EAAG,GAAI,IAAK,GACtB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,GAAI,EAAG,IAAK,GACtB,IAAIA,EAAM,GAAI,EAAG,IAAK,GACtB,IAAIA,EAAM,GAAI,EAAG,IAAK,GACtB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,GAAI,GACtB,IAAIA,EAAM,IAAK,EAAG,GAAI,GACtB,IAAIA,EAAM,IAAK,EAAG,GAAI,GACtB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,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","file":"static/js/main.ed70f4e5.chunk.js","sourcesContent":["import { Tool } from \"./consts\";\n\nexport class Color {\n  public r: number;\n  public g: number;\n  public b: number;\n  public a: number;\n\n  constructor(r: number, g: number, b: number, a: number) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  public isEqual(other: Object): boolean {\n    if (other === this) {\n      return true;\n    }\n    if (!(other instanceof Color)) {\n      return false;\n    }\n    const that: Color = other as Color;\n    return (this.r === that.r && this.g === that.g\n      && this.b === that.b && this.a === that.a);\n  }\n}\n\nexport interface Color32 {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport interface Dimensions {\n  height: number;\n  width: number;\n}\n\nexport type Mode = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7; \n\nexport enum EditorMode {\n  Bitmap = \"Bitmap\",\n  Spritesheet = \"Spritesheet\",\n  Background = \"Background\"\n}\n\nexport interface Drawable {\n  dimensions: Dimensions;\n  getImageCanvasElement: () => HTMLCanvasElement;\n  getPixelGridCanvasElement: () => HTMLCanvasElement;\n}\n\n/**\n * Eventually, these methods should be entirely encapsulated within the classes\n * themselves, not separated as part of a utilities file. Make classes do the\n * work, not functions with access to the classes' private information.\n * Perhaps an abstract class with default implementations will work well here.\n */\nexport interface Exportable {\n  fileName: string;\n  getImageData: () => Uint8ClampedArray;\n  getImageFileBlob: () => Promise<Blob | null>;\n  getHeaderData: () => string;\n  getCSourceData: () => string;\n  getPixelColorAt: (pos: ImageCoordinates) => Color;\n}\n\nexport interface Modifiable {\n  setPixelColor: (pos: ImageCoordinates, color: Color) => void;\n}\n\nexport interface ImageInterface extends Drawable, Exportable, Modifiable {}\n\nexport interface EditorSettings {\n  grid: boolean;\n  currentTool: Tool;\n  mode: Mode;\n  editorMode: EditorMode;\n}\n\nexport interface ImageCoordinates {\n  x: number;\n  y: number;\n}\n","import { Dimensions, Color } from \"./interfaces\";\n\nexport const COLORS = {\n  black: new Color(0, 0, 0, 1),\n  red: new Color(255, 0, 0, 1),\n  blue: new Color(0, 255, 0, 1),\n  green: new Color(0, 0, 255, 1)\n};\n\nexport const PALETTE_SIZE: Dimensions = { height: 16, width: 16 };\nexport const PALETTE_LENGTH = PALETTE_SIZE.height * PALETTE_SIZE.width;\n\nexport enum Tool {\n  PENCIL,\n  BUCKET,\n  SQUARE,\n  ELLIPSE,\n  ZOOM,\n  PAN,\n  DROPPER\n}\n","import { ImageInterface, Color, Dimensions, Mode } from \"./interfaces\";\nimport { PALETTE_LENGTH } from \"./consts\";\nimport Palette from \"../components/objects/Palette\";\n\n/*\n  getGBAImageString\n\n  take in ImageObject and Palette\n  get the image array from image2GBA\n  get the palette array from pal2GBA\n  returns the combination of them into one string\n*/\nexport function generateCSourceFileString(\n  image: ImageInterface,\n  mode: Mode,\n  palette?: Palette\n): string {\n  switch (mode) {\n    case 3:\n      return generateMode3CSourceFileString(image);\n    case 4:\n      return generateMode4CSourceFileString(image, palette);\n    default:\n      return generateMode3CSourceFileString(image);\n  }\n}\n\nfunction generateMode3CSourceFileString(image: ImageInterface): string {\n  const variableName = image.fileName.slice(0, image.fileName.lastIndexOf(\".\"));\n  const bitmapLength = image.dimensions.height * image.dimensions.width;\n  const imageDefinitionString = `const unsigned short ${variableName}Bitmap[${bitmapLength /\n    2}]__attribute__((aligned(4)))=\\n{\\n\\t`;\n\n  const imageData = image.getImageData();\n  let imageDataHexString = ``;\n\n  let pixelCount = 0;\n  for (var i = 0, j = imageData.length; i < j; i += 4) {\n    let bgr = [imageData[i + 2], imageData[i + 1], imageData[i]]; // bgr for little endian\n    let hexcode = pixelToHex(bgr);\n    imageDataHexString += hexcode + \",\";\n    pixelCount++;\n    if (pixelCount % 8 === 0) {\n      imageDataHexString += \"\\n\";\n      if (pixelCount % 64 === 0) {\n        imageDataHexString += \"\\n\\t\";\n      } else {\n        imageDataHexString += \"\\t\";\n      }\n    }\n  }\n\n  const imageDefinitionEnd = `\\n};\\n`;\n\n  return imageDefinitionString + imageDataHexString + imageDefinitionEnd;\n}\n\nfunction generateMode4CSourceFileString(\n  image: ImageInterface,\n  palette?: Palette\n): string {\n  if (!palette) {\n    console.error(\n      \"Tried to generate mode 4 header string with no palette! Falling back to mode 3...\"\n    );\n    return generateMode3CSourceFileString(image);\n  }\n\n  // Note: we compress the length of the bitmap by 2 because we can fit 2 chars\n  // into a short\n  const variableName = image.fileName.slice(0, image.fileName.lastIndexOf(\".\"));\n  const bitmapLength = image.dimensions.height * image.dimensions.width;\n  const imageDefinitionString = `const unsigned short ${variableName}Bitmap[${bitmapLength /\n    2}]__attribute__((aligned(4)))=\\n{\\n`;\n\n  const imageData = image.getImageData();\n  let imageDataHexString = \"\";\n  for (let i = 0; i < imageData.length; i += 2) {\n    imageDataHexString += paletteIndicesToHex(imageData[i], imageData[i + 1]);\n    if ((i / 2 + 1) % 8 === 0) imageDataHexString += `\\n`;\n  }\n  const imageDefinitionEnd = `};\\n\\n`;\n\n  // Palette length is uncompressed\n  const paletteCSourceString = PaletteToGBA(palette);\n\n  const CSourceString =\n    imageDefinitionString +\n    imageDataHexString +\n    imageDefinitionEnd +\n    paletteCSourceString;\n\n  return CSourceString;\n}\n\ninterface headerFileParams {\n  fileName: string;\n  imageDimensions: Dimensions;\n  palette?: Palette;\n}\n\nexport function generateHeaderString(\n  params: headerFileParams,\n  mode: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7\n): string {\n  switch (mode) {\n    case 3:\n      return generateMode3HeaderString(params);\n    case 4:\n      return generateMode4HeaderString(params);\n    default:\n      console.warn(\n        `Attempting to generate header file for mode ${mode}, but it's unsupported for now. Defaulting to mode 3.`\n      );\n      return generateMode3HeaderString(params);\n  }\n}\n\nexport function generateMode3HeaderString({\n  fileName,\n  imageDimensions,\n  palette\n}: headerFileParams): string {\n  const variableName = fileName.slice(0, fileName.lastIndexOf(\".\"));\n  const bitmapLength = imageDimensions.height * imageDimensions.width;\n  const bitmapSize = bitmapLength * 2;\n  // TODO: Find out how to compute the size vs. the length of the bitmap\n  const bitmapSizeDefinition = `#define ${variableName.toUpperCase()}_SIZE ${bitmapSize}\\n`;\n  const bitmapLengthDefinition = `#define ${variableName.toUpperCase()}_LENGTH ${bitmapLength}\\n`;\n  const imageHeightDefinition = `#define ${variableName.toUpperCase()}_HEIGHT ${\n    imageDimensions.height\n  }\\n`;\n  const imageWidthDefinition = `#define ${variableName.toUpperCase()}_WIDTH ${\n    imageDimensions.width\n  }\\n`;\n  const imageDefinitionString = `extern const unsigned short ${variableName}Bitmap[${bitmapLength}];\\n\\n`;\n\n  const headerString =\n    bitmapLengthDefinition +\n    bitmapSizeDefinition +\n    imageHeightDefinition +\n    imageWidthDefinition +\n    `\\n` +\n    imageDefinitionString +\n    `\\n`;\n\n  return headerString;\n}\n\nexport function generateMode4HeaderString({\n  fileName,\n  imageDimensions,\n  palette\n}: headerFileParams): string {\n  if (!palette) {\n    console.error(\n      \"Tried to generate mode 4 header string with no palette! Falling back to mode 3...\"\n    );\n    return generateMode3HeaderString({\n      fileName: fileName,\n      imageDimensions: imageDimensions\n    });\n  }\n\n  // Note: we compress the length of the bitmap by 2 because we can fit 2 chars\n  // into a short\n  const variableName = fileName.slice(0, fileName.lastIndexOf(\".\"));\n  const bitmapLength = imageDimensions.height * imageDimensions.width;\n  const bitmapLengthDefinition = `#define ${variableName.toUpperCase()}_SIZE ${bitmapLength}\\n`;\n  const imageHeightDefinition = `#define ${variableName.toUpperCase()}_HEIGHT ${\n    imageDimensions.height\n  }\\n`;\n  const imageWidthDefinition = `#define ${variableName.toUpperCase()}_WIDTH ${\n    imageDimensions.width\n  }\\n`;\n  const imageDefinitionString = `extern const unsigned short ${variableName}Bitmap[${bitmapLength /\n    2}];\\n\\n`;\n\n  // Palette length is uncompressed\n  const paletteLengthDefinition = `#define ${variableName.toUpperCase()}_PAL_SIZE ${PALETTE_LENGTH *\n    2}\\n`;\n  const paletteDefinitionString = `extern const unsigned short ${variableName}Palette[${PALETTE_LENGTH}];\\n\\n`;\n\n  const headerString =\n    bitmapLengthDefinition +\n    imageHeightDefinition +\n    imageWidthDefinition +\n    imageDefinitionString +\n    paletteLengthDefinition +\n    paletteDefinitionString;\n\n  return headerString;\n}\n\nfunction paletteIndicesToHex(index1: number, index2: number): string {\n  if (index1 > 255 || index2 > 255) {\n    console.error(\n      `Tried to convert palette indices ${index1} and ${index2}, but at least one is out of range! Truncating bitwise...`\n    );\n  }\n\n  index1 = index1 & 0xff; // Truncate in case the indices are too big\n  index2 = index2 & 0xff;\n\n  const combinedIndexString = (index2 | (index1 << 8))\n    .toString(16)\n    .toUpperCase()\n    .padStart(4, \"0\");\n\n  return `0x${combinedIndexString}, `;\n}\n\n/*\n  pixel2hex\n\n  takes in a number array [b: number, g: number, r: number]\n  convert each pixel to GBA compatible bgr hex format\n  return hex value of pixel\n*/\nfunction pixelToHex(bgr: number[]): string {\n  // convert to 16-bit binary format: 0bbbbbgggggrrrrr\n  let binary_value = \"0\";\n  bgr.forEach(element => {\n    element = Math.floor((element * 32) / 256);\n    let elementString = element.toString(2); // convert to binary\n    while (elementString.length < 5) {\n      elementString = \"0\" + elementString;\n    }\n    binary_value += elementString;\n  });\n  // convert to hex\n  let hex_value = parseInt(binary_value, 2).toString(16);\n  while (hex_value.length < 4) {\n    hex_value = \"0\" + hex_value;\n  }\n  hex_value = hex_value.toUpperCase();\n  return \"0x\" + hex_value;\n}\n\nfunction colorToHex(color: Color): string {\n  let bgr = [color.b, color.g, color.r];\n  return pixelToHex(bgr);\n}\n\n/*\n  pal2Hex\n  \n  takes in a Palette and converts rgb into hex values 0x00rrggbb\n  outputs string of the converted Palette colorArray\n*/\nexport function paletteToHex(palette: Palette): string {\n  let palFile = \"\";\n  let count = 1;\n  const alignment = 4; //this number can change depending on how we want to format\n  palette.forEach(element => {\n    let hex = \"0x00\";\n    hex +=\n      element.r < 16 ? \"0\" + element.r.toString(16) : element.r.toString(16);\n    hex +=\n      element.g < 16 ? \"0\" + element.g.toString(16) : element.g.toString(16);\n    hex +=\n      element.b < 16 ? \"0\" + element.b.toString(16) : element.b.toString(16);\n    palFile += hex + \"\\t\";\n    if (count === alignment) {\n      palFile += \"\\n\";\n      count = 1;\n    } else {\n      count++;\n    }\n  });\n  return palFile;\n}\n\n/*\n  pal2GBA\n  \n  takes in a Palette and converts rgb into hex values (binary: 0bbbbbgggggrrrrr)\n  adds a declaration for the palette array in C\n  outputs string with the declaration and converted Palette colorArray\n*/\nfunction PaletteToGBA(palette: Palette): string {\n  const palArea = PALETTE_LENGTH;\n  const colAlignment = 8; //these numbers can change depending depending on how we want to format\n  const rowAlignment = 8; //\n\n  let palC =\n    \"const unsigned short powPal[\" +\n    palArea +\n    \"] __attribute__((aligned(4)))=\\n{\\n\";\n\n  for (let i = 1; i <= palette.length; i++) {\n    const element = palette[i - 1];\n    palC += colorToHex(element) + \",\";\n\n    if (i % colAlignment === 0) {\n      palC += \"\\n\";\n    }\n    if (i % (colAlignment * rowAlignment) === 0) {\n      palC += \"\\n\";\n    }\n  }\n\n  return palC + \"};\";\n}\n\nexport function exportPalette(pal: Palette): string {\n  return paletteToHex(pal);\n}\n\nexport async function exportImage(\n  img: ImageInterface,\n  type: string\n): Promise<Blob | null> {\n  switch (type) {\n    case \"BMP\":\n    case \"PNG\":\n      return await img.getImageFileBlob();\n    default:\n      return new Blob([\"Invalid file type\"]);\n  }\n}\n","import {\n  Color,\n  Dimensions,\n  ImageInterface,\n  ImageCoordinates\n} from \"../../lib/interfaces\";\nimport ImageCanvas from \"./ImageCanvas\";\nimport * as Loader from \"../../lib/fileLoadUtils\";\n\nexport default abstract class Bitmap implements ImageInterface {\n  public  fileName: string;\n  public dimensions: Dimensions;\n\n  protected imageData: Uint8ClampedArray;\n  protected abstract imageCanvas: ImageCanvas;\n\n  constructor(\n    fileName: string,\n    dimensions: Dimensions,\n    imageData?: Uint8ClampedArray\n  ) {\n    this.fileName = fileName;\n    this.dimensions = dimensions;\n\n    if (imageData) {\n      this.imageData = imageData;\n    } else {\n      this.imageData = new Uint8ClampedArray(\n        this.dimensions.width * this.dimensions.height * 4\n      );\n    }\n  }\n\n  public getImageCanvasElement(): HTMLCanvasElement {\n    return this.imageCanvas.getImageCanvasElement();\n  }\n\n  public getPixelGridCanvasElement(): HTMLCanvasElement {\n    return this.imageCanvas.getPixelGridCanvasElement();\n  }\n\n  public getImageData(): Uint8ClampedArray {\n    return this.imageData;\n  }\n\n  public async getImageFileBlob(): Promise<Blob | null> {\n    return new Promise(resolve => {\n      this.getImageCanvasElement().toBlob(blob => resolve(blob));\n    });\n  }\n\n  protected updateImageData(pos: ImageCoordinates, color: Color): void {\n    this.imageData[Loader.offset(pos, this.dimensions)] = color.r;\n    this.imageData[Loader.offset(pos, this.dimensions) + 1] = color.g;\n    this.imageData[Loader.offset(pos, this.dimensions) + 2] = color.b;\n    this.imageData[Loader.offset(pos, this.dimensions) + 3] = color.a;\n  }\n\n  /////////////////////////////////////// abstract classes\n\n  public abstract getCSourceData(): string;\n  public abstract getHeaderData(): string;\n  public abstract getPixelColorAt(pos: ImageCoordinates): Color;\n  public abstract setPixelColor(\n    pos: ImageCoordinates,\n    color: Color\n  ): void;\n}","import {\n  Color,\n  Dimensions,\n  ImageInterface,\n  ImageCoordinates\n} from \"../../lib/interfaces\";\nimport { createHiddenCanvas } from \"../../lib/fileLoadUtils\";\n\nexport default class ImageCanvas {\n  public dimensions: Dimensions;\n  public pixelGridRatio = 16;\n\n  private hiddenCanvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D | null;\n  private pixelGrid: PixelGrid;\n\n  public constructor(image: ImageInterface) {\n    console.log(\"Creating new internal ImageCanvas.\");\n\n    this.dimensions = image.dimensions;\n    this.hiddenCanvas = createHiddenCanvas(image.dimensions);\n    this.context = this.hiddenCanvas.getContext(\"2d\");\n    this.pixelGrid = new PixelGrid(image.dimensions, this.pixelGridRatio);\n\n    this.drawImageToHiddenCanvas(image);\n  }\n\n  public getImageCanvasElement(): HTMLCanvasElement {\n    return this.hiddenCanvas;\n  }\n\n  public getPixelGridCanvasElement(): HTMLCanvasElement {\n    return this.pixelGrid.getCanvasElement();\n  }\n\n  public updatePixel(pos: ImageCoordinates, color: Color): void {\n    this.drawPixel(pos, color);\n  }\n\n  public updateRegion(\n    image: ImageInterface,\n    x: number,\n    y: number,\n    dx: number,\n    dy: number\n  ): void {\n    // for (let x = 0; x < image.dimensions.width; x++) {\n    //   for (let y = 0; y < image.dimensions.height; y++) {\n    //     this.drawPixel({ x, y }, image.getPixelColorAt({ x, y }));\n    //   }\n    // }\n  }\n\n  public redrawImage(image: ImageInterface): void {\n    this.drawImageToHiddenCanvas(image);\n  }\n\n  private drawPixel(pos: ImageCoordinates, color: Color): void {\n    if (!this.context) return;\n    let colorString = `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n    this.context.fillStyle = colorString;\n    this.context.fillRect(pos.x, pos.y, 1, 1);\n  }\n\n  private drawImageToHiddenCanvas(image: ImageInterface) {\n    for (let x = 0; x < image.dimensions.width; x++) {\n      for (let y = 0; y < image.dimensions.height; y++) {\n        this.drawPixel({ x, y }, image.getPixelColorAt({ x, y }));\n      }\n    }\n  }\n}\n\nexport class PixelGrid {\n  public dimensions: Dimensions;\n  public pixelGridRatio = 16;\n\n  private hiddenCanvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D | null;\n\n  constructor(dimensions: Dimensions, pixelGridRatio: number) {\n    console.log(\"Setting up pixel grid.\");\n\n    this.pixelGridRatio = pixelGridRatio;\n\n    this.dimensions = dimensions;\n    this.hiddenCanvas = createHiddenCanvas({\n      width: this.dimensions.width * this.pixelGridRatio,\n      height: this.dimensions.height * this.pixelGridRatio\n    });\n    this.context = this.hiddenCanvas.getContext(\"2d\");\n\n    this.drawGrid();\n  }\n\n  public getCanvasElement(): HTMLCanvasElement {\n    return this.hiddenCanvas;\n  }\n\n  private drawGrid(): void {\n    if (!this.context) return;\n    const { width, height } = this.dimensions;\n    this.context.strokeStyle = \"gray\";\n    this.context.beginPath();\n\n    for (let x = 0; x <= width; x++) {\n      this.context.moveTo(x * this.pixelGridRatio, 0);\n      this.context.lineTo(\n        x * this.pixelGridRatio,\n        height * this.pixelGridRatio\n      );\n    }\n\n    for (let y = 0; y <= height; y++) {\n      this.context.moveTo(0, y * this.pixelGridRatio);\n      this.context.lineTo(width * this.pixelGridRatio, y * this.pixelGridRatio);\n    }\n\n    this.context.stroke();\n  }\n}\n","import { Color, Dimensions, ImageCoordinates } from \"../../lib/interfaces\";\nimport {\n  generateHeaderString,\n  generateCSourceFileString\n} from \"../../lib/exportUtils\";\nimport * as Loader from \"../../lib/fileLoadUtils\";\nimport Bitmap from \"./Bitmap\";\nimport ImageCanvas from \"./ImageCanvas\";\n\nexport default class Bitmap3 extends Bitmap {\n  protected imageCanvas: ImageCanvas;\n\n  constructor(\n    fileName: string,\n    dimensions: Dimensions,\n    imageData: Uint8ClampedArray\n  ) {\n    super(fileName, dimensions, imageData);\n\n    this.imageCanvas = new ImageCanvas(this);\n  }\n\n  public getCSourceData(): string {\n    return generateCSourceFileString(this, 3);\n  }\n\n  public getHeaderData(): string {\n    return generateHeaderString(\n      { fileName: this.fileName, imageDimensions: this.dimensions },\n      3\n    );\n  }\n\n  public getPixelColorAt(pos: ImageCoordinates): Color {\n      const r = this.imageData[Loader.offset(pos, this.dimensions)];\n      const g = this.imageData[Loader.offset(pos, this.dimensions) + 1];\n      const b = this.imageData[Loader.offset(pos, this.dimensions) + 2];\n      const a = this.imageData[Loader.offset(pos, this.dimensions) + 3];\n\n      return new Color(r, g, b, a);\n  }\n\n  public setPixelColor(pos: ImageCoordinates, color: Color): void {\n    console.log(\"setting pixel color bmp3\");\n    super.updateImageData(pos, color);\n    this.imageCanvas.updatePixel(pos, color);\n  }\n}\n","import { Dimensions, ImageCoordinates, Color } from \"./interfaces\";\nimport Bitmap from \"../components/objects/Bitmap\";\nimport Bitmap3 from \"../components/objects/Bitmap3\";\nimport Palette from \"../components/objects/Palette\";\n\nexport const createHiddenCanvas = (d: Dimensions): HTMLCanvasElement => {\n  let hiddenCanvas = document.createElement(\"canvas\");\n  hiddenCanvas.hidden = true;\n  hiddenCanvas.setAttribute(\"height\", d.height + \"px\");\n  hiddenCanvas.setAttribute(\"width\", d.width + \"px\");\n  return hiddenCanvas;\n};\n\nexport const loadImageDataFromCanvas = (\n  canvas: HTMLCanvasElement,\n  dimensions: Dimensions\n): Uint8ClampedArray => {\n  const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D; // unsafe\n  return context.getImageData(0, 0, dimensions.width, dimensions.height).data;\n};\n\n// is async necessary here???? I don't think it is\nexport const loadHiddenImage = (imagefile: File): Promise<HTMLImageElement> => {\n  return new Promise((resolve, reject) => {\n    let image = new Image();\n    image.hidden = true;\n\n    image.onload = () => {\n      resolve(image);\n    };\n\n    image.onerror = reject;\n    image.src = URL.createObjectURL(imagefile);\n  });\n};\n\nexport const loadNewImage = async (imageFile: File): Promise<Bitmap> => {\n  let hiddenImage = await loadHiddenImage(imageFile);\n  let dimensions = {\n    height: hiddenImage.naturalHeight,\n    width: hiddenImage.naturalWidth\n  };\n  let hiddenCanvas = createHiddenCanvas(dimensions);\n  const context = hiddenCanvas.getContext(\"2d\");\n  if (context) context.drawImage(hiddenImage, 0, 0);\n  let imageData = loadImageDataFromCanvas(hiddenCanvas, dimensions);\n  return new Bitmap3(imageFile.name, dimensions, imageData);\n};\n\nexport const offset = (pos: ImageCoordinates, d: Dimensions) =>\n  4 * (pos.y * d.width + pos.x);\n\n/**\n * loadNewPalette\n * @param paletteFile .pal file being imported\n * generates a Color[] by iterating through the File\n * returns initialized palette\n */\nexport const loadNewPalette = async (\n  paletteFile: File\n): Promise<Palette | null> => {\n  let text = await new Response(paletteFile).text();\n  let fileString = text\n    .trim()\n    .replace(/\\t/g, \"\")\n    .replace(/\\n/g, \"\");\n  let colors: Color[] = new Array(256);\n\n  // checking to make sure string is properly formatted before iterating through it\n  if (fileString.substr(0, 4) === \"0x00\") {\n    console.log(\"Palette file is valid. Generating color array...\");\n\n    // string is in 0x00rrggbb format (length 10)\n    for (let i = 0, j = 0; i < fileString.length; i += 10, j++) {\n      let red = parseInt(fileString.substr(i + 4, 2), 16);\n      let green = parseInt(fileString.substr(i + 6, 2), 16);\n      let blue = parseInt(fileString.substr(i + 8, 2), 16);\n\n      let color = new Color(red, green, blue, 1);\n      colors[j] = color;\n    }\n    return colors;\n  } else {\n    console.log(\"Invalid palette. Palette unchanged.\");\n    return null;\n  }\n};\n","import { Color, Dimensions, ImageCoordinates } from \"../../lib/interfaces\";\nimport {\n  generateHeaderString,\n  generateCSourceFileString\n} from \"../../lib/exportUtils\";\nimport Palette from \"./Palette\";\nimport ImageCanvas from \"./ImageCanvas\";\nimport Bitmap from \"./Bitmap\";\n\nexport default class Bitmap4 extends Bitmap {\n  private data: number[];\n  private palette: Palette;\n  private currentPaletteIndex: number;\n\n  protected imageCanvas: ImageCanvas;\n\n  constructor(\n    fileName: string,\n    indexArray: number[],\n    palette: Palette,\n    dimensions: Dimensions\n  ) {\n    super(fileName, dimensions);\n    this.data = indexArray;\n    this.palette = palette;\n    this.imageCanvas = new ImageCanvas(this);\n    this.currentPaletteIndex = 0;\n  }\n\n  public getHeaderData(): string {\n    return generateHeaderString(\n      {\n        fileName: this.fileName,\n        imageDimensions: this.dimensions,\n        palette: this.palette\n      },\n      4\n    );\n  }\n\n  public getCSourceData(): string {\n    return generateCSourceFileString(this, 4, this.palette);\n  }\n\n  /**\n   * Returns the color at the specified index in the image by indexing into the\n   * color palette\n   * @param ImageCoordinates the index in the Sprite that you would like to get\n   *    the color at\n   */\n  public getPixelColorAt(pos: ImageCoordinates): Color {\n    if (pos.x >= this.dimensions.width || pos.y >= this.dimensions.height) {\n      console.error(\n        \"Tried to access pixel at\",\n        pos,\n        \"but dimensions of sprite are\",\n        this.dimensions\n      );\n    }\n    return this.palette[this.data[this.dimensions.width * pos.y + pos.x]];\n  }\n\n  public setPixelColor(pos: ImageCoordinates): void {\n    console.log(\"setting pixel color bmp4\");\n    this.data[pos.y * this.dimensions.width + pos.x] = this.currentPaletteIndex;\n    this.imageCanvas.updatePixel(pos, this.palette[this.currentPaletteIndex]);\n  }\n\n  setPaletteIndex(newPaletteIndex: number) {\n    this.currentPaletteIndex = newPaletteIndex;\n  }\n\n  public updatePalette(newPalette: Palette): void {\n    this.palette = newPalette;\n    this.imageCanvas.redrawImage(this);\n  }\n}\n","import Bitmap4 from \"../components/objects/Bitmap4\";\r\nimport Palette from \"../components/objects/Palette\";\r\nimport { Color } from \"./interfaces\";\r\nimport Bitmap from \"../components/objects/Bitmap\";\r\n\r\nconst BLACK: Color = new Color(0, 0, 0, 1);\r\n\r\nexport function quantize(\r\n  image: Bitmap,\r\n  depth: number\r\n): { sprite: Bitmap4; palette: Palette } {\r\n  let centroids: number[][];\r\n  let imageArr = imageToArr(image);\r\n  let colors = depth;\r\n  const MaxPalSize = 256;\r\n\r\n  //start by checking that there are at least 'depth' unique colors in image\r\n  // console.log(\"find colors\")\r\n  let uniqueColors = [];\r\n  let uniqueColorsString: String[] = [];\r\n  for (let i = 0; i < imageArr.length; i++) {\r\n    let check = imageArr[i];\r\n    if (!uniqueColorsString.includes(JSON.stringify(check))) {\r\n      uniqueColors.push(check);\r\n      uniqueColorsString.push(JSON.stringify(check));\r\n    }\r\n  }\r\n\r\n  //pick unique colors for centroids using binary search to find points with\r\n  //largest average distance\r\n  if (colors === 1 || uniqueColors.length < colors) {\r\n    centroids = uniqueColors;\r\n    colors = uniqueColors.length;\r\n  } else {\r\n    let { pickedCentroids } = findCentroids(uniqueColors, colors);\r\n    // console.log(pickedCentroids)\r\n    centroids = JSON.parse(JSON.stringify(pickedCentroids));\r\n  }\r\n\r\n  // use K-means to fit all colors in image to 'colors' clusters\r\n  let { groups, centers } = kmeans(\r\n    JSON.parse(JSON.stringify(imageArr)),\r\n    JSON.parse(JSON.stringify(centroids)),\r\n    colors\r\n  );\r\n\r\n  // console.log(\"kmeans output:\")\r\n  // console.log(groups[0][0]);\r\n  // console.log(centers);\r\n\r\n  let clusters: number[][][] = [];\r\n  //group centers and points in cluster for sorting\r\n  for (let i = 0; i < centers.length; i++) {\r\n    let newCluster: number[][] = [[], []];\r\n    newCluster[0] = centers[i];\r\n    for (var j = 0; j < groups[i].length; j++) {\r\n      newCluster[j + 1] = groups[i][j];\r\n    }\r\n    clusters.push(newCluster);\r\n  }\r\n  // sort clusters from largest to smallest\r\n  clusters.sort(function(a, b) {\r\n    return b.length - a.length;\r\n  });\r\n\r\n  console.log(clusters);\r\n\r\n  let spriteIndexArrayLength = image.dimensions.height * image.dimensions.width;\r\n\r\n  // generate out sprite and palette based on k-means clusters\r\n  let spriteIndexArray: number[] = new Array<number>(spriteIndexArrayLength);\r\n  spriteIndexArray.fill(0);\r\n\r\n  let palette: Color[] = new Array(256);\r\n\r\n  //clusters: [center[r,g,b]], [point 1[r,g,b]], ...]\r\n  let i = 0;\r\n  for (i; i < clusters.length && i < MaxPalSize; i++) {\r\n    let center: Color = new Color(\r\n      clusters[i][0][0],\r\n      clusters[i][0][1],\r\n      clusters[i][0][2],\r\n      1\r\n    );\r\n    palette[i] = center;\r\n    for (let j = 1; j < clusters[i].length; j++) {\r\n      let imageIndex = getColorIndex(imageArr, clusters[i][j]);\r\n      // console.log(imageIndex);\r\n      if (imageIndex !== -1) {\r\n        spriteIndexArray[imageIndex] = i;\r\n      }\r\n    }\r\n  }\r\n  // console.log(paletteColorArray)\r\n  for (i; i < MaxPalSize; i++) {\r\n    palette[i] = BLACK;\r\n  }\r\n\r\n  let sprite = new Bitmap4(\r\n    image.fileName,\r\n    spriteIndexArray,\r\n    palette,\r\n    image.dimensions\r\n  );\r\n  return { sprite, palette };\r\n}\r\n\r\n// Used to find index of colors for building sprite colorArray\r\n// This kills the imageArr (imageArr is destroyed by this function)\r\nfunction getColorIndex(imageArr: number[][], colorArr: number[]): number {\r\n  for (let i = 0; i < imageArr.length; i++) {\r\n    if (\r\n      imageArr[i][0] === colorArr[0] &&\r\n      imageArr[i][1] === colorArr[1] &&\r\n      imageArr[i][2] === colorArr[2]\r\n    ) {\r\n      imageArr[i] = [-1, -1, -1];\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n//converts imageObject into array of colors for k-means\r\nfunction imageToArr(image: Bitmap): number[][] {\r\n  let imageArr = [];\r\n  for (let y = 0; y < image.dimensions.height; y++) {\r\n    for (let x = 0; x < image.dimensions.width; x++) {\r\n      let color = image.getPixelColorAt({ x, y });\r\n      imageArr.push([\r\n        Math.round(Math.min(Math.max(color.r, 0), 255)),\r\n        Math.round(Math.min(Math.max(color.g, 0), 255)),\r\n        Math.round(Math.min(Math.max(color.b, 0), 255))\r\n      ]);\r\n    }\r\n  }\r\n  return imageArr;\r\n}\r\n\r\n//used to find clusters of similar points for image depth reduction (quantization)\r\n//arrayToProcess: number array of colors; [[r, g, b], [r, g, b], ...]\r\n//centroids: center point of clusters;\r\n//clusters: number of clusters to generate\r\nfunction kmeans(\r\n  arrayToProcess: number[][],\r\n  centroids: number[][],\r\n  clusters: number\r\n): { groups: number[][][]; centers: number[][] } {\r\n  let Groups: any[] = [];\r\n  let iterations = 0;\r\n  let tempdistance = 0;\r\n  let oldcentroids: number[][] = JSON.parse(JSON.stringify(centroids));\r\n  let changed = false;\r\n\r\n  do {\r\n    for (let reset = 0; reset < clusters; reset++) {\r\n      Groups[reset] = [];\r\n    }\r\n\r\n    changed = false;\r\n\r\n    changed = false;\r\n\r\n    for (let i = 0; i < arrayToProcess.length; i++) {\r\n      let minDist = -1;\r\n      let minCluster = 0;\r\n\r\n      for (\r\n        let clusterIterate = 0;\r\n        clusterIterate < clusters;\r\n        clusterIterate++\r\n      ) {\r\n        let dist = 0;\r\n\r\n        for (let j = 0; j < arrayToProcess[i].length; j++) {\r\n          dist += Math.pow(\r\n            Math.abs(arrayToProcess[i][j] - centroids[clusterIterate][j]),\r\n            2\r\n          );\r\n        }\r\n        tempdistance = Math.sqrt(dist);\r\n\r\n        if (minDist === -1 || tempdistance <= minDist) {\r\n          minDist = tempdistance;\r\n          minCluster = clusterIterate;\r\n        }\r\n      }\r\n      Groups[minCluster].push(arrayToProcess[i].slice());\r\n    }\r\n\r\n    for (let clusterIterate = 0; clusterIterate < clusters; clusterIterate++) {\r\n      for (let i = 0; i < Groups[clusterIterate].length; i++) {\r\n        for (let j = 0; j < Groups[clusterIterate][i].length; j++) {\r\n          centroids[clusterIterate][j] += Groups[clusterIterate][i][j];\r\n        }\r\n      }\r\n      for (let i = 0; i < centroids[clusterIterate].length; i++) {\r\n        centroids[clusterIterate][i] = Math.round(\r\n          Math.min(\r\n            Math.max(\r\n              centroids[clusterIterate][i] /\r\n                (Groups[clusterIterate].length <= 1\r\n                  ? 1\r\n                  : Groups[clusterIterate].length),\r\n              0\r\n            ),\r\n            255\r\n          )\r\n        );\r\n\r\n        if (centroids[clusterIterate][i] !== oldcentroids[clusterIterate][i]) {\r\n          changed = true;\r\n          oldcentroids = [];\r\n          oldcentroids = JSON.parse(JSON.stringify(centroids));\r\n        }\r\n      }\r\n    }\r\n    iterations++;\r\n  } while (changed === true && iterations < 1000);\r\n\r\n  console.log(\"kmeans output:\");\r\n  console.log(iterations);\r\n  // console.log(Groups.length);\r\n  // console.log(Groups);\r\n  console.log(\"..........\");\r\n\r\n  // let ret = [Groups, centroids];\r\n  // console.log(ret);\r\n  // return ret;\r\n\r\n  return { groups: Groups, centers: centroids };\r\n}\r\n\r\n//function to determine if there exists a group of centroids with specific\r\n//average distance between them\r\n//points: list of points to search\r\n//midDist: desired average distance\r\n//numCentroids: number of points to find\r\n//\r\n//returns:\r\n//possible (boolean)\r\n//centers (list of points with desired distance)\r\nfunction centroidPossible(\r\n  points: number[][],\r\n  midDist: number,\r\n  numCentroids: number\r\n): { possible: boolean; centers: number[][] } {\r\n  let centroids = 1;\r\n  let currColor: number[] = points[0];\r\n  let possible = false;\r\n  let centers: number[][] = [];\r\n\r\n  centers.push(currColor);\r\n\r\n  for (let i = 0; i < points.length; i++) {\r\n    let dist = 0;\r\n\r\n    for (let j = 0; j < points[i].length; j++) {\r\n      dist += Math.pow(Math.abs(points[i][j] - currColor[j]), 2);\r\n    }\r\n    dist = Math.sqrt(dist);\r\n\r\n    if (dist >= midDist) {\r\n      centroids++;\r\n      currColor = points[i];\r\n      centers.push(points[i]);\r\n\r\n      if (centroids >= numCentroids) {\r\n        possible = true;\r\n        return { possible, centers };\r\n      }\r\n    }\r\n  }\r\n  return { possible, centers };\r\n}\r\n\r\n//binary search to find centroids, reutrn list of centroids with\r\n// average largest distance between them\r\nfunction findCentroids(\r\n  uniqueColors: number[][],\r\n  depth: number\r\n): { pickedCentroids: number[][] } {\r\n  let maxDist = 442;\r\n  let minDist = 0;\r\n  let midDist = (maxDist + minDist) / 2;\r\n\r\n  let dist = 0;\r\n\r\n  let pickedCentroids: number[][] = [];\r\n\r\n  while (minDist <= maxDist) {\r\n    midDist = (maxDist + minDist) / 2;\r\n    let { possible, centers } = centroidPossible(uniqueColors, midDist, depth);\r\n\r\n    if (!possible) {\r\n      maxDist = midDist - 1;\r\n    } else {\r\n      if (dist < midDist) {\r\n        pickedCentroids = JSON.parse(JSON.stringify(centers));\r\n        dist = midDist;\r\n      }\r\n      minDist = midDist + 1;\r\n    }\r\n  }\r\n  return { pickedCentroids };\r\n}\r\n","import Palette from \"../components/objects/Palette\";\nimport { Color } from \"./interfaces\";\n\nconst DEFAULT_PALETTE: Palette = [\n  new Color(0, 0, 0, 1),\n  new Color(128, 0, 0, 1),\n  new Color(0, 128, 0, 1),\n  new Color(128, 128, 0, 1),\n  new Color(0, 0, 128, 1),\n  new Color(128, 0, 128, 1),\n  new Color(0, 128, 128, 1),\n  new Color(192, 192, 192, 1),\n  new Color(128, 128, 128, 1),\n  new Color(248, 0, 0, 1),\n  new Color(0, 248, 0, 1),\n  new Color(248, 248, 0, 1),\n  new Color(0, 0, 248, 1),\n  new Color(248, 0, 248, 1),\n  new Color(0, 248, 248, 1),\n  new Color(248, 248, 248, 1),\n  new Color(32, 0, 0, 1),\n  new Color(63, 0, 0, 1),\n  new Color(95, 0, 0, 1),\n  new Color(127, 0, 0, 1),\n  new Color(159, 0, 0, 1),\n  new Color(191, 0, 0, 1),\n  new Color(223, 0, 0, 1),\n  new Color(255, 0, 0, 1),\n  new Color(0, 32, 0, 1),\n  new Color(0, 63, 0, 1),\n  new Color(0, 95, 0, 1),\n  new Color(0, 127, 0, 1),\n  new Color(0, 159, 0, 1),\n  new Color(0, 191, 0, 1),\n  new Color(0, 223, 0, 1),\n  new Color(0, 255, 0, 1),\n  new Color(32, 32, 0, 1),\n  new Color(63, 63, 0, 1),\n  new Color(95, 95, 0, 1),\n  new Color(127, 127, 0, 1),\n  new Color(159, 159, 0, 1),\n  new Color(191, 191, 0, 1),\n  new Color(223, 223, 0, 1),\n  new Color(255, 255, 0, 1),\n  new Color(0, 0, 32, 1),\n  new Color(0, 0, 63, 1),\n  new Color(0, 0, 95, 1),\n  new Color(0, 0, 127, 1),\n  new Color(0, 0, 159, 1),\n  new Color(0, 0, 191, 1),\n  new Color(0, 0, 223, 1),\n  new Color(0, 0, 255, 1),\n  new Color(32, 0, 32, 1),\n  new Color(63, 0, 63, 1),\n  new Color(95, 0, 95, 1),\n  new Color(127, 0, 127, 1),\n  new Color(159, 0, 159, 1),\n  new Color(191, 0, 191, 1),\n  new Color(223, 0, 223, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 32, 32, 1),\n  new Color(0, 63, 63, 1),\n  new Color(0, 95, 95, 1),\n  new Color(0, 127, 127, 1),\n  new Color(0, 159, 159, 1),\n  new Color(0, 191, 191, 1),\n  new Color(0, 223, 223, 1),\n  new Color(0, 255, 255, 1),\n  new Color(16, 16, 16, 1),\n  new Color(31, 31, 31, 1),\n  new Color(47, 47, 47, 1),\n  new Color(63, 63, 63, 1),\n  new Color(79, 79, 79, 1),\n  new Color(95, 95, 95, 1),\n  new Color(111, 111, 111, 1),\n  new Color(127, 127, 127, 1),\n  new Color(143, 143, 143, 1),\n  new Color(159, 159, 159, 1),\n  new Color(175, 175, 175, 1),\n  new Color(191, 191, 191, 1),\n  new Color(207, 207, 207, 1),\n  new Color(223, 223, 223, 1),\n  new Color(239, 239, 239, 1),\n  new Color(255, 255, 255, 1),\n  new Color(255, 0, 0, 1),\n  new Color(255, 31, 0, 1),\n  new Color(255, 63, 0, 1),\n  new Color(255, 95, 0, 1),\n  new Color(255, 127, 0, 1),\n  new Color(255, 159, 0, 1),\n  new Color(255, 191, 0, 1),\n  new Color(255, 223, 0, 1),\n  new Color(255, 255, 0, 1),\n  new Color(224, 255, 0, 1),\n  new Color(192, 255, 0, 1),\n  new Color(160, 255, 0, 1),\n  new Color(128, 255, 0, 1),\n  new Color(96, 255, 0, 1),\n  new Color(64, 255, 0, 1),\n  new Color(32, 255, 0, 1),\n  new Color(0, 255, 0, 1),\n  new Color(0, 255, 31, 1),\n  new Color(0, 255, 63, 1),\n  new Color(0, 255, 95, 1),\n  new Color(0, 255, 127, 1),\n  new Color(0, 255, 159, 1),\n  new Color(0, 255, 191, 1),\n  new Color(0, 255, 223, 1),\n  new Color(0, 255, 255, 1),\n  new Color(0, 224, 255, 1),\n  new Color(0, 192, 255, 1),\n  new Color(0, 160, 255, 1),\n  new Color(0, 128, 255, 1),\n  new Color(0, 96, 255, 1),\n  new Color(0, 64, 255, 1),\n  new Color(0, 32, 255, 1),\n  new Color(0, 0, 255, 1),\n  new Color(31, 0, 255, 1),\n  new Color(63, 0, 255, 1),\n  new Color(95, 0, 255, 1),\n  new Color(127, 0, 255, 1),\n  new Color(159, 0, 255, 1),\n  new Color(191, 0, 255, 1),\n  new Color(223, 0, 255, 1),\n  new Color(255, 0, 255, 1),\n  new Color(255, 0, 224, 1),\n  new Color(255, 0, 192, 1),\n  new Color(255, 0, 160, 1),\n  new Color(255, 0, 128, 1),\n  new Color(255, 0, 96, 1),\n  new Color(255, 0, 64, 1),\n  new Color(255, 0, 32, 1),\n  new Color(255, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(8, 8, 8, 1),\n  new Color(16, 16, 16, 1),\n  new Color(24, 24, 24, 1),\n  new Color(32, 32, 32, 1),\n  new Color(41, 41, 41, 1),\n  new Color(49, 49, 49, 1),\n  new Color(57, 57, 57, 1),\n  new Color(65, 65, 65, 1),\n  new Color(74, 74, 74, 1),\n  new Color(82, 82, 82, 1),\n  new Color(90, 90, 90, 1),\n  new Color(98, 98, 98, 1),\n  new Color(106, 106, 106, 1),\n  new Color(115, 115, 115, 1),\n  new Color(123, 123, 123, 1),\n  new Color(131, 131, 131, 1),\n  new Color(139, 139, 139, 1),\n  new Color(148, 148, 148, 1),\n  new Color(156, 156, 156, 1),\n  new Color(164, 164, 164, 1),\n  new Color(172, 172, 172, 1),\n  new Color(180, 180, 180, 1),\n  new Color(189, 189, 189, 1),\n  new Color(197, 197, 197, 1),\n  new Color(205, 205, 205, 1),\n  new Color(213, 213, 213, 1),\n  new Color(222, 222, 222, 1),\n  new Color(230, 230, 230, 1),\n  new Color(238, 238, 238, 1),\n  new Color(246, 246, 246, 1),\n  new Color(255, 255, 255, 1)\n];\n\nexport default DEFAULT_PALETTE;\n","import React, {\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n  useLayoutEffect\n} from \"react\";\nimport { EditorSettings, ImageCoordinates, Color } from \"../lib/interfaces\";\nimport Bitmap from \"./objects/Bitmap\";\nimport Palette from \"./objects/Palette\";\nimport { Tool } from \"../lib/consts\";\n\n// The pixel grid will not be visible when the scale is smaller than this value.\nconst PIXELGRID_ZOOM_LIMIT = 8;\n\ninterface EditorCanvasProps {\n  image: Bitmap;\n  palette: Palette;\n  selectedPaletteIndex: number;\n  settings: EditorSettings;\n  scale: number;\n  onMouseWheel: (e: WheelEvent) => void;\n}\n\nexport default function EditorCanvas({\n  image,\n  palette,\n  selectedPaletteIndex,\n  settings,\n  scale,\n  onMouseWheel\n}: EditorCanvasProps): JSX.Element {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [canvasSize, setCanvasSize] = useState<number[]>([0, 0]);\n\n  ///////////////////// Drawing Tool\n  const [isPainting, setIsPainting] = useState<boolean>(false);\n  const [mousePos, setMousePos] = useState<ImageCoordinates | undefined>(\n    undefined\n  );\n  const [imagePosition, setImagePosition] = useState<ImageCoordinates>({\n    x: 0,\n    y: 0\n  });\n  /////////////////////\n\n  const drawImageOnCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext(\"2d\");\n    if (!context) return;\n    if (!image) return;\n\n    // Clear the context\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    // Draw the image at the correct position and scale\n    context.drawImage(\n      image.getImageCanvasElement(),\n      imagePosition.x,\n      imagePosition.y,\n      image.dimensions.width * scale,\n      image.dimensions.height * scale\n    );\n    // Draw the grid (if we need to)\n    if (settings.grid && scale >= PIXELGRID_ZOOM_LIMIT) {\n      context.drawImage(\n        image.getPixelGridCanvasElement(),\n        imagePosition.x,\n        imagePosition.y,\n        image.dimensions.width * scale,\n        image.dimensions.height * scale\n      );\n    }\n  }, [image, imagePosition, canvasRef, scale, settings.grid]);\n\n  /**\n   * Handle window resizing and set the new canvasSize state.\n   */\n  useLayoutEffect(() => {\n    const updateCanvasSize = () => {\n      if (canvasRef.current) {\n        setCanvasSize([\n          canvasRef.current.clientWidth,\n          canvasRef.current.clientHeight\n        ]);\n      }\n    };\n    window.addEventListener(\"resize\", () => updateCanvasSize());\n  }, []);\n\n  /**\n   * Set up the canvas.\n   */\n  useLayoutEffect(() => {\n    console.log(\"Setting up canvas...\");\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext(\"2d\");\n    if (!context) return;\n    setCanvasSize([canvas.clientWidth, canvas.clientHeight]);\n    context.imageSmoothingEnabled = false;\n  }, [canvasRef]);\n\n  /**\n   * Change the dimensions of the canvas when the canvasSize changes.\n   */\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext(\"2d\");\n    if (!context) return;\n\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    canvas.width = canvasSize[0] * devicePixelRatio;\n    canvas.height = canvasSize[1] * devicePixelRatio;\n    context.imageSmoothingEnabled = false;\n  }, [canvasSize, canvasRef]);\n\n  /**\n   * Handle mousewheel zooming\n   */\n  useLayoutEffect(() => {\n    if (canvasRef.current) {\n      canvasRef.current.addEventListener(\"wheel\", onMouseWheel);\n    }\n  }, [onMouseWheel]);\n\n  /**\n   * Draw the image whenever the image, imageCanvas, context, scale, or editor\n   * settings change.\n   */\n  useLayoutEffect(() => drawImageOnCanvas(), [\n    drawImageOnCanvas,\n    palette,\n    canvasSize\n  ]);\n\n  /////////////////////////////////////////////////////////////////////////////\n  // Drawing Tool\n  const getMousePos = (e: MouseEvent): ImageCoordinates | undefined => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n      return {\n        x: (e.clientX - rect.left) * scaleX,\n        y: (e.clientY - rect.top) * scaleY\n      };\n    }\n    return undefined;\n  };\n\n  const getImageCoord = useCallback(\n    (mousePos: ImageCoordinates): ImageCoordinates | undefined => {\n      const x = Math.floor((mousePos.x - imagePosition.x) / scale);\n      const y = Math.floor((mousePos.y - imagePosition.y) / scale);\n      if (\n        x < 0 ||\n        x > image.dimensions.width ||\n        y < 0 ||\n        y > image.dimensions.height\n      )\n        return undefined;\n      return { x, y };\n    },\n    [scale, imagePosition]\n  );\n\n  const fillPixel = useCallback(\n    (pos: ImageCoordinates | undefined, color: Color): void => {\n      if (!pos) return;\n      if (!canvasRef.current) return;\n      const context = canvasRef.current.getContext(\"2d\");\n      if (!context) return;\n\n      image.setPixelColor(pos, color);\n      drawImageOnCanvas();\n    },\n    [drawImageOnCanvas, image]\n  );\n\n  const bucketFill = useCallback(\n    (pos: ImageCoordinates | undefined, newColor: Color): void => {\n      // BFS fill\n      if (!pos) return;\n      const color = image.getPixelColorAt(pos);\n      if (color.isEqual(newColor)) return;\n      image.setPixelColor(pos, newColor);\n      console.log(color);\n      let queue = new Array<ImageCoordinates>(pos);\n      let explored = new Array<ImageCoordinates>(pos);\n      while (queue[0] !== undefined) {\n        let curr = queue.shift() as ImageCoordinates;\n        let edges = new Array<ImageCoordinates>(0);\n        // add edges\n        if (curr.y > 0) {\n          edges.push({ x: curr.x, y: curr.y - 1 });\n        }\n        if (curr.y < image.dimensions.height - 1) {\n          edges.push({ x: curr.x, y: curr.y + 1 });\n        }\n        if (curr.x > 0) {\n          edges.push({ x: curr.x - 1, y: curr.y });\n        }\n        if (curr.x < image.dimensions.width - 1) {\n          edges.push({ x: curr.x + 1, y: curr.y });\n        }\n        ///\n        edges\n          .filter(n => !explored.includes(n))\n          .forEach(n => {\n            explored.push(n);\n            if (image.getPixelColorAt(n).isEqual(color)) {\n              queue.push(n);\n              image.setPixelColor(n, newColor);\n            }\n          });\n      }\n\n      drawImageOnCanvas();\n    },\n    [image, drawImageOnCanvas]\n  );\n\n  const startPaint = useCallback(\n    (e: MouseEvent) => {\n      const mousePosition = getMousePos(e);\n      if (!mousePosition) return;\n      setMousePos(mousePosition);\n      const imageCoord = getImageCoord(mousePosition);\n      switch (settings.currentTool) {\n        case Tool.PENCIL:\n          setIsPainting(true);\n          if (!imageCoord) return;\n          fillPixel(imageCoord, palette[selectedPaletteIndex]);\n          break;\n        case Tool.BUCKET:\n          bucketFill(imageCoord, palette[selectedPaletteIndex]);\n          break;\n        case Tool.PAN:\n          setIsPainting(true);\n          break;\n      }\n    },\n    [\n      settings.currentTool,\n      bucketFill,\n      fillPixel,\n      getImageCoord,\n      palette,\n      selectedPaletteIndex\n    ]\n  );\n\n  const paint = useCallback(\n    (e: MouseEvent) => {\n      const newMousePos = getMousePos(e);\n      if (!newMousePos) return;\n      const imageCoord = getImageCoord(newMousePos);\n      // if (!imageCoord) return;\n      switch (settings.currentTool) {\n        case Tool.PENCIL:\n          if (isPainting) {\n            fillPixel(imageCoord, palette[selectedPaletteIndex]);\n          }\n          break;\n        case Tool.PAN:\n          if (isPainting && mousePos) {\n            const newImagePosition = {\n              x: imagePosition.x + (newMousePos.x - mousePos.x),\n              y: imagePosition.y + (newMousePos.y - mousePos.y)\n            };\n            setImagePosition(newImagePosition);\n          }\n          break;\n      }\n      setMousePos(newMousePos);\n    },\n    [\n      isPainting,\n      fillPixel,\n      getImageCoord,\n      palette,\n      selectedPaletteIndex,\n      imagePosition,\n      mousePos,\n      settings.currentTool\n    ]\n  );\n\n  const stopPaint = useCallback(() => {\n    setMousePos(undefined);\n    setIsPainting(false);\n  }, []);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"mousedown\", startPaint);\n    return () => canvas.removeEventListener(\"mousedown\", startPaint);\n  }, [startPaint]);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"mousemove\", paint);\n    return () => {\n      canvas.removeEventListener(\"mousemove\", paint);\n    };\n  }, [paint]);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"mouseup\", stopPaint);\n    canvas.addEventListener(\"mouseleave\", stopPaint);\n    return () => {\n      canvas.removeEventListener(\"mouseup\", stopPaint);\n      canvas.removeEventListener(\"mouseleave\", stopPaint);\n    };\n  }, [stopPaint]);\n\n  /////////////////////////////////////////////////////////////////////////////\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={generateEditorCanvasProps(settings.currentTool)}\n    />\n  );\n}\n\nconst generateEditorCanvasProps = (tool: Tool): string => {\n  const base = \"image-canvas \";\n  switch (tool) {\n    case Tool.PENCIL:\n      return base + \"pencil\";\n    case Tool.BUCKET:\n      return base + \"bucket\";\n    case Tool.PAN:\n      return base + \"pan\";\n  }\n  return base;\n};\n","import React from \"react\";\n\ninterface ExportButtonProps {\n  startImageExport: () => void;\n  buttonLabel: string;\n}\n\nfunction ExportButton({ startImageExport, buttonLabel }: ExportButtonProps): JSX.Element {\n  const handleClick = () => {\n    startImageExport();\n  };\n\n  return (\n    <button className=\"button export-button\" onClick={handleClick}>\n      {buttonLabel}\n    </button>\n  );\n}\n\nexport default ExportButton;\n","import React, { useRef } from \"react\";\n\ntype ImportFile = File | null;\n\ninterface IProps {\n  buttonLabel: string;\n  onFileChange: (imageFile: ImportFile) => void;\n}\n\ninterface IFile {\n  fileName: string;\n  hasLoadedFile: boolean;\n}\n\nfunction ImportButton({ onFileChange, buttonLabel }: IProps): JSX.Element {\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const handleSubmit = (e: React.FormEvent<HTMLInputElement>): void => {\n    e.preventDefault();\n    if (fileInput.current) {\n      if (fileInput.current.files) {\n        onFileChange(fileInput.current.files[0]);\n      }\n    }\n  };\n\n  // const renderLoaded = (fileTitle: string): JSX.Element => (\n  //   <div>\n  //     <button className=\"button import-button\">\n  //     <label>\n  //       Import\n  //       <input\n  //         type=\"file\"\n  //         accept=\".png, .jpg, .jpeg, .bmp, .pal\"\n  //         ref={fileInput}\n  //         onChange={handleSubmit}\n  //       />\n  //     </label>\n  //   </button>\n  //     Loaded <em>{fileTitle}</em>\n  //   </div>\n  // );\n\n  const render = (): JSX.Element => (\n    <button className=\"button import-button\">\n      <label>\n        {buttonLabel}\n        <input\n          type=\"file\"\n          accept=\".png, .jpg, .jpeg, .bmp, .pal\"\n          ref={fileInput}\n          onChange={handleSubmit}\n        />\n      </label>\n    </button>\n  );\n\n  return render();\n}\n\nexport default ImportButton;\n","import { Color } from \"../../lib/interfaces\";\nimport { PALETTE_SIZE, PALETTE_LENGTH } from \"../../lib/consts\";\nimport { createHiddenCanvas } from \"../../lib/fileLoadUtils\";\nimport { PixelGrid } from \"./ImageCanvas\";\n\n// interface IPalette {\n//   readonly dimensions: Dimensions;\n//   getColorAt: (index: number) => Color;\n//   setColorAt: (index: number, color: Color) => void;\n//   swapRows: (row1: number, row2: number) => void;\n//   getColorArray: () => Color[];\n// }\n\ntype Palette = Color[];\n\nexport interface PaletteDrawables {\n  readonly pixelGrid: PixelGrid;\n  readonly hiddenCanvas: HTMLCanvasElement;\n}\n\n/**\n * Constructor for Palette objects. Contains initial draw call.\n * @param colorArray color array to be used as data for the palette\n */\nexport function PaletteDrawablesGenerator(): PaletteDrawables {\n  const pixelGrid = new PixelGrid(PALETTE_SIZE, 8);\n  const hiddenCanvas = createHiddenCanvas(PALETTE_SIZE);\n  // drawPaletteToHiddenCanvas(colorArray, hiddenCanvas);\n  return { pixelGrid, hiddenCanvas };\n}\n\nexport function drawPaletteToHiddenCanvas(\n  palette: Palette,\n  hiddenCanvas: HTMLCanvasElement\n) {\n  const context = hiddenCanvas.getContext(\"2d\");\n  if (!context) {\n    console.error(\"Failed to get Palette hidden canvas context!\");\n    return;\n  }\n  for (let i = 0; i < PALETTE_LENGTH; i++) {\n    const color = palette[i];\n    context.fillStyle = `rgb(${color.r}, ${color.g}, ${color.b})`;\n    context.fillRect(i % 16, Math.floor(i / 16), 1, 1);\n  }\n}\n\nexport function setPaletteColorAndRedraw(\n  palette: Palette,\n  hiddenCanvas: HTMLCanvasElement,\n  index: number,\n  color: Color\n) {\n  palette[index] = color;\n  drawPaletteToHiddenCanvas(palette, hiddenCanvas);\n}\n\nexport default Palette;\n\n// export default class Palette implements IPalette {\n//   public dimensions: Dimensions;\n//   private colorArray: Color[];\n//   private hiddenCanvas: HTMLCanvasElement;\n//   private pixelGrid: PixelGrid;\n\n//   // constructor input will be the inputs needed for generatePalette() function\n//   constructor(colorArray?: Color[]) {\n//     this.dimensions = PALETTE_SIZE;\n\n//     this.colorArray = new Array(this.dimensions.width * this.dimensions.height);\n//     if (colorArray === undefined) {\n//       this.colorArray.fill(COLORS.black);\n//     } else {\n//       if (colorArray.length > PALETTE_SIZE.height * PALETTE_SIZE.width) {\n//         console.warn(\n//           \"why would you ever try to make a palette bigger than 16x16 -_-\"\n//         );\n//         this.colorArray = colorArray.slice(0, 255);\n//       } else {\n//         this.colorArray = colorArray;\n//       }\n//     }\n\n//     this.hiddenCanvas = createHiddenCanvas(this.dimensions);\n//     this.drawPaletteToHiddenCanvas(this.hiddenCanvas);\n//     this.pixelGrid = new PixelGrid(PALETTE_SIZE, 8);\n//   }\n\n//   public swapRows(row1: number, row2: number) {\n//     if (row1 >= this.dimensions.height || row2 >= this.dimensions.height) {\n//       console.error(\"cannot swap rows: input out of bounds\");\n//     } else {\n//       console.log(\"swapping rows...\");\n//       const start1 = row1 * this.dimensions.height;\n//       const start2 = row2 * this.dimensions.height;\n//       this.groupSwap(start1, start2, this.dimensions.width);\n//     }\n//   }\n\n//   public getColorAt(index: number): Color {\n//     if (index >= PALETTE_LENGTH || index < 0) {\n//       console.error(\n//         \"Attempting to access palette at index greater than \" +\n//           PALETTE_LENGTH +\n//           \".\"\n//       );\n//     }\n//     // console.log(\"Palette index\", i, \"Color at index\", this.colorArray[i]);\n//     return this.colorArray[index];\n//   }\n\n//   public setColorAt(index: number, color: Color) {\n//     this.colorArray[index] = color;\n//     this.drawPaletteToHiddenCanvas(this.hiddenCanvas);\n//   }\n\n//   public getPaletteCanvas(): HTMLCanvasElement {\n//     return this.hiddenCanvas;\n//   }\n\n//   public getPixelGridCanvas(): HTMLCanvasElement {\n//     return this.pixelGrid.getCanvasElement();\n//   }\n\n//   public getColorArray(): Color[] {\n//     return this.colorArray;\n//   }\n\n//   private swapIndices(index1: number, index2: number) {\n//     const size = this.dimensions.width * this.dimensions.height;\n//     if (index1 >= size || index2 >= size) {\n//       console.error(\"cannot swip indices: input out of bounds\");\n//     } else {\n//       const temp = this.colorArray[index1];\n//       this.setColorAt(index1, this.colorArray[index2]);\n//       this.setColorAt(index2, temp);\n//     }\n//   }\n\n//   private groupSwap(start1: number, start2: number, len: number) {\n//     for (let i = 0; i < len; i++) {\n//       this.swapIndices(start1 + i, start2 + i);\n//     }\n//   }\n\n//   private drawPaletteToHiddenCanvas(canvas: HTMLCanvasElement) {\n//     const context = canvas.getContext(\"2d\");\n//     if (!context) {\n//       console.error(\"Failed to get Palette hidden canvas context!\");\n//       return;\n//     }\n//     for (let i = 0; i < PALETTE_LENGTH; i++) {\n//       const color = this.colorArray[i];\n//       context.fillStyle = `rgb(${color.r}, ${color.g}, ${color.b})`;\n//       context.fillRect(i % 16, Math.floor(i / 16), 1, 1);\n//     }\n//   }\n// }\n","import React, { useRef, useEffect, useCallback, useState } from \"react\";\nimport Palette, * as PaletteUtils from \"./objects/Palette\";\nimport { PixelGrid } from \"./objects/ImageCanvas\";\n\ninterface IPaletteDisplay {\n  palette: Palette;\n  selectedColorIndex: number;\n  onChangeSelectedColorIndex: (newIndex: number) => void;\n}\n\ninterface MousePos {\n  x: number;\n  y: number;\n}\n\n// This size is defined the same in app.scss\nconst PALETTE_CANVAS_SIZE = {\n  height: 192,\n  width: 192\n};\n\nconst SCALE = PALETTE_CANVAS_SIZE.height / 16;\n\nconst INDEX_TO_X = (index: number) => index % 16;\nconst INDEX_TO_Y = (index: number) => Math.floor(index / 16);\nconst XY_TO_INDEX = ({ x, y }: { x: number; y: number }) => y * 16 + x;\nconst MOUSE_POS_TO_XY = ({ x, y }: { x: number; y: number }) => ({\n  x: Math.floor(x / SCALE),\n  y: Math.floor(y / SCALE)\n});\nconst MOUSE_POS_TO_INDEX = (pos: { x: number; y: number }) =>\n  XY_TO_INDEX(MOUSE_POS_TO_XY(pos));\n\nfunction PaletteDisplay({\n  palette,\n  selectedColorIndex,\n  onChangeSelectedColorIndex\n}: IPaletteDisplay): JSX.Element {\n  const [paletteHiddenCanvas, setPaletteHiddenCanvas] = useState<\n    HTMLCanvasElement\n  >();\n  const [pixelGrid, setPixelGrid] = useState<PixelGrid>();\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  /**\n   * method to draw the palette grid\n   */\n  const drawGrid = useCallback(() => {\n    if (!canvasRef.current || !pixelGrid) return;\n    const context = canvasRef.current.getContext(\"2d\");\n    if (!context) return;\n    context.drawImage(\n      pixelGrid.getCanvasElement(),\n      0,\n      0,\n      PALETTE_CANVAS_SIZE.width * window.devicePixelRatio,\n      PALETTE_CANVAS_SIZE.height * window.devicePixelRatio\n    );\n  }, [pixelGrid]);\n\n  /**\n   * method to populate the palette with colors\n   * fills palette index with proper color using palette colorArray\n   */\n  const drawPalette = useCallback(() => {\n    if (!canvasRef.current || !paletteHiddenCanvas) return;\n    const context = canvasRef.current.getContext(\"2d\");\n    if (!context) return;\n    PaletteUtils.drawPaletteToHiddenCanvas(palette, paletteHiddenCanvas);\n    context.drawImage(\n      paletteHiddenCanvas,\n      0,\n      0,\n      PALETTE_CANVAS_SIZE.width * window.devicePixelRatio,\n      PALETTE_CANVAS_SIZE.height * window.devicePixelRatio\n    );\n  }, [palette, paletteHiddenCanvas]);\n\n  /**\n   * Draws a box around the selected color in the palette view.\n   */\n  const drawSelectedColorHighlight = useCallback(\n    (index: number) => {\n      if (!canvasRef.current) return;\n      let context = canvasRef.current.getContext(\"2d\");\n      if (!context) return;\n      context.beginPath();\n      context.strokeStyle = \"rgba(255, 255, 0, 1)\";\n      context.lineWidth = 2;\n      const ratio = window.devicePixelRatio * SCALE;\n      context.rect(\n        INDEX_TO_X(index) * ratio,\n        INDEX_TO_Y(index) * ratio,\n        ratio,\n        ratio\n      );\n      context.stroke();\n    },\n    [canvasRef]\n  );\n\n  /**\n   * gets mouse position on the palette canvas\n   * @param e MouseEvent\n   */\n  const getMousePos = (e: React.MouseEvent): MousePos => {\n    if (canvasRef.current) {\n      const rect = canvasRef.current.getBoundingClientRect();\n      return {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      };\n    }\n    return {\n      x: -1,\n      y: -1\n    };\n  };\n\n  /**\n   * handles mouse click event\n   * selects the proper row on the palette\n   * @param e MouseEvent\n   */\n  const handleClick = (e: React.MouseEvent): void => {\n    onChangeSelectedColorIndex(MOUSE_POS_TO_INDEX(getMousePos(e)));\n  };\n\n  /**\n   * Set up the canvas\n   */\n  useEffect(() => {\n    console.log(\"Setting up palette canvas\");\n    const setupCanvasSize = (canvas: HTMLCanvasElement) => {\n      const devicePixelRatio = window.devicePixelRatio || 1;\n      canvas.width = canvas.clientWidth * devicePixelRatio;\n      canvas.height = canvas.clientHeight * devicePixelRatio;\n      const context = canvas.getContext(\"2d\");\n      if (context) context.imageSmoothingEnabled = false;\n    };\n    if (canvasRef.current) {\n      setupCanvasSize(canvasRef.current);\n    }\n    const {\n      pixelGrid,\n      hiddenCanvas\n    } = PaletteUtils.PaletteDrawablesGenerator();\n    setPaletteHiddenCanvas(hiddenCanvas);\n    setPixelGrid(pixelGrid);\n  }, []);\n\n  /**\n   * Draw the palette every time something changes\n   */\n  useEffect(() => {\n    drawPalette();\n    drawGrid();\n    drawSelectedColorHighlight(selectedColorIndex);\n  }, [\n    selectedColorIndex,\n    drawPalette,\n    drawGrid,\n    drawSelectedColorHighlight\n  ]);\n\n  return (\n    <canvas ref={canvasRef} onClick={handleClick} className=\"palette-canvas\" />\n  );\n}\n\nexport default PaletteDisplay;\n","import React, { useState } from \"react\";\n\nconst MIN_QUANTIZE = 1;\nconst MAX_QUANTIZE = 256;\n\ninterface ExportButtonProps {\n  handleQuantize: (newColorDepth: number) => void;\n}\n\nfunction ExportButton({ handleQuantize }: ExportButtonProps): JSX.Element {\n  const [depth, setDepth] = useState<number>(15);\n\n  const handleClick = () => {\n    if (!depth) {\n      alert(\"Can't quantize with unspecified color depth!\");\n      return;\n    }\n    handleQuantize(depth);\n  };\n\n  return (\n    <div className=\"quantize-container\">\n      <button className=\"quantize-button\" onClick={handleClick}>\n        Quantize\n      </button>\n      <input\n        className=\"quantize-input\"\n        type=\"number\"\n        value={depth}\n        min={MIN_QUANTIZE}\n        max={MAX_QUANTIZE}\n        onChange={e => setDepth(parseInt(e.target.value))}\n      ></input>\n    </div>\n  );\n}\n\nexport default ExportButton;\n","import React from \"react\";\nimport Palette from \"./objects/Palette\";\nimport PaletteDisplay from \"./PaletteDisplay\";\nimport QuantizeButton from \"./buttons/QuantizeButton\";\nimport { Color } from \"../lib/interfaces\";\n\ninterface PalettePanelProps {\n  palette: Palette;\n  selectedColorIndex: number;\n  updatePalette: (newPalette: Palette) => void;\n  onChangeSelectedColorIndex: (newIndex: number) => void;\n  onChangeColor: (newColor: Color) => void;\n  handleQuantize: (newColorDepth: number) => void;\n}\n\nexport default function PalettePanel({\n  palette,\n  selectedColorIndex,\n  onChangeSelectedColorIndex,\n  onChangeColor,\n  handleQuantize\n}: PalettePanelProps): JSX.Element {\n  return (\n    <div>\n      <div className=\"panel-label\">Color Palette</div>\n      <div className=\"palette-container\">\n        <PaletteDisplay\n          palette={palette}\n          selectedColorIndex={selectedColorIndex}\n          onChangeSelectedColorIndex={onChangeSelectedColorIndex}\n        />\n      </div>\n      <ColorInput\n        currentColor={palette[selectedColorIndex]}\n        onChangeColor={onChangeColor}\n      ></ColorInput>\n      <QuantizeButton handleQuantize={handleQuantize} />\n    </div>\n  );\n}\n\nconst MIN_COLOR_VAL = \"0\";\nconst MAX_COLOR_VAL = \"31\";\n\nconst color256to32 = (color: Color): Color => {\n    const r = Math.ceil((color.r + 1) / 8) - 1;\n    const g = Math.ceil((color.g + 1) / 8) - 1;\n    const b = Math.ceil((color.b + 1) / 8) - 1;\n\n    return new Color(r, g, b, 1);\n};\n\nconst color32to256 = (color: Color): Color => {\n  const r = (color.r + 1) * 8 - 1;\n  const g = (color.g + 1) * 8 - 1;\n  const b = (color.b + 1) * 8 - 1;\n\n  return new Color(r, g, b, 1);\n};\n\ninterface ColorInputProps {\n  currentColor: Color;\n  onChangeColor: (newColor: Color) => void;\n}\n\nfunction ColorInput({\n  currentColor,\n  onChangeColor\n}: ColorInputProps): JSX.Element {\n  // const [color, setColor] = useState<Color>(Color256to32(currentColor));\n\n  /**\n   * When we select a new color from props, we should update which color is being inspected\n   */\n  // useEffect(() => {\n  //   setColor(Color256to32(currentColor));\n  // }, [currentColor]);\n\n  // useEffect(() => {\n  //   onChangeColor(Color32to256(color));\n  // }, [color, onChangeColor]);\n\n  const color32 = color256to32(currentColor);\n\n  const handleRChange = (newRValue: number) => {\n    color32.r = newRValue;\n    const color256 = color32to256(color32);\n    onChangeColor(color256);\n  };\n\n  const handleGChange = (newGValue: number) => {\n    color32.g = newGValue;\n    const color256 = color32to256(color32);\n    onChangeColor(color256);\n  };\n\n  const handleBChange = (newBValue: number) => {\n    color32.b = newBValue;\n    const color256 = color32to256(color32);\n    onChangeColor(color256);\n  };\n\n  return (\n    <div>\n      <div>\n        <label>R</label>\n        <input\n          type=\"number\"\n          max={MAX_COLOR_VAL}\n          min={MIN_COLOR_VAL}\n          value={color32.r}\n          onChange={e => handleRChange(parseInt(e.target.value))}\n        ></input>\n      </div>\n      <div>\n        <label>G</label>\n        <input\n          type=\"number\"\n          max={MAX_COLOR_VAL}\n          min={MIN_COLOR_VAL}\n          value={color32.g}\n          onChange={e => handleGChange(parseInt(e.target.value))}\n        ></input>\n      </div>\n      <div>\n        <label>B</label>\n        <input\n          type=\"number\"\n          max={MAX_COLOR_VAL}\n          min={MIN_COLOR_VAL}\n          value={color32.b}\n          onChange={e => handleBChange(parseInt(e.target.value))}\n        ></input>\n      </div>\n    </div>\n  );\n}\n","import React, { PropsWithChildren } from \"react\";\n\ntype ToggleProps = {\n  state: boolean;\n  onClick: (newState: boolean) => void;\n};\n\nexport default function Toggle({\n  state,\n  onClick,\n  children\n}: PropsWithChildren<ToggleProps>): JSX.Element {\n  return (\n    <button\n      className={state ? \"toggle-on\" : \"toggle-off\"}\n      onClick={() => onClick(!state)}\n    >\n      {children}\n    </button>\n  );\n}\n","import React from \"react\";\nimport { EditorSettings } from \"../lib/interfaces\";\nimport {\n  faBorderAll,\n  faPen,\n  faFillDrip,\n  faSearchPlus,\n  faEyeDropper,\n  faLayerGroup,\n  faCode\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  faCircle,\n  faSquare,\n  faHandPaper\n} from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Tool } from \"../lib/consts\";\nimport Toggle from \"./buttons/Toggle\";\n\ntype ToolsPanelProps = {\n  settings: EditorSettings;\n  onSettingsChange: (newSettings: EditorSettings) => void;\n  onToolChange: (newTool: Tool) => void;\n};\n\nexport default function ToolsPanel({\n  settings,\n  onSettingsChange,\n  onToolChange\n}: ToolsPanelProps) {\n  return (\n    <div>\n      <div className=\"heading\">Tools</div>\n      <Toggle\n        state={settings.currentTool === Tool.PENCIL}\n        onClick={() => onToolChange(Tool.PENCIL)}\n      >\n        <FontAwesomeIcon icon={faPen} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.BUCKET}\n        onClick={() => onToolChange(Tool.BUCKET)}\n      >\n        <FontAwesomeIcon icon={faFillDrip} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.SQUARE}\n        onClick={() => onToolChange(Tool.SQUARE)}\n      >\n        <FontAwesomeIcon icon={faSquare} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.ELLIPSE}\n        onClick={() => onToolChange(Tool.ELLIPSE)}\n      >\n        <FontAwesomeIcon icon={faCircle} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.ZOOM}\n        onClick={() => onToolChange(Tool.ZOOM)}\n      >\n        <FontAwesomeIcon icon={faSearchPlus} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.PAN}\n        onClick={() => onToolChange(Tool.PAN)}\n      >\n        <FontAwesomeIcon icon={faHandPaper} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.DROPPER}\n        onClick={() => onToolChange(Tool.DROPPER)}\n      >\n        <FontAwesomeIcon icon={faEyeDropper} />\n      </Toggle>\n      <div className=\"heading\">View</div>\n      <Toggle\n        state={settings.grid}\n        onClick={() => {\n          let newSettings = { ...settings };\n          newSettings.grid = !settings.grid;\n          onSettingsChange(newSettings);\n        }}\n      >\n        <FontAwesomeIcon icon={faBorderAll} />\n      </Toggle>\n      <Toggle state={false} onClick={() => null}>\n        <FontAwesomeIcon icon={faLayerGroup} />\n      </Toggle>\n      <Toggle state={false} onClick={() => null}>\n        <FontAwesomeIcon icon={faCode} />\n      </Toggle>\n      <div className=\"heading\">Settings</div>\n      <div>\n        Mode: {settings.mode}\n        <br/>\n        {settings.editorMode.toString()}\n      </div>\n    </div>\n  );\n}\n","import React, { useState, PropsWithChildren } from \"react\";\r\n\r\ninterface DropdownProps {\r\n  label: string;\r\n}\r\n\r\nexport default function Dropdown({ label, children }: PropsWithChildren<DropdownProps>) {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"dd-container\">\r\n      <button onClick={() => setOpen(!open)} className=\"dd-button\">\r\n        {label}\r\n      </button>\r\n      <div\r\n        id=\"myDropdown\"\r\n        className={open ? \"dd-content dd-show\" : \"dd-content\"}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React, { useCallback, useState, useReducer } from \"react\";\nimport { exportImage, exportPalette } from \"../lib/exportUtils\";\nimport { EditorSettings, EditorMode, Mode, Color } from \"../lib/interfaces\";\nimport { loadNewImage, loadNewPalette } from \"../lib/fileLoadUtils\";\nimport { quantize } from \"../lib/quantize\";\nimport { saveAs } from \"file-saver\";\nimport { Tool } from \"../lib/consts\";\nimport Bitmap from \"./objects/Bitmap\";\nimport Bitmap3 from \"./objects/Bitmap3\";\nimport Bitmap4 from \"./objects/Bitmap4\";\nimport DEFAULT_PALETTE from \"../lib/defaultPalette\";\nimport EditorCanvas from \"./EditorCanvas\";\nimport ExportButton from \"./buttons/ExportButton\";\nimport ImportButton from \"./buttons/ImportButton\";\nimport Palette from \"./objects/Palette\";\nimport PalettePanel from \"./PalettePanel\";\nimport ToolsPanel from \"./ToolsPanel\";\nimport Dropdown from \"./Dropdown\";\n\nfunction scaleReducer(state: number, e: WheelEvent) {\n  const direction = e.deltaY < 0 ? -1 : 1;\n  if (direction === 1) {\n    return state * 1.1;\n  } else {\n    return state / 1.1;\n  }\n}\n\nfunction App(): JSX.Element {\n  const [palette, setPalette] = useState<Palette>(DEFAULT_PALETTE);\n  const [image, setImage] = useState<Bitmap>();\n  const [selectedColorIndex, setSelectedColorIndex] = useState<number>(0);\n  const [editorSettings, setEditorSettings] = useState<EditorSettings>({\n    grid: true,\n    currentTool: Tool.PENCIL,\n    mode: 3,\n    editorMode: EditorMode.Bitmap\n  });\n\n  const [scale, scaleDispatch] = useReducer(scaleReducer, 8);\n\n  const handleMouseWheelEvent = useCallback(e => scaleDispatch(e), []);\n\n  const handleImageLoad = async (imageFile: File | null) => {\n    if (imageFile) {\n      console.log(\"Loading image...\");\n      let image = await loadNewImage(imageFile);\n      setImage(image);\n    }\n  };\n\n  const handleToolChange = useCallback(\n    (newTool: Tool) => {\n      setEditorSettings({\n        grid: editorSettings.grid,\n        currentTool: newTool,\n        mode: editorSettings.mode,\n        editorMode: editorSettings.editorMode\n      });\n    },\n    [editorSettings]\n  );\n\n  const handleEditorChange = useCallback(\n    (editorMode: EditorMode, mode: Mode) => {\n      setEditorSettings({\n        grid: editorSettings.grid,\n        currentTool: editorSettings.currentTool,\n        mode: mode,\n        editorMode: editorMode\n      });\n    },\n    [editorSettings]\n  );\n\n  const handleQuantize = (newColorDepth: number): void => {\n    newColorDepth = Math.floor(newColorDepth); // just in case of a float\n    if (!(image instanceof Bitmap3)) {\n      alert(\"Requantization of paletted images currently not supported!\");\n    } else {\n      let ok = window.confirm(\n        \"(Don't panic!) Quantizing a bitmap will change it from mode 3 to mode 4. Is this okay?\"\n      );\n      if (ok) {\n        let { palette, sprite } = quantize(image, newColorDepth);\n        setImage(sprite);\n        setPalette(palette);\n      }\n    }\n  };\n\n  const handlePaletteLoad = async (palFile: File | null) => {\n    if (palFile) {\n      console.log(\"Loading palette...\");\n      let newPalette = await loadNewPalette(palFile);\n      if (newPalette) {\n        if (image instanceof Bitmap4) {\n          image.updatePalette(newPalette);\n        }\n        setPalette(newPalette);\n      }\n    }\n  };\n\n  const handleChangeSelectedColor = (newIndex: number) => {\n    setSelectedColorIndex(newIndex);\n    if (image instanceof Bitmap4) {\n      image.setPaletteIndex(newIndex);\n    }\n  };\n\n  const handleColorChange = (newColor: Color): void => {\n    const newPalette = palette.slice();\n    newPalette[selectedColorIndex] = newColor;\n    if (image instanceof Bitmap4) {\n      image.updatePalette(newPalette);\n    }\n    setPalette(newPalette);\n  };\n\n  const handleImageExport = async (type: string) => {\n    let fileName;\n    let fileType = \"\";\n    let blob: Blob | null;\n\n    if (image) {\n      fileName = image.fileName.slice(0, image.fileName.lastIndexOf(\".\"))\n    } else {\n      fileName = \"default\"\n    }\n\n    const exportFailAlert = () =>\n      alert(\"Failed to export image! Check console for more information.\");\n\n    switch (type) {\n      case \"GBA\":\n        if (!image) {\n          alert(\"No image to export! Try importing one first.\");\n          return;\n        }\n        //.c file\n        fileType = \".c\";\n        let cBlob = new Blob([image.getCSourceData()]);\n        saveAs(cBlob, fileName + fileType);\n        //.h file\n        fileType = \".h\";\n        let hBlob = new Blob([image.getHeaderData()]);\n        saveAs(hBlob, fileName + fileType);\n        return;\n      case \"PAL\":\n        //.pal file\n        if (!palette) {\n          alert(\"Can't export a non-existant palette!\");\n          return;\n        } else {\n          fileType = \".pal\";\n          blob = new Blob([exportPalette(palette)]);\n          break;\n        }\n      case \"BMP\":\n        if (!image) {\n          alert(\"No image to export! Try importing one first.\");\n          return;\n        }\n        //.bmp file\n        fileType = \".bmp\";\n        blob = await exportImage(image, type);\n        break;\n      case \"PNG\":\n        if (!image) {\n          alert(\"No image to export! Try importing one first.\");\n          return;\n        }\n        //.png file\n        fileType = \".png\";\n        blob = await exportImage(image, type);\n        break;\n      default:\n        if (!image) {\n          alert(\"No image to export! Try importing one first.\");\n          return;\n        }\n        //default as .txt if unrecognized type is selected\n        fileType = \".txt\";\n        blob = await exportImage(image, type);\n    }\n    if (!blob) {\n      exportFailAlert();\n    } else {\n      saveAs(blob, fileName + fileType);\n    }\n  };\n\n  const handleSettingsChange = useCallback(\n    (newSettings: EditorSettings): void => setEditorSettings(newSettings),\n    []\n  );\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"navbar\">\n        <span className=\"title\">VOCC</span>\n        <Dropdown label=\"New\">\n          <div className=\"dd-content-header\">Bitmap</div>\n          <button onClick={() => handleEditorChange(EditorMode.Bitmap, 3)}>\n            Mode 3\n          </button>\n          <button onClick={() => handleEditorChange(EditorMode.Bitmap, 4)}>\n            Mode 4\n          </button>\n          <div className=\"dd-divider\"></div>\n          <div className=\"dd-content-header\">Spritesheet</div>\n          <button onClick={() => handleEditorChange(EditorMode.Spritesheet, 4)}>\n            4 bpp\n          </button>\n          <div className=\"dd-divider\"></div>\n          <div className=\"dd-content-header\">Background</div>\n          <button onClick={() => handleEditorChange(EditorMode.Background, 0)}>\n            Mode 0\n          </button>\n        </Dropdown>\n        <Dropdown label=\"Edit\">\n          <button onClick={() => null}>Undo</button>\n          <button onClick={() => null}>Redo</button>\n          <div className=\"dd-divider\"></div>\n          <button onClick={() => null}>Clear All</button>\n        </Dropdown>\n        <Dropdown label=\"Import\">\n          <div className=\"dd-content-header\">Image</div>\n          <ImportButton\n            onFileChange={handleImageLoad}\n            buttonLabel=\"Image (*.png, *.bmp, *.jpg)\"\n          />\n          <div className=\"dd-divider\"></div>\n          <ImportButton\n            onFileChange={handlePaletteLoad}\n            buttonLabel=\"Palette (*.pal)\"\n          />\n        </Dropdown>\n        <Dropdown label=\"Export\">\n          <div className=\"dd-content-header\">Image</div>\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, \"PNG\")}\n            buttonLabel=\"PNG Image (*.png)\"\n          />\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, \"BMP\")}\n            buttonLabel=\"Bitmap (*.bmp)\"\n          />\n          <div className=\"dd-divider\"></div>\n          <div className=\"dd-content-header\">GBA</div>\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, \"GBA\")}\n            buttonLabel=\"C Source Code (*.c/.h)\"\n          />\n          <div className=\"dd-divider\"></div>\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, \"PAL\")}\n            buttonLabel=\"Color Palette (*.pal)\"\n          />\n        </Dropdown>\n        <Dropdown label=\"Help\">\n          <form>\n            <button type=\"submit\" formAction=\"\" formTarget=\"\">\n              Documentation\n            </button>\n          </form>\n          <form>\n            <button\n              type=\"submit\"\n              formAction=\"https://www.coranac.com/tonc/text/\"\n              formTarget=\"_blank\"\n            >\n              GBA Graphics 101\n            </button>\n          </form>\n          <div className=\"dd-divider\"></div>\n          <form>\n            <button type=\"submit\" formAction=\"\" formTarget=\"\">\n              About VOCC\n            </button>\n          </form>\n          <div className=\"dd-divider\"></div>\n          <form>\n            <button\n              type=\"submit\"\n              formAction=\"https://github.com/lbussell/vocc\"\n              formTarget=\"_blank\"\n            >\n              View on GitHub\n            </button>\n          </form>\n        </Dropdown>\n      </div>\n      <div className=\"workspace-container\">\n        <div className=\"left-panel\">\n          <div className=\"tools-container\">\n            {/* {image ? <div> Scale: {scale.toFixed(2)}x </div> : null} */}\n            <ToolsPanel\n              settings={editorSettings}\n              onSettingsChange={handleSettingsChange}\n              onToolChange={handleToolChange}\n            ></ToolsPanel>\n          </div>\n          {image ? <div> Scale: {scale.toFixed(2)}x </div> : null}\n        </div>\n        <div className=\"image-container\">\n          {image ? (\n            <EditorCanvas\n              image={image}\n              settings={editorSettings}\n              palette={palette}\n              selectedPaletteIndex={selectedColorIndex}\n              scale={scale}\n              onMouseWheel={handleMouseWheelEvent}\n            />\n          ) : (\n            <div className=\"start-message\">\n              <em>Import an image to get started</em>\n            </div>\n          )}\n        </div>\n        <div className=\"right-panel\">\n          <PalettePanel\n            palette={palette}\n            updatePalette={setPalette}\n            selectedColorIndex={selectedColorIndex}\n            onChangeSelectedColorIndex={handleChangeSelectedColor}\n            onChangeColor={handleColorChange}\n            handleQuantize={handleQuantize}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles/styles.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}