{"version":3,"sources":["util/types.ts","models/Color.ts","util/consts.ts","util/exportUtils.ts","util/fileLoadUtils.ts","models/Bitmap.ts","models/ImageCanvas.ts","models/Bitmap3.ts","models/Bitmap4.ts","models/Palette.ts","models/Sprite.ts","models/Spritesheet4.ts","util/defaultPalette.ts","util/quantize.ts","components/buttons/ExportButton.tsx","components/buttons/ImportButton.tsx","components/Dropdown.tsx","components/EditorCanvas.tsx","components/hooks/useModal.tsx","components/modals/ImportPaletteModal.tsx","components/modals/NewImageModal.tsx","components/buttons/QuantizeButton.tsx","components/PaletteDisplay.tsx","components/PalettePanel.tsx","components/SpritePanel.tsx","components/buttons/Toggle.tsx","components/ToolsPanel.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["EditorMode","Color","r","g","b","a","this","other","Tool","PALETTE_SIZE","height","width","PALETTE_LENGTH","exportType","STORAGE","DEFAULT_SETTINGS","grid","currentTool","PENCIL","imageMode","editorMode","Bitmap","generateCSourceFileString","image","mode","palette","generateMode3CSourceFileString","console","error","imageDataStore","fileName","dimensions","imageData","variableName","slice","lastIndexOf","bitmapLength","imageDefinitionString","imageDataHexString","i","length","paletteIndicesToHex","paletteCSourceString","PaletteToGBA","generateMode4CSourceFileString","pixelCount","j","pixelToHex","generateHeaderString","params","generateMode3HeaderString","imageDimensions","bitmapLengthDefinition","toUpperCase","imageHeightDefinition","imageWidthDefinition","paletteLengthDefinition","paletteDefinitionString","generateMode4HeaderString","warn","bitmapSize","bitmapSizeDefinition","index1","index2","combinedIndexString","toString","padStart","bgr","binary_value","forEach","element","elementString","Math","floor","hex_value","parseInt","color","palC","exportImage","img","type","BMP","PNG","getImageFileBlob","Blob","createHiddenCanvas","d","hiddenCanvas","document","createElement","hidden","setAttribute","loadImageDataFromCanvas","canvas","getContext","getImageData","data","loadHiddenImage","imagefile","Promise","resolve","reject","Image","onload","onerror","src","URL","createObjectURL","loadNewImage","imageFile","hiddenImage","naturalHeight","naturalWidth","context","drawImage","Bitmap3","name","offset","pos","y","x","loadNewPalette","paletteFile","Response","text","fileString","trim","replace","colors","Array","substr","log","red","green","blue","imageCanvas","Uint8ClampedArray","store","imageCanvasElement","toBlob","blob","Loader","pixelGridCanvasElement","ImageCanvas","pixelGridRatio","pixelGrid","PixelGrid","drawImageToHiddenCanvas","drawPixel","dx","dy","fillStyle","fillRect","getPixelColorAt","canvasElement","drawGrid","strokeStyle","beginPath","moveTo","lineTo","stroke","redrawImage","updatePixel","from","Bitmap4","indexArray","currentPaletteIndex","fill","newPaletteIndex","newPalette","drawPaletteToHiddenCanvas","paletteIndexToCol","paletteIndexToRow","Sprite","position","paletteRow","redrawSpritesheet","_data","_dimensions","_position","_palette","_paletteRow","_imageCanvas","_redrawSpritesheet","col","newDimensions","tileArr","tileStartRow","tileStartCol","numberTiles","tile","push","newPaletteRow","sprite","dangerouslySetData","ALERT_INVALID_SPRITE","alert","SS4_SIZE_PIXELS","SS4_SIZE_TILES","TILE_SIZE","Spritesheet4","paletteCol","_backgroundColor","_selectedPaletteCol","_pixelDimensions","_tileDimensions","_hiddenCanvas","_pixelGrid","_tileGridHiddenCanvas","_sprites","_spriteMap","map","TileGridUtils","fillBackground","sprites","decodedSprites","s","fromDataStore","JSON","parse","drawToHiddenCanvas","addToSpriteMap","redrawCanvas","newSprite","newSpriteIndex","addSpriteBoxToCanvas","h","tw","th","c","index","splice","getSpriteFromCoordinates","pixelPosInSprite","spritesheetCoordsToSpriteCoords","p","t","getTileIndexFromCoordinates","pixelCoords","setPixelColorAt","ctx","stringify","spriteDataStore","bpp","varName","ssDimensions","len","SS_TILES_HEADER","palLength","PALETTE_HEADER","toReturn","ssty","sstx","tileRow","tileCol","spCoords","outString","getDataAt","tileData","ss","dangerouslySetSprites","decodeSprites","tileDimensions","ratio","drawTilesOnCanvas","globalAlpha","clearRect","spritePos","spriteDim","spriteNum","strokeRect","font","fillText","ssc","ssd","stp","spd","spp","pixelPos","DEFAULT_PALETTE","SPRITESHEET_PALETTE","BLACK","quantize","depth","centroids","imageArr","round","min","max","imageToArr","uniqueColors","uniqueColorsString","check","includes","pickedCentroids","maxDist","minDist","midDist","dist","centroidPossible","possible","centers","findCentroids","arrayToProcess","clusters","Groups","iterations","tempdistance","oldcentroids","changed","reset","minCluster","clusterIterate","pow","abs","sqrt","groups","kmeans","newCluster","sort","spriteIndexArrayLength","spriteIndexArray","center","imageIndex","getColorIndex","colorArr","points","numCentroids","currColor","ExportButton","startImageExport","buttonLabel","className","onClick","ImportButton","onFileInputChange","fileInput","useRef","accept","ref","onChange","e","current","Dropdown","label","children","useState","open","setOpen","id","EditorCanvas","selectedPaletteIndex","settings","scale","onChangeImage","onChangeColor","onMouseWheel","canvasRef","canvasSize","setCanvasSize","isPainting","setIsPainting","undefined","mousePos","setMousePos","startPos","setStartPos","imagePosition","setImagePosition","endingPos","setEndingPos","drawImageOnCanvas","useCallback","tileGridCanvasElement","useLayoutEffect","window","addEventListener","clientWidth","clientHeight","imageSmoothingEnabled","devicePixelRatio","getMousePos","rect","getBoundingClientRect","scaleX","scaleY","clientX","left","clientY","top","getImageCoord","fillPixel","setPixelColor","bucketFill","newColor","topLeft","botRight","isEqual","queue","explored","curr","shift","edges","filter","n","startPaint","mousePosition","imageCoord","BUCKET","dims","spriteCoord","SQUARE","ELLIPSE","PAN","DROPPER","paint","newMousePos","newImagePosition","stopPaint","temp","point","l","mouseLeave","useEffect","removeEventListener","generateEditorCanvasProps","tool","base","useModal","isShowing","setIsShowing","toggle","ImportPaletteForm","onAccept","oldPal","pal","setPal","oldStartRow","setOldStartRow","newStartRow","setNewStartRow","numRows","setNumRows","handlePaletteLoad","palFile","onSubmit","preventDefault","combinePals","event","files","htmlFor","value","target","newPal","ImportPaletteModal","hide","ReactDOM","createPortal","Fragment","aria-modal","aria-hidden","tabIndex","role","body","NewImageForm","setFileName","setHeight","setWidth","NewImageModal","handleQuantize","setDepth","PALETTE_CANVAS_SIZE","SCALE","MOUSE_POS_TO_INDEX","XY_TO_INDEX","MOUSE_POS_TO_XY","PaletteDisplay","selectedColorIndex","onChangeSelectedColorIndex","paletteHiddenCanvas","setPaletteHiddenCanvas","setPixelGrid","drawPalette","PaletteUtils","drawSelectedColorHighlight","lineWidth","INDEX_TO_X","INDEX_TO_Y","setupCanvasSize","PalettePanel","onSettingsChange","ColorInput","currentColor","QuantizeButton","color32to256","color32","ceil","color256to32","newRValue","color256","handleRChange","newGValue","handleGChange","newBValue","handleBChange","SpritePanel","onAddSprite","onRemoveSprite","onUpdatePaletteRow","handleChangePaletteRow","NewSpriteForm","SpriteListItem","bind","onChangePaletteRow","renderSpriteList","setPaletteRow","key","newRow","setDimensions","setPosition","Toggle","state","ToolsPanel","onToolChange","title","icon","faPen","faFillDrip","faSquare","faCircle","ZOOM","faSearchPlus","faHandPaper","faEyeDropper","LAYER","faPlusSquare","newSettings","faBorderAll","faLayerGroup","faFileImage","faCode","scaleReducer","deltaY","App","setImage","setPalette","setSelectedColorIndex","editorSettings","setEditorSettings","React","updateState","forceUpdate","undoStack","setUndoStack","undoPointer","setUndoPointer","isMode3BitmapModalShowing","toggleMode3BitmpModal","isMode4BitmapModalShowing","toggleMode4BitmpModal","isPaletteModalShowing","togglePaletteModal","useReducer","scaleDispatch","handleMouseWheelEvent","handleImageLoad","resetUndo","handleImageChange","newImage","spritesheetDataStore","localStorage","setItem","pushUndoStack","imageDataStoreString","newStack","handleUndo","newStoreString","newStore","updateFromStore","handleRedo","handlePaletteChange","handleSettingsChange","handleToolChange","newTool","handleNewImage","confirm","Spritesheet","Background","handleColorChange","setBackgroundColor","updatePalette","handleImageExport","kind","fileType","exportFailAlert","GBA","BG","PAL","cBlob","cSourceData","saveAs","hBlob","headerData","count","hex","paletteToHex","keydownHandler","keyCode","ctrlKey","shiftKey","alertBadFormatting","loadedImageMode","getItem","loadedImageType","loadedPalette","loadedImage","clear","parsedImageMode","parsedImageType","buildPalette","paletteString","parsedImage","newEditorSettings","formAction","formTarget","toFixed","newIndex","setPaletteIndex","newColorDepth","spritesheet","addSprite","removeSprite","handleRemoveSprite","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","render","getElementById","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,EAAG,GAAI,EAAG,GACpB,IAAIA,EAAM,EAAG,GAAI,EAAG,GACpB,IAAIA,EAAM,EAAG,GAAI,EAAG,GACpB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,GAAI,GAAI,EAAG,GACrB,IAAIA,EAAM,GAAI,GAAI,EAAG,GACrB,IAAIA,EAAM,GAAI,GAAI,EAAG,GACrB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,EAAG,EAAG,GAAI,GACpB,IAAIA,EAAM,EAAG,EAAG,GAAI,GACpB,IAAIA,EAAM,EAAG,EAAG,GAAI,GACpB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,GAAI,EAAG,GAAI,GACrB,IAAIA,EAAM,GAAI,EAAG,GAAI,GACrB,IAAIA,EAAM,GAAI,EAAG,GAAI,GACrB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,GAAI,GAAI,GACrB,IAAIA,EAAM,EAAG,GAAI,GAAI,GACrB,IAAIA,EAAM,EAAG,GAAI,GAAI,GACrB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,GAAI,EAAG,GACtB,IAAIA,EAAM,IAAK,GAAI,EAAG,GACtB,IAAIA,EAAM,IAAK,GAAI,EAAG,GACtB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,GAAI,IAAK,EAAG,GACtB,IAAIA,EAAM,GAAI,IAAK,EAAG,GACtB,IAAIA,EAAM,GAAI,IAAK,EAAG,GACtB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,GAAI,GACtB,IAAIA,EAAM,EAAG,IAAK,GAAI,GACtB,IAAIA,EAAM,EAAG,IAAK,GAAI,GACtB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,GAAI,IAAK,GACtB,IAAIA,EAAM,EAAG,GAAI,IAAK,GACtB,IAAIA,EAAM,EAAG,GAAI,IAAK,GACtB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,GAAI,EAAG,IAAK,GACtB,IAAIA,EAAM,GAAI,EAAG,IAAK,GACtB,IAAIA,EAAM,GAAI,EAAG,IAAK,GACtB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,GAAI,GACtB,IAAIA,EAAM,IAAK,EAAG,GAAI,GACtB,IAAIA,EAAM,IAAK,EAAG,GAAI,GACtB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,GAAI,GAAI,GAAI,GACtB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,IAGduR,GAAsB,CACjC,IAAIvR,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,EAAG,EAAG,GACrB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,EAAG,IAAK,EAAG,GACrB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,IAAK,IAAK,EAAG,GACvB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,EAAG,EAAG,IAAK,GACrB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,IAAK,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,IAAK,IAAK,GACzB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,IAAK,EAAG,IAAK,GACvB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,EAAG,EAAG,GACnB,IAAIA,EAAM,EAAG,E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","file":"static/js/main.248bc36c.chunk.js","sourcesContent":["import { Tool } from \"./consts\";\nimport Color from \"../models/Color\";\n\nexport interface Color32 {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport interface Dimensions {\n  height: number;\n  width: number;\n}\n\nexport type SpriteDimensions =\n  // Square sizes\n  | { height: 8; width: 8 }\n  | { height: 16; width: 16 }\n  | { height: 32; width: 32 }\n  | { height: 64; width: 64 }\n  // Not square sizes\n  | { height: 16; width: 8 }\n  | { height: 32; width: 8 }\n  | { height: 32; width: 16 }\n  | { height: 64; width: 32 }\n  // Same as above but rotated 90 degrees\n  | { height: 8; width: 16 }\n  | { height: 8; width: 32 }\n  | { height: 16; width: 32 }\n  | { height: 32; width: 64 };\n\nexport type Mode = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\n\nexport enum EditorMode {\n  Bitmap = \"Bitmap\",\n  Spritesheet = \"Spritesheet\",\n  Background = \"Background\",\n}\n\nexport interface Drawable {\n  dimensions: Dimensions;\n  imageCanvasElement: HTMLCanvasElement;\n  pixelGridCanvasElement: HTMLCanvasElement;\n  getPixelColorAt: (pos: ImageCoordinates) => Color;\n}\n\n/**\n * Eventually, these methods should be entirely encapsulated within the classes\n * themselves, not separated as part of a utilities file. Make classes do the\n * work, not functions with access to the classes' private information.\n * Perhaps an abstract class with default implementations will work well here.\n */\nexport interface Exportable {\n  fileName: string;\n  imageDataStore: ImageDataStore;\n  headerData: string;\n  cSourceData: string;\n  getImageFileBlob: () => Promise<Blob | null>;\n  getPixelColorAt: (pos: ImageCoordinates) => Color;\n}\n\nexport interface Modifiable {\n  setPixelColor: (pos: ImageCoordinates, color: Color) => void;\n}\n\nexport interface Undoable {\n  updateFromStore: (store: ImageDataStore) => void;\n}\n\nexport interface ImageInterface\n  extends Drawable,\n  Exportable,\n  Modifiable,\n  Undoable { }\n\nexport interface EditorSettings {\n  grid: boolean;\n  currentTool: Tool;\n  imageMode: Mode;\n  editorMode: EditorMode;\n}\n\nexport interface ImageCoordinates {\n  x: number;\n  y: number;\n}\n\nexport interface ImageDataStore {\n  fileName: string;\n  dimensions: Dimensions;\n  imageData: Uint8ClampedArray | number[];\n}\n\nexport interface SpritesheetDataStore {\n  fileName: string;\n  dimensions: Dimensions;\n  sprites: string[];\n  bpp: number;\n}\n\nexport interface SpriteDataStore {\n  position: ImageCoordinates;\n  dimensions: SpriteDimensions;\n  paletteRow: number;\n  data: Uint8ClampedArray;\n}\n","interface IColor {\n  r: number; g: number; b: number; a: number;\n}\n\nexport default class Color implements IColor {\n  public r: number;\n  public g: number;\n  public b: number;\n  public a: number;\n\n  constructor(r: number, g: number, b: number, a?: number) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a ? a : 1;\n  }\n\n  public toHexString(): string {\n    return \"\";\n  }\n\n  public toString() {\n    return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\n  }\n\n  public isEqual(other: IColor): boolean {\n    if (other === this) {\n      return true;\n    }\n    return (\n      this.r === other.r &&\n      this.g === other.g &&\n      this.b === other.b &&\n      this.a === other.a\n    );\n  }\n}","import Color from \"../models/Color\";\nimport { Dimensions, EditorMode, EditorSettings } from \"./types\";\n\nexport const COLORS = {\n  black: new Color(0, 0, 0, 1),\n  red: new Color(255, 0, 0, 1),\n  blue: new Color(0, 255, 0, 1),\n  green: new Color(0, 0, 255, 1)\n};\n\nexport const PALETTE_SIZE: Dimensions = { height: 16, width: 16 };\nexport const PALETTE_LENGTH = PALETTE_SIZE.height * PALETTE_SIZE.width;\n\nexport enum Tool {\n  PENCIL,\n  BUCKET,\n  SQUARE,\n  ELLIPSE,\n  ZOOM,\n  PAN,\n  DROPPER,\n  LAYER\n}\n\nexport const STORAGE = {\n  image: \"image\",\n  imageData: \"imageData\",\n  palette: \"palette\",\n  imageMode: \"imageMode\",\n  imageType: \"imageType\"\n};\n\nexport const DEFAULT_SETTINGS: EditorSettings = {\n  grid: true,\n  currentTool: Tool.PENCIL,\n  imageMode: 3,\n  editorMode: EditorMode.Bitmap\n};\n","import Color from \"../models/Color\";\nimport Bitmap3 from \"../models/Bitmap3\";\nimport Palette from \"../models/Palette\";\nimport { PALETTE_LENGTH } from \"./consts\";\nimport { Dimensions, ImageInterface, Mode } from \"./types\";\n\nexport enum exportType {\n  GBA,\n  PAL,\n  BMP,\n  PNG,\n  BG,\n}\n\n/*\n  getGBAImageString\n\n  take in ImageObject and Palette\n  get the image array from image2GBA\n  get the palette array from pal2GBA\n  returns the combination of them into one string\n*/\nexport function generateCSourceFileString(\n  image: ImageInterface,\n  mode: Mode,\n  palette?: Palette\n): string {\n  switch (mode) {\n    case 3:\n      return generateMode3CSourceFileString(image);\n    case 4:\n      return generateMode4CSourceFileString(image, palette);\n    default:\n      return generateMode3CSourceFileString(image);\n  }\n}\n\n/**\n * \"Poor man's\" background export function. Exports the entire source code for\n * a background generated using mode 3 bitmap data.\n * @param image the mode 3 bitmap to export as a background\n */\n//TODO :Rename\nexport function mode3BitmapAsTiledBackgroundSource(image: Bitmap3): string {\n  return \"have fun!\";\n}\n\n/**\n * \"Poor man's\" background header export function. Exports the header file data\n * for a background generated using mode 3 bitmap data.\n * @param image the mode 3 bitmap to export as a background\n */\nexport function mode3BitmapAsBackgroundHeader(image: Bitmap3): string {\n  return \"\";\n}\n\nfunction generateMode3CSourceFileString(image: ImageInterface): string {\n  const { fileName, dimensions, imageData } = image.imageDataStore;\n\n  const variableName = fileName.slice(0, fileName.lastIndexOf(\".\"));\n  const bitmapLength = dimensions.height * dimensions.width;\n  const imageDefinitionString = `const unsigned short ${variableName}Bitmap[${\n    bitmapLength / 2\n  }]__attribute__((aligned(4)))=\\n{\\n\\t`;\n\n  let imageDataHexString = ``;\n\n  let pixelCount = 0;\n  for (var i = 0, j = imageData.length; i < j; i += 4) {\n    let bgr = [imageData[i + 2], imageData[i + 1], imageData[i]]; // bgr for little endian\n    let hexcode = pixelToHex(bgr);\n    imageDataHexString += hexcode + \",\";\n    pixelCount++;\n    if (pixelCount % 8 === 0) {\n      imageDataHexString += \"\\n\";\n      if (pixelCount % 64 === 0) {\n        imageDataHexString += \"\\n\\t\";\n      } else {\n        imageDataHexString += \"\\t\";\n      }\n    }\n  }\n\n  const imageDefinitionEnd = `\\n};\\n`;\n\n  return imageDefinitionString + imageDataHexString + imageDefinitionEnd;\n}\n\nfunction generateMode4CSourceFileString(\n  image: ImageInterface,\n  palette?: Palette\n): string {\n  if (!palette) {\n    console.error(\n      \"Tried to generate mode 4 header string with no palette! Falling back to mode 3...\"\n    );\n    return generateMode3CSourceFileString(image);\n  }\n\n  const { fileName, dimensions, imageData } = image.imageDataStore;\n\n  // Note: we compress the length of the bitmap by 2 because we can fit 2 chars\n  // into a short\n  const variableName = fileName.slice(0, fileName.lastIndexOf(\".\"));\n  const bitmapLength = dimensions.height * dimensions.width;\n  const imageDefinitionString = `const unsigned short ${variableName}Bitmap[${\n    bitmapLength / 2\n  }]__attribute__((aligned(4)))=\\n{\\n`;\n\n  let imageDataHexString = \"\";\n  for (let i = 0; i < imageData.length; i += 2) {\n    imageDataHexString += paletteIndicesToHex(imageData[i], imageData[i + 1]);\n    if ((i / 2 + 1) % 8 === 0) imageDataHexString += `\\n`;\n  }\n  const imageDefinitionEnd = `};\\n\\n`;\n\n  // Palette length is uncompressed\n  const paletteCSourceString = PaletteToGBA(palette);\n\n  const CSourceString =\n    imageDefinitionString +\n    imageDataHexString +\n    imageDefinitionEnd +\n    paletteCSourceString;\n\n  return CSourceString;\n}\n\ninterface headerFileParams {\n  fileName: string;\n  imageDimensions: Dimensions;\n  palette?: Palette;\n}\n\nexport function generateHeaderString(\n  params: headerFileParams,\n  mode: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7\n): string {\n  switch (mode) {\n    case 3:\n      return generateMode3HeaderString(params);\n    case 4:\n      return generateMode4HeaderString(params);\n    default:\n      console.warn(\n        `Attempting to generate header file for mode ${mode}, but it's unsupported for now. Defaulting to mode 3.`\n      );\n      return generateMode3HeaderString(params);\n  }\n}\n\nexport function generateMode3HeaderString({\n  fileName,\n  imageDimensions,\n  palette,\n}: headerFileParams): string {\n  const variableName = fileName.slice(0, fileName.lastIndexOf(\".\"));\n  const bitmapLength = imageDimensions.height * imageDimensions.width;\n  const bitmapSize = bitmapLength * 2;\n  // TODO: Find out how to compute the size vs. the length of the bitmap\n  const bitmapSizeDefinition = `#define ${variableName.toUpperCase()}_SIZE ${bitmapSize}\\n`;\n  const bitmapLengthDefinition = `#define ${variableName.toUpperCase()}_LENGTH ${bitmapLength}\\n`;\n  const imageHeightDefinition = `#define ${variableName.toUpperCase()}_HEIGHT ${\n    imageDimensions.height\n  }\\n`;\n  const imageWidthDefinition = `#define ${variableName.toUpperCase()}_WIDTH ${\n    imageDimensions.width\n  }\\n`;\n  const imageDefinitionString = `extern const unsigned short ${variableName}Bitmap[${bitmapLength}];\\n\\n`;\n\n  const headerString =\n    bitmapLengthDefinition +\n    bitmapSizeDefinition +\n    imageHeightDefinition +\n    imageWidthDefinition +\n    `\\n` +\n    imageDefinitionString +\n    `\\n`;\n\n  return headerString;\n}\n\nexport function generateMode4HeaderString({\n  fileName,\n  imageDimensions,\n  palette,\n}: headerFileParams): string {\n  if (!palette) {\n    console.error(\n      \"Tried to generate mode 4 header string with no palette! Falling back to mode 3...\"\n    );\n    return generateMode3HeaderString({\n      fileName: fileName,\n      imageDimensions: imageDimensions,\n    });\n  }\n\n  // Note: we compress the length of the bitmap by 2 because we can fit 2 chars\n  // into a short\n  const variableName = fileName.slice(0, fileName.lastIndexOf(\".\"));\n  const bitmapLength = imageDimensions.height * imageDimensions.width;\n  const bitmapLengthDefinition = `#define ${variableName.toUpperCase()}_SIZE ${bitmapLength}\\n`;\n  const imageHeightDefinition = `#define ${variableName.toUpperCase()}_HEIGHT ${\n    imageDimensions.height\n  }\\n`;\n  const imageWidthDefinition = `#define ${variableName.toUpperCase()}_WIDTH ${\n    imageDimensions.width\n  }\\n`;\n  const imageDefinitionString = `extern const unsigned short ${variableName}Bitmap[${\n    bitmapLength / 2\n  }];\\n\\n`;\n\n  // Palette length is uncompressed\n  const paletteLengthDefinition = `#define ${variableName.toUpperCase()}_PAL_SIZE ${\n    PALETTE_LENGTH * 2\n  }\\n`;\n  const paletteDefinitionString = `extern const unsigned short ${variableName}Palette[${PALETTE_LENGTH}];\\n\\n`;\n\n  const headerString =\n    bitmapLengthDefinition +\n    imageHeightDefinition +\n    imageWidthDefinition +\n    imageDefinitionString +\n    paletteLengthDefinition +\n    paletteDefinitionString;\n\n  return headerString;\n}\n\nexport const PALETTE_HEADER = (varName: string, palLength = PALETTE_LENGTH) =>\n  `#define ${varName}PalLen ${palLength * 2}\\n` +\n  `extern const unsigned short ${varName}Palette[${palLength}];\\n\\n`;\n\nexport const SS_TILES_HEADER = (\n  varName: string,\n  ssDimensions = { height: 256, width: 256 }\n) => {\n  const len = ssDimensions.height * ssDimensions.width;\n  return (\n    `#define ${varName}TilesLen ${len / 2}\\n` +\n    `extern const unsigned short ${varName}Tiles[${len / 4}];\\n\\n`\n  );\n};\n\nfunction paletteIndicesToHex(index1: number, index2: number): string {\n  if (index1 > 255 || index2 > 255) {\n    console.error(\n      `Tried to convert palette indices ${index1} and ${index2}, but at least one is out of range! Truncating bitwise...`\n    );\n  }\n\n  index1 = index1 & 0xff; // Truncate in case the indices are too big\n  index2 = index2 & 0xff;\n\n  const combinedIndexString = (index2 | (index1 << 8))\n    .toString(16)\n    .toUpperCase()\n    .padStart(4, \"0\");\n\n  return `0x${combinedIndexString}, `;\n}\n\n/*\n  pixel2hex\n\n  takes in a number array [b: number, g: number, r: number]\n  convert each pixel to GBA compatible bgr hex format\n  return hex value of pixel\n*/\nfunction pixelToHex(bgr: number[]): string {\n  // convert to 16-bit binary format: 0bbbbbgggggrrrrr\n  let binary_value = \"0\";\n  bgr.forEach((element) => {\n    element = Math.floor((element * 32) / 256);\n    let elementString = element.toString(2); // convert to binary\n    while (elementString.length < 5) {\n      elementString = \"0\" + elementString;\n    }\n    binary_value += elementString;\n  });\n  // convert to hex\n  let hex_value = parseInt(binary_value, 2).toString(16);\n  while (hex_value.length < 4) {\n    hex_value = \"0\" + hex_value;\n  }\n  hex_value = hex_value.toUpperCase();\n  return \"0x\" + hex_value;\n}\n\nexport function colorToHex(color: Color): string {\n  let bgr = [color.b, color.g, color.r];\n  return pixelToHex(bgr);\n}\n\n/*\n  pal2Hex\n  \n  takes in a Palette and converts rgb into hex values 0x00rrggbb\n  outputs string of the converted Palette colorArray\n*/\nexport function paletteToHex(palette: Palette): string {\n  let palFile = \"\";\n  let count = 1;\n  const alignment = 4; //this number can change depending on how we want to format\n  palette.forEach((element) => {\n    let hex = \"0x00\";\n    hex +=\n      element.r < 16 ? \"0\" + element.r.toString(16) : element.r.toString(16);\n    hex +=\n      element.g < 16 ? \"0\" + element.g.toString(16) : element.g.toString(16);\n    hex +=\n      element.b < 16 ? \"0\" + element.b.toString(16) : element.b.toString(16);\n    palFile += hex + \"\\t\";\n    if (count === alignment) {\n      palFile += \"\\n\";\n      count = 1;\n    } else {\n      count++;\n    }\n  });\n  return palFile;\n}\n\n/*\n  pal2GBA\n  \n  takes in a Palette and converts rgb into hex values (binary: 0bbbbbgggggrrrrr)\n  adds a declaration for the palette array in C\n  outputs string with the declaration and converted Palette colorArray\n*/\nexport function PaletteToGBA(palette: Palette): string {\n  const palArea = PALETTE_LENGTH;\n  const colAlignment = 8; //these numbers can change depending depending on how we want to format\n  const rowAlignment = 8; //\n\n  let palC =\n    \"const unsigned short powPal[\" +\n    palArea +\n    \"] __attribute__((aligned(4)))=\\n{\\n\\t\";\n\n  for (let i = 1; i <= palette.length; i++) {\n    const element = palette[i - 1];\n    palC += colorToHex(element) + \",\";\n\n    if (i % colAlignment === 0) {\n      palC += \"\\n\\t\";\n    }\n    if (i % (colAlignment * rowAlignment) === 0) {\n      palC += \"\\n\\t\";\n    }\n  }\n\n  return palC + \"};\";\n}\n\nexport function exportPalette(pal: Palette): string {\n  return paletteToHex(pal);\n}\n\nexport async function exportImage(\n  img: ImageInterface,\n  type: exportType\n): Promise<Blob | null> {\n  switch (type) {\n    case exportType.BMP:\n    case exportType.PNG:\n      return await img.getImageFileBlob();\n    default:\n      return new Blob([\"Invalid file type\"]);\n  }\n}\n","import Bitmap from \"../models/Bitmap\";\nimport Bitmap3 from \"../models/Bitmap3\";\nimport Color from \"../models/Color\";\nimport Palette from \"../models/Palette\";\nimport { Dimensions, ImageCoordinates } from \"./types\";\n\nexport const createHiddenCanvas = (d: Dimensions): HTMLCanvasElement => {\n  let hiddenCanvas = document.createElement(\"canvas\");\n  hiddenCanvas.hidden = true;\n  hiddenCanvas.setAttribute(\"height\", d.height + \"px\");\n  hiddenCanvas.setAttribute(\"width\", d.width + \"px\");\n  return hiddenCanvas;\n};\n\nexport const loadImageDataFromCanvas = (\n  canvas: HTMLCanvasElement,\n  dimensions: Dimensions\n): Uint8ClampedArray => {\n  const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D; // unsafe\n  return context.getImageData(0, 0, dimensions.width, dimensions.height).data;\n};\n\n// is async necessary here???? I don't think it is\nexport const loadHiddenImage = (imagefile: File): Promise<HTMLImageElement> => {\n  return new Promise((resolve, reject) => {\n    let image = new Image();\n    image.hidden = true;\n\n    image.onload = () => {\n      resolve(image);\n    };\n\n    image.onerror = reject;\n    image.src = URL.createObjectURL(imagefile);\n  });\n};\n\nexport const loadNewImage = async (imageFile: File): Promise<Bitmap> => {\n  let hiddenImage = await loadHiddenImage(imageFile);\n  let dimensions = {\n    height: hiddenImage.naturalHeight,\n    width: hiddenImage.naturalWidth\n  };\n  let hiddenCanvas = createHiddenCanvas(dimensions);\n  const context = hiddenCanvas.getContext(\"2d\");\n  if (context) context.drawImage(hiddenImage, 0, 0);\n  let imageData = loadImageDataFromCanvas(hiddenCanvas, dimensions);\n  return new Bitmap3(imageFile.name, dimensions, imageData);\n};\n\nexport const offset = (pos: ImageCoordinates, d: Dimensions) =>\n  4 * (pos.y * d.width + pos.x);\n\n/**\n * loadNewPalette\n * @param paletteFile .pal file being imported\n * generates a Color[] by iterating through the File\n * returns initialized palette\n */\nexport const loadNewPalette = async (\n  paletteFile: File\n): Promise<Palette | null> => {\n  let text = await new Response(paletteFile).text();\n  let fileString = text\n    .trim()\n    .replace(/\\t/g, \"\")\n    .replace(/\\n/g, \"\");\n  let colors: Color[] = new Array(256);\n\n  // checking to make sure string is properly formatted before iterating through it\n  if (fileString.substr(0, 4) === \"0x00\") {\n    console.log(\"Palette file is valid. Generating color array...\");\n\n    // string is in 0x00rrggbb format (length 10)\n    for (let i = 0, j = 0; i < fileString.length; i += 10, j++) {\n      let red = parseInt(fileString.substr(i + 4, 2), 16);\n      let green = parseInt(fileString.substr(i + 6, 2), 16);\n      let blue = parseInt(fileString.substr(i + 8, 2), 16);\n\n      let color = new Color(red, green, blue, 1);\n      colors[j] = color;\n    }\n    return colors;\n  } else {\n    console.log(\"Invalid palette. Palette unchanged.\");\n    return null;\n  }\n};\n","import Color from \"../models/Color\";\nimport * as Loader from \"../util/fileLoadUtils\";\nimport {\n  Dimensions,\n  ImageCoordinates,\n  ImageDataStore,\n  ImageInterface\n} from \"../util/types\";\nimport ImageCanvas from \"./ImageCanvas\";\n\nexport default abstract class Bitmap implements ImageInterface {\n  public fileName: string;\n  public dimensions: Dimensions;\n\n  protected imageData: Uint8ClampedArray;\n  protected abstract imageCanvas: ImageCanvas;\n\n  constructor(\n    fileName: string,\n    dimensions: Dimensions,\n    imageData?: Uint8ClampedArray\n  ) {\n    this.fileName = fileName;\n    this.dimensions = dimensions;\n\n    if (imageData) {\n      this.imageData = imageData;\n    } else {\n      this.imageData = new Uint8ClampedArray(\n        this.dimensions.width * this.dimensions.height * 4\n      );\n    }\n  }\n\n  public get imageCanvasElement(): HTMLCanvasElement {\n    return this.imageCanvas.imageCanvasElement;\n  }\n\n  public get pixelGridCanvasElement(): HTMLCanvasElement {\n    return this.imageCanvas.pixelGridCanvasElement;\n  }\n\n  public get imageDataStore(): ImageDataStore {\n    return {\n      fileName: this.fileName,\n      dimensions: this.dimensions,\n      imageData: this.imageData.slice()\n    };\n  }\n\n  public updateFromStore(store: ImageDataStore): void {\n    this.dimensions = store.dimensions;\n    this.fileName = store.fileName;\n    this.imageData = store.imageData as Uint8ClampedArray;\n  }\n\n  public async getImageFileBlob(): Promise<Blob | null> {\n    return new Promise(resolve => {\n      this.imageCanvasElement.toBlob(blob => resolve(blob));\n    });\n  }\n\n  protected updateImageData(pos: ImageCoordinates, color: Color): void {\n    this.imageData[Loader.offset(pos, this.dimensions)] = color.r;\n    this.imageData[Loader.offset(pos, this.dimensions) + 1] = color.g;\n    this.imageData[Loader.offset(pos, this.dimensions) + 2] = color.b;\n    this.imageData[Loader.offset(pos, this.dimensions) + 3] = color.a;\n  }\n\n  /////////////////////////////////////// abstract classes\n\n  public abstract get cSourceData(): string;\n  public abstract get headerData(): string;\n  public abstract getPixelColorAt(pos: ImageCoordinates): Color;\n  public abstract setPixelColor(pos: ImageCoordinates, color: Color): void;\n}\n","import Color from \"../models/Color\";\nimport { createHiddenCanvas } from \"../util/fileLoadUtils\";\nimport { Dimensions, ImageCoordinates, Drawable } from \"../util/types\";\n\nexport default class ImageCanvas {\n  public dimensions: Dimensions;\n  public pixelGridRatio = 16;\n\n  private hiddenCanvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D | null;\n  private pixelGrid: PixelGrid;\n\n  public constructor(image: Drawable) {\n    console.log(\"Creating new internal ImageCanvas.\");\n\n    this.dimensions = image.dimensions;\n    this.hiddenCanvas = createHiddenCanvas(image.dimensions);\n    this.context = this.hiddenCanvas.getContext(\"2d\");\n    this.pixelGrid = new PixelGrid(image.dimensions, this.pixelGridRatio);\n\n    this.drawImageToHiddenCanvas(image);\n  }\n\n  public get imageCanvasElement(): HTMLCanvasElement {\n    return this.hiddenCanvas;\n  }\n\n  public get pixelGridCanvasElement(): HTMLCanvasElement {\n    return this.pixelGrid.canvasElement;\n  }\n\n  public updatePixel(pos: ImageCoordinates, color: Color): void {\n    this.drawPixel(pos, color);\n  }\n\n  public updateRegion(\n    image: Drawable,\n    x: number,\n    y: number,\n    dx: number,\n    dy: number\n  ): void {\n    // for (let x = 0; x < image.dimensions.width; x++) {\n    //   for (let y = 0; y < image.dimensions.height; y++) {\n    //     this.drawPixel({ x, y }, image.getPixelColorAt({ x, y }));\n    //   }\n    // }\n  }\n\n  public redrawImage(image: Drawable): void {\n    this.drawImageToHiddenCanvas(image);\n  }\n\n  private drawPixel({ x, y }: ImageCoordinates, color: Color): void {\n    if (!this.context) return;\n    this.context.fillStyle = color.toString();\n    this.context.fillRect(x, y, 1, 1);\n  }\n\n  private drawImageToHiddenCanvas(image: Drawable) {\n    for (let x = 0; x < image.dimensions.width; x++) {\n      for (let y = 0; y < image.dimensions.height; y++) {\n        this.drawPixel({ x, y }, image.getPixelColorAt({ x, y }));\n      }\n    }\n  }\n}\n\nexport class PixelGrid {\n  public dimensions: Dimensions;\n  public pixelGridRatio = 16;\n\n  private hiddenCanvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D | null;\n\n  constructor(dimensions: Dimensions, pixelGridRatio: number) {\n    console.log(\"Setting up pixel grid.\");\n\n    this.pixelGridRatio = pixelGridRatio;\n\n    this.dimensions = dimensions;\n    this.hiddenCanvas = createHiddenCanvas({\n      width: this.dimensions.width * this.pixelGridRatio,\n      height: this.dimensions.height * this.pixelGridRatio\n    });\n    this.context = this.hiddenCanvas.getContext(\"2d\");\n\n    this.drawGrid();\n  }\n\n  public get canvasElement(): HTMLCanvasElement {\n    return this.hiddenCanvas;\n  }\n\n  private drawGrid(): void {\n    if (!this.context) return;\n    const { width, height } = this.dimensions;\n    this.context.strokeStyle = \"gray\";\n    this.context.beginPath();\n\n    for (let x = 0; x <= width; x++) {\n      this.context.moveTo(x * this.pixelGridRatio, 0);\n      this.context.lineTo(\n        x * this.pixelGridRatio,\n        height * this.pixelGridRatio\n      );\n    }\n\n    for (let y = 0; y <= height; y++) {\n      this.context.moveTo(0, y * this.pixelGridRatio);\n      this.context.lineTo(width * this.pixelGridRatio, y * this.pixelGridRatio);\n    }\n\n    this.context.stroke();\n  }\n}\n","import Color from \"../models/Color\";\nimport {\n  generateCSourceFileString,\n  generateHeaderString\n} from \"../util/exportUtils\";\nimport * as Loader from \"../util/fileLoadUtils\";\nimport { Dimensions, ImageCoordinates, ImageDataStore } from \"../util/types\";\nimport Bitmap from \"./Bitmap\";\nimport ImageCanvas from \"./ImageCanvas\";\n\nexport default class Bitmap3 extends Bitmap {\n  protected imageCanvas: ImageCanvas;\n\n  constructor(\n    fileName: string,\n    dimensions: Dimensions,\n    imageData?: Uint8ClampedArray\n  ) {\n    super(fileName, dimensions, imageData);\n\n    this.imageCanvas = new ImageCanvas(this);\n  }\n\n  static fromDataStore({\n    imageData,\n    dimensions,\n    fileName\n  }: ImageDataStore): Bitmap3 {\n    return new Bitmap3(fileName, dimensions, Uint8ClampedArray.from(imageData));\n  }\n\n  public updateFromStore({ imageData }: ImageDataStore) {\n    console.log(imageData as Uint8ClampedArray);\n    this.imageData = imageData as Uint8ClampedArray;\n    this.imageCanvas.redrawImage(this);\n  }\n\n  public get imageDataStore(): ImageDataStore {\n    return {\n      fileName: this.fileName,\n      dimensions: this.dimensions,\n      imageData: Array.from(this.imageData)\n    };\n  }\n\n  public get cSourceData(): string {\n    return generateCSourceFileString(this, 3);\n  }\n\n  public get headerData(): string {\n    return generateHeaderString(\n      { fileName: this.fileName, imageDimensions: this.dimensions },\n      3\n    );\n  }\n\n  public getPixelColorAt(pos: ImageCoordinates): Color {\n    const r = this.imageData[Loader.offset(pos, this.dimensions)];\n    const g = this.imageData[Loader.offset(pos, this.dimensions) + 1];\n    const b = this.imageData[Loader.offset(pos, this.dimensions) + 2];\n    const a = this.imageData[Loader.offset(pos, this.dimensions) + 3];\n\n    return new Color(r, g, b, a);\n  }\n\n  public setPixelColor(pos: ImageCoordinates, color: Color): void {\n    super.updateImageData(pos, color);\n    this.imageCanvas.updatePixel(pos, color);\n  }\n}","import Color from \"../models/Color\";\nimport {\n  generateCSourceFileString,\n  generateHeaderString\n} from \"../util/exportUtils\";\nimport { Dimensions, ImageCoordinates, ImageDataStore } from \"../util/types\";\nimport Bitmap from \"./Bitmap\";\nimport ImageCanvas from \"./ImageCanvas\";\nimport Palette from \"./Palette\";\n\nexport default class Bitmap4 extends Bitmap {\n  private data: number[];\n  private palette: Palette;\n  private currentPaletteIndex: number;\n\n  protected imageCanvas: ImageCanvas;\n\n  constructor(\n    fileName: string,\n    palette: Palette,\n    dimensions: Dimensions,\n    indexArray?: number[]\n  ) {\n    super(fileName, dimensions);\n    if (indexArray) {\n      this.data = indexArray;\n    } else {\n      this.data = Array<number>(dimensions.height * dimensions.width).fill(0);\n    }\n    this.palette = palette;\n    this.imageCanvas = new ImageCanvas(this);\n    this.currentPaletteIndex = 0;\n  }\n\n  static fromDataStore(\n    { imageData, dimensions, fileName }: ImageDataStore,\n    palette: Palette\n  ): Bitmap4 {\n    return new Bitmap4(fileName, palette, dimensions, imageData as number[]);\n  }\n\n  public updateFromStore({ imageData }: ImageDataStore): void {\n    this.data = imageData as number[];\n    this.imageCanvas.redrawImage(this);\n  }\n\n  public get headerData(): string {\n    return generateHeaderString(\n      {\n        fileName: this.fileName,\n        imageDimensions: this.dimensions,\n        palette: this.palette\n      },\n      4\n    );\n  }\n\n  public get cSourceData(): string {\n    return generateCSourceFileString(this, 4, this.palette);\n  }\n\n  /**\n   * Returns the color at the specified index in the image by indexing into the\n   * color palette\n   * @param ImageCoordinates the index in the Sprite that you would like to get\n   *    the color at\n   */\n  public getPixelColorAt(pos: ImageCoordinates): Color {\n    if (pos.x >= this.dimensions.width || pos.y >= this.dimensions.height) {\n      console.error(\n        \"Tried to access pixel at\",\n        pos,\n        \"but dimensions of sprite are\",\n        this.dimensions\n      );\n    }\n    return this.palette[this.data[this.dimensions.width * pos.y + pos.x]];\n  }\n\n  public setPixelColor(pos: ImageCoordinates): void {\n    this.data[pos.y * this.dimensions.width + pos.x] = this.currentPaletteIndex;\n    this.imageCanvas.updatePixel(pos, this.palette[this.currentPaletteIndex]);\n  }\n\n  setPaletteIndex(newPaletteIndex: number) {\n    this.currentPaletteIndex = newPaletteIndex;\n  }\n\n  public updatePalette(newPalette: Palette): void {\n    this.palette = newPalette;\n    this.imageCanvas.redrawImage(this);\n  }\n\n  public get imageDataStore(): ImageDataStore {\n    return {\n      imageData: this.data.slice(),\n      dimensions: this.dimensions,\n      fileName: this.fileName\n    };\n  }\n}\n","import { PALETTE_LENGTH, PALETTE_SIZE } from \"../util/consts\";\nimport { createHiddenCanvas } from \"../util/fileLoadUtils\";\nimport Color from \"./Color\";\nimport { PixelGrid } from \"./ImageCanvas\";\n\n// interface IPalette {\n//   readonly dimensions: Dimensions;\n//   getColorAt: (index: number) => Color;\n//   setColorAt: (index: number, color: Color) => void;\n//   swapRows: (row1: number, row2: number) => void;\n//   getColorArray: () => Color[];\n// }\n\ntype Palette = Color[];\n\nexport interface PaletteDrawables {\n  readonly pixelGrid: PixelGrid;\n  readonly hiddenCanvas: HTMLCanvasElement;\n}\n\n/**\n * Constructor for Palette objects. Contains initial draw call.\n * @param colorArray color array to be used as data for the palette\n */\nexport function PaletteDrawablesGenerator(): PaletteDrawables {\n  const pixelGrid = new PixelGrid(PALETTE_SIZE, 8);\n  const hiddenCanvas = createHiddenCanvas(PALETTE_SIZE);\n  // drawPaletteToHiddenCanvas(colorArray, hiddenCanvas);\n  return { pixelGrid, hiddenCanvas };\n}\n\nexport function drawPaletteToHiddenCanvas(\n  palette: Palette,\n  hiddenCanvas: HTMLCanvasElement\n) {\n  const context = hiddenCanvas.getContext(\"2d\");\n  if (!context) {\n    console.error(\"Failed to get Palette hidden canvas context!\");\n    return;\n  }\n  for (let i = 0; i < PALETTE_LENGTH; i++) {\n    const color = palette[i];\n    context.fillStyle = `rgb(${color.r}, ${color.g}, ${color.b})`;\n    context.fillRect(paletteIndexToCol(i), paletteIndexToRow(i), 1, 1);\n  }\n}\n\nexport function setPaletteColorAndRedraw(\n  palette: Palette,\n  hiddenCanvas: HTMLCanvasElement,\n  index: number,\n  color: Color\n) {\n  palette[index] = color;\n  drawPaletteToHiddenCanvas(palette, hiddenCanvas);\n}\n\nexport function paletteIndexToRow(i: number): number {\n  return Math.floor(i / 16);\n}\n\nexport function paletteIndexToCol(i: number): number {\n  return i % 16;\n}\n\nexport default Palette;\n","import { PALETTE_SIZE } from \"../util/consts\";\nimport {\n  Dimensions,\n  Drawable,\n  ImageCoordinates,\n  SpriteDimensions,\n  SpriteDataStore,\n} from \"../util/types\";\nimport Color from \"./Color\";\nimport ImageCanvas from \"./ImageCanvas\";\nimport Palette from \"./Palette\";\n\ninterface ISprite extends Drawable {\n  dimensions: SpriteDimensions; // In pixels\n  position: ImageCoordinates; // In tiles\n  palette: Palette;\n  paletteRow: number;\n}\n\nexport default class Sprite implements ISprite, Drawable {\n  private _data: Uint8ClampedArray;\n  private _dimensions: SpriteDimensions;\n  private _position: ImageCoordinates;\n  private _palette: Palette;\n  private _paletteRow: number;\n  private _imageCanvas: ImageCanvas;\n  private _redrawSpritesheet: () => void;\n\n  constructor(\n    position: ImageCoordinates,\n    dimensions: SpriteDimensions,\n    palette: Palette,\n    paletteRow: number,\n    redrawSpritesheet: () => void\n  ) {\n    this._dimensions = dimensions;\n    this._position = position;\n    this._palette = palette;\n    this._paletteRow = paletteRow;\n    this._data = new Uint8ClampedArray(dimensions.height * dimensions.width);\n    this._imageCanvas = new ImageCanvas(this);\n    this._redrawSpritesheet = redrawSpritesheet;\n  }\n\n  public static fromDataStore(\n    { position, dimensions, paletteRow, data }: SpriteDataStore,\n    palette: Palette,\n    redrawSpritesheet: () => void\n  ): Sprite {\n    const sprite = new Sprite(\n      position,\n      dimensions,\n      palette,\n      paletteRow,\n      redrawSpritesheet\n    );\n    sprite.dangerouslySetData(data);\n    return sprite;\n  }\n\n  public updateFromDataStore({\n    position,\n    dimensions,\n    paletteRow,\n    data,\n  }: SpriteDataStore) {\n    this._position = position;\n    this._dimensions = dimensions;\n    this._paletteRow = paletteRow;\n    this._data = data;\n  }\n\n  /**\n   * Sets the pixel color to the given palette column color (row is not\n   * applicable), then updates internal image canvas.\n   * @param pos the position on the sprite to draw the color, in pixels\n   * @param col column of the palette to draw the color of\n   */\n  public setPixelColorAt(pos: ImageCoordinates, col: number) {\n    if (pos.x >= this._dimensions.width || pos.y >= this._dimensions.height) {\n      console.error(\"Sprite: tried to set pixel color outside image bounds.\");\n      console.error(\n        \"Sprite dimensions:\",\n        this._dimensions,\n        \"Attempted to set color at coordinates:\",\n        pos\n      );\n    } else if (col < 0 || col > 0xf) {\n      console.error(\n        \"Sprite: tried to set pixel color outside palette bounds:\",\n        col\n      );\n      return;\n    }\n    console.log(\"set pixel color on sprite\");\n    this._data[offset(this._dimensions, pos)] = col;\n    this._imageCanvas.updatePixel(\n      pos,\n      this._palette[offset(PALETTE_SIZE, { x: col, y: this._paletteRow })]\n    );\n  }\n\n  public getPixelColorAt(pos: ImageCoordinates) {\n    const col = this._data[offset(this._dimensions, pos)];\n    return this._palette[offset(PALETTE_SIZE, { x: col, y: this._paletteRow })];\n  }\n\n  /**\n   * Gets the 4bpp data (the palette column) for a specific pixel in the sprite.\n   * Used for exporting data.\n   * @param pos the position on the sprtie to get data from, in pixels\n   * @returns the sprite data from position pos. Guaranteed to fit in 4 bits.\n   */\n  public getDataAt(pos: ImageCoordinates): number {\n    return this._data[offset(this._dimensions, pos)];\n  }\n\n  public dangerouslySetData(data: Uint8ClampedArray) {\n    this._data = data;\n    this._imageCanvas.redrawImage(this);\n  }\n\n  // Getters and setters\n\n  /** Position of sprite, in tiles */\n  public get position() {\n    return this._position;\n  }\n\n  /** Dimensions of the sprite, in pixels */\n  public get dimensions() {\n    return this._dimensions;\n  }\n\n  // returns array of 8x8 pixel times\n  public get tiles() {\n    let tileArr: Color[][][] = [];\n\n    let tileStartRow = 0;\n    let tileStartCol = 0;\n\n    //get the number of tiles needed to represent this sprite\n    // # pixels in image / # pixles in sprite\n    let numberTiles =\n      (this.dimensions.height * this.dimensions.width) / (8 * 8);\n\n    while (tileArr.length < numberTiles) {\n      let tile: Color[][] = [];\n      for (let i = 0; i < 8; i++) {\n        tile[i] = [];\n      }\n\n      for (let i = tileStartRow; i === tileStartRow || i % 8 !== 0; i++) {\n        for (let j = tileStartCol; j === tileStartCol || j % 8 !== 0; j++) {\n          tile[i - tileStartRow][j - tileStartCol] = this.getPixelColorAt({\n            x: i,\n            y: j,\n          });\n        }\n      }\n      tileStartRow + 8 >= this.dimensions.height\n        ? (tileStartRow = 0)\n        : (tileStartRow += 8);\n      tileStartCol + 8 >= this.dimensions.width\n        ? (tileStartCol = 0)\n        : (tileStartCol += 8);\n      tileArr.push(tile);\n    }\n\n    return tileArr;\n  }\n\n  public set dimensions(newDimensions: SpriteDimensions) {\n    console.warn(\"Sprite: Setting sprite dimensions not yet implemented.\");\n    // Make sure we properly resize the sprite data, as the Uint8ClampedArray\n    // is flattened\n  }\n\n  public get paletteRow() {\n    return this._paletteRow;\n  }\n\n  public set paletteRow(newPaletteRow: number) {\n    if (newPaletteRow < 0 || newPaletteRow > 0xf) {\n      console.error(\n        \"Sprite: tried to set palette row outside bounds: \",\n        newPaletteRow\n      );\n      return;\n    }\n    this._paletteRow = newPaletteRow;\n    this._imageCanvas.redrawImage(this);\n    this._redrawSpritesheet();\n  }\n\n  public get imageCanvasElement() {\n    return this._imageCanvas.imageCanvasElement;\n  }\n\n  public get pixelGridCanvasElement() {\n    return this._imageCanvas.pixelGridCanvasElement;\n  }\n\n  public set palette(newPalette: Palette) {\n    this._palette = newPalette;\n    this._imageCanvas.redrawImage(this);\n  }\n\n  public get spriteDataStore(): SpriteDataStore {\n    return {\n      position: this._position,\n      dimensions: this._dimensions,\n      paletteRow: this._paletteRow,\n      data: this._data,\n    };\n  }\n}\n\nfunction offset({ width }: Dimensions, { x, y }: ImageCoordinates) {\n  return width * y + x;\n}\n","import { createHiddenCanvas } from \"../util/fileLoadUtils\";\nimport {\n  PALETTE_HEADER,\n  SS_TILES_HEADER,\n  PaletteToGBA,\n} from \"../util/exportUtils\";\nimport {\n  Dimensions,\n  ImageCoordinates,\n  ImageDataStore,\n  ImageInterface,\n  SpriteDimensions,\n  SpritesheetDataStore,\n  SpriteDataStore,\n} from \"../util/types\";\nimport Color from \"./Color\";\nimport { PixelGrid } from \"./ImageCanvas\";\nimport Palette, { paletteIndexToCol } from \"./Palette\";\nimport Sprite from \"./Sprite\";\n\nconst ALERT_INVALID_SPRITE = () =>\n  alert(\"There's already a sprite at that location!\");\n\n/**\n * Size of a 4bpp spritesheet in pixels\n */\nconst SS4_SIZE_PIXELS: Dimensions = { height: 256, width: 256 };\n\n/**\n * Size of a 4bpp spritesheet in tiles\n */\nconst SS4_SIZE_TILES: Dimensions = { height: 32, width: 32 };\n\n/**\n * Size of a single tile in pixels\n */\nconst TILE_SIZE: Dimensions = { height: 8, width: 8 };\n\nconst TILEGRID_RATIO = 8;\n\n/**\n * Representation of a 256x256 pixel (32x32 tile), 4bpp Spritesheet to be\n * used on the Gameboy Advance\n */\nexport default class Spritesheet4 implements ImageInterface {\n  public fileName: string;\n\n  private _backgroundColor: Color;\n  private _palette: Palette;\n\n  /** The currently selected palette column to be drawn on the spritesheet */\n  private _selectedPaletteCol: number;\n\n  /** Dimensions of the spritesheet in pixels */\n  private _pixelDimensions: Dimensions = SS4_SIZE_PIXELS;\n\n  /** Dimensions of the spritesheet in tiles */\n  private _tileDimensions: Dimensions = SS4_SIZE_TILES;\n\n  /** Hidden canvas that is drawn directly to the editor's canvas. Contains a\n      composite of all children sprites. */\n  private _hiddenCanvas: HTMLCanvasElement;\n\n  /** A PixelGrid instance that holds a hidden canvas with ONLY the pixel grid,\n      and no tile grid. */\n  private _pixelGrid: PixelGrid;\n\n  /** Hidden canvas that contains a tile grid. Shouldn't need to be modified. */\n  private _tileGridHiddenCanvas: HTMLCanvasElement;\n\n  /** Array of sprites that belong to this spritesheet */\n  private _sprites: Sprite[];\n\n  /**\n   * A 2D mapping of tiles to which sprite is in that tile. Used mostly for\n   * determining which sprite belongs to a given tile for drawing and\n   * displaying purposes.\n   */\n  private _spriteMap: (Sprite | null)[][] = new Array(SS4_SIZE_TILES.height)\n    .fill(null)\n    .map(() => new Array(32).fill(null));\n\n  constructor(fileName: string, palette: Palette, paletteCol: number) {\n    this.fileName = fileName;\n    this._palette = palette;\n    this._selectedPaletteCol = paletteCol;\n    this._hiddenCanvas = createHiddenCanvas(this.dimensions);\n    this._pixelGrid = new PixelGrid(this._pixelDimensions, 16);\n    this._tileGridHiddenCanvas = TileGridUtils.createHiddenCanvas(\n      this._tileDimensions\n    );\n    this._backgroundColor = this._palette[0];\n    this.fillBackground();\n    this._sprites = [];\n  }\n\n  /**\n   * Creates a new Spritesheet4 object from a SpritesheetDataStore. This is\n   * intended to be used when restoring the image editor state from localstorage\n   * or perhaps when loading a spritesheet from a json or text file.\n   *\n   * @param spritesheetDataStore the spritesheet data store to construct a spritesheet from.\n   * @param palette the palette to construct the spritesheet with\n   * @param paletteCol the palette column that's currently selected in the app,\n   * in case it is different from 0\n   */\n  public static fromDataStore(\n    { fileName, sprites }: SpritesheetDataStore,\n    palette: Palette,\n    paletteCol: number = 0\n  ) {\n    let ss = new Spritesheet4(fileName, palette, paletteCol);\n    ss.dangerouslySetSprites(ss.decodeSprites(sprites));\n    return ss;\n  }\n\n  /**\n   * Decodes sprites from their string format and creates Sprite objects out\n   * of them. Does not check if sprites are valid! This isn't an issue if you\n   * trust the output of the encoding functions, but could result in bugs if\n   * someone, for instance, manually modified their localstorage\n   *\n   * @param sprites the decoded array of strings that represents all of the\n   * sprites to be further decoded\n   * @returns an array of decoded Sprite objects\n   */\n  private decodeSprites(sprites: string[]): Sprite[] {\n    let decodedSprites = sprites.map((s) =>\n      Sprite.fromDataStore(\n        JSON.parse(s) as SpriteDataStore,\n        this._palette,\n        () => this.drawToHiddenCanvas()\n      )\n    );\n    decodedSprites.forEach((s) => this.addToSpriteMap(s));\n    return decodedSprites;\n  }\n\n  /**\n   * Sets the internal _sprites variable without performing any checks, draws\n   * the tile grid, and draws the hidden canvas so that the view is completely\n   * updated.\n   *\n   * @remarks It's necessary for this to be its own method since the static\n   * Spritesheet4 constructor doesn't have access to this classes' private\n   * instance variables, but since we're inside the class we can call private\n   * methods from the static function.\n   *\n   * @param sprites the new value for the internal _sprites variable\n   */\n  private dangerouslySetSprites(sprites: Sprite[]) {\n    this._sprites = sprites;\n    TileGridUtils.redrawCanvas(\n      this._tileGridHiddenCanvas,\n      sprites,\n      this._tileDimensions\n    );\n    this.drawToHiddenCanvas();\n  }\n\n  /**\n   * Adds a new, blank sprite to the spritesheet by adding it to the sprite\n   * list, the sprite map, redrawing the hidden canvas, and adding the sprite\n   * box and number to the tile grid canvas.\n   *\n   * @param imageCoordinates the position to add a new sprite at, in tiles\n   * @param dimensions the size of the new sprite in pixels\n   */\n  public addSprite({ x, y }: ImageCoordinates, dimensions: SpriteDimensions) {\n    const newSprite = new Sprite({ x, y }, dimensions, this._palette, 0, () =>\n      this.drawToHiddenCanvas()\n    );\n\n    if (!this.addToSpriteMap(newSprite)) {\n      return; // failed since there was another sprite in the way\n    }\n\n    const newSpriteIndex = this._sprites.length;\n    this._sprites[newSpriteIndex] = newSprite;\n\n    this.drawToHiddenCanvas();\n    TileGridUtils.addSpriteBoxToCanvas(\n      { x, y },\n      dimensions,\n      newSpriteIndex,\n      this._tileGridHiddenCanvas\n    );\n    console.log(\"Added sprite of size\", dimensions, \"at\", { x, y });\n  }\n\n  /**\n   * Adds a sprite to the sprite map at the sprite's location.\n   *\n   * @param sprite the sprite to add to the sprite map\n   * @returns true or false depending on whether or not the sprite's placement\n   * was valid\n   */\n  private addToSpriteMap(sprite: Sprite): boolean {\n    const { x, y } = sprite.position; // tiles\n    const { height: h, width: w } = sprite.dimensions; // pixels\n    const tw = w / TILE_SIZE.width;\n    const th = h / TILE_SIZE.height;\n\n    // Check if the sprite ends up outside of the bounds of the spritesheet\n    if (\n      y + th >= this._tileDimensions.height ||\n      x + tw >= this._tileDimensions.width\n    ) {\n      ALERT_INVALID_SPRITE();\n      return false;\n    }\n\n    // Check if the sprite overlaps another one\n    for (let r = y; r < y + th; r++) {\n      for (let c = x; c < x + tw; c++) {\n        if (this._spriteMap[r][c] != null) {\n          ALERT_INVALID_SPRITE();\n          return false;\n        }\n      }\n    }\n\n    // Finally, assign the sprite\n    for (let r = y; r < y + th; r++) {\n      for (let c = x; c < x + tw; c++) {\n        this._spriteMap[r][c] = sprite;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Removes a sprite from the spritesheet, redraws the hidden canvas, and\n   * redraws the tile grid, sprite boxes, and numbers.\n   *\n   * @remarks Keep in mind that the indices will be reassigned, since this\n   * just deletes the sprite from the list and shifts the rest of the list\n   * over.\n   *\n   * @param index the index of the sprite array to remove the sprite at\n   */\n  public removeSprite(index: number) {\n    const sprite = this._sprites[index];\n    const { x, y } = sprite.position;\n    // Clear out spritemap\n    for (let r = y; r < y + sprite.dimensions.height / TILE_SIZE.height; r++) {\n      for (let c = x; c < x + sprite.dimensions.width / TILE_SIZE.width; c++) {\n        this._spriteMap[r][c] = null;\n      }\n    }\n    // Remove from sprite array\n    this._sprites.splice(index, 1);\n    this.drawToHiddenCanvas();\n    TileGridUtils.redrawCanvas(\n      this._tileGridHiddenCanvas,\n      this._sprites,\n      this._tileDimensions\n    );\n  }\n\n  /**\n   * Gets the specified color of the sprite on the spritesheet.\n   * @param pos position on image in pixels\n   * @returns the color of the sprite at the given position or the transparent \n   * background color if there is no sprite at the given position.\n   */\n  public getPixelColorAt(pos: ImageCoordinates): Color {\n    const sprite = this.getSpriteFromCoordinates(pos);\n    if (!sprite) {\n      console.warn(\"Spritesheet: trying to get color but there's no sprite!\");\n      return this._palette[0];\n    }\n    const pixelPosInSprite = spritesheetCoordsToSpriteCoords(\n      pos,\n      this._pixelDimensions,\n      sprite.position,\n      sprite.dimensions\n    );\n    const color = sprite.getPixelColorAt(pixelPosInSprite);\n    return color;\n  }\n\n  /**\n   * Returns the Sprite that contains the pixel at the given position\n   * @param p position on spritesheet in pixels\n   */\n  public getSpriteFromCoordinates(p: ImageCoordinates): Sprite | null {\n    const t = this.getTileIndexFromCoordinates(p);\n    const sprite = this._spriteMap[t.y][t.x];\n    return sprite;\n  }\n\n  /**\n   * Computes what tile a position lies in on the spritesheet\n   * @param p position on spritesheet in pixels\n   * @returns the coordinates (in tiles) of the tile that contains the\n   * position p\n   */\n  private getTileIndexFromCoordinates(p: ImageCoordinates): ImageCoordinates {\n    const tileX = Math.floor(p.x / 8);\n    const tileY = Math.floor(p.y / 8);\n    return { x: tileX, y: tileY };\n  } // TODO: Implement\n\n  /**\n   * Sets the new palette and redraws all sprites with the new palette, then\n   * redraws the spritesheet\n   * @param newPalette the new palette to redraw all sprites with\n   */\n  public updatePalette(newPalette: Palette) {\n    this._palette = newPalette;\n    // for each sprite, set the new palette\n    // the sprites take care of redrawing themselves\n    this._sprites.map((s) => (s.palette = newPalette));\n    this.drawToHiddenCanvas();\n  }\n\n  // TODO: Implement\n  // Can we replace SpritesheetDataStore with optional properties in ImageDataStore?\n  public updateFromStore(store: ImageDataStore) {\n    return;\n  }\n\n  /**\n   * Sets the pixel at the given position to the given color. Automatically\n   * determines what Sprite to edit.\n   * @param pos the position to set a new color at, in pixels\n   * @param color the color to set\n   */\n  public setPixelColor(pos: ImageCoordinates, color: Color) {\n    const sprite = this.getSpriteFromCoordinates(pos);\n    if (!sprite) {\n      console.warn(\"Spritesheet: trying to set color but there's no sprite!\");\n      return;\n    }\n    const pixelCoords = spritesheetCoordsToSpriteCoords(\n      pos,\n      this._pixelDimensions,\n      sprite.position,\n      sprite.dimensions\n    );\n    sprite.setPixelColorAt(pixelCoords, this._selectedPaletteCol);\n    this.drawToHiddenCanvas();\n    return;\n  }\n\n  public setBackgroundColor(color: Color): void {\n    this._backgroundColor = color;\n  }\n\n  /**\n   * Sets the selected palette column using the given palette index.\n   * @param newPaletteIndex the index in the palette to set the selected column\n   * to. Row is ignored.\n   */\n  public setPaletteIndex(newPaletteIndex: number) {\n    this._selectedPaletteCol = paletteIndexToCol(newPaletteIndex);\n    console.log(this._selectedPaletteCol);\n  }\n\n  private fillBackground() {\n    const ctx = this._hiddenCanvas.getContext(\"2d\");\n    if (!ctx) return;\n    ctx.fillStyle = this._backgroundColor.toString();\n    ctx.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n  }\n\n  /**\n   * Redraws every sprite to the hidden canvas. This is usually inexpensive,\n   * and at worst there will be 1024 canvas draw calls (full spritesheet of 8x8\n   * sprites).\n   */\n  private drawToHiddenCanvas() {\n    const ctx = this._hiddenCanvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    this.fillBackground();\n\n    this.sprites.forEach((sprite) => {\n      ctx.drawImage(\n        sprite.imageCanvasElement,\n        8 * sprite.position.x,\n        8 * sprite.position.y,\n        sprite.dimensions.width,\n        sprite.dimensions.height\n      );\n      ctx.stroke();\n    });\n  }\n\n  // Getters and setters -------------------------------------------------------\n\n  public get dimensions() {\n    return this._pixelDimensions;\n  }\n\n  public get sprites() {\n    return this._sprites;\n  }\n\n  public get imageCanvasElement() {\n    return this._hiddenCanvas;\n  }\n\n  public get tileGridCanvasElement() {\n    return this._tileGridHiddenCanvas;\n  }\n\n  public get pixelGridCanvasElement() {\n    return this._pixelGrid.canvasElement;\n  }\n\n  public get imageDataStore() {\n    const tempData: ImageDataStore = {\n      fileName: this.fileName,\n      dimensions: this.dimensions,\n      imageData: [],\n    };\n    return tempData;\n  }\n\n  public get spritesheetDataStore(): SpritesheetDataStore {\n    let temp = {\n      fileName: this.fileName,\n      dimensions: this._pixelDimensions,\n      sprites: this._sprites.map((s) => JSON.stringify(s.spriteDataStore)),\n      bpp: 4,\n    };\n    return temp;\n  }\n\n  public async getImageFileBlob(): Promise<Blob | null> {\n    return new Promise((resolve) => {\n      this.imageCanvasElement.toBlob((blob) => resolve(blob));\n    });\n  }\n\n  // The correct order should be:\n  // tileHeader, tileData, paletteHeader, paletteData\n  public get headerData(): string {\n    return SS_TILES_HEADER(this.fileName) + PALETTE_HEADER(this.fileName);\n  }\n\n  /**\n   * Get properly formatted c code cotaining an array of spritesheet tile data.\n   * Each index is the hex color value of the pixel.\n   * Iterates one 8x8 TILE at a time going left to right and then down...\n   *\n   * ex. 32 tiles x 32 tiles spritesheet\n   * -------------------------\n   * | 0  | 1  | 2  |...| 32 |\n   * | 33 | 34 | 35 |...| 64 |\n   * | .                     |\n   * | .    .                |\n   * | .         .           |\n   * | 992| 993| 994|...|1024|\n   * -------------------------\n   */\n  private get tileData(): String {\n    const name = this.fileName.slice(0, this.fileName.lastIndexOf(\".\"));\n    const size = (this.dimensions.height * this.dimensions.width) / 4; // 4bpp\n    let toReturn =\n      \"const unsigned short \" +\n      name +\n      \"Tiles[\" +\n      size +\n      \"] __attribute__((aligned(4)))=\\n{\\n\\t\";\n    // for (\n    //   let tileNum = 0;\n    //   tileNum < SS4_SIZE_TILES.height * SS4_SIZE_TILES.width;\n    //   tileNum++\n    // ) {\n    for (let ssty = 0; ssty < this._tileDimensions.height; ssty++) {\n      for (let sstx = 0; sstx < this._tileDimensions.width; sstx++) {\n        const sprite = this._spriteMap[ssty][sstx];\n        if (sprite) {\n          for (let tileRow = 0; tileRow < 8; tileRow += 1) {\n            for (let tileCol = 0; tileCol < 8; tileCol += 4) {\n              // const ssCoords: ImageCoordinates = {\n              //   x: (tileCol + tileNum * 8) % SS4_SIZE_PIXELS.width,\n              //   y: tileRow + Math.floor(tileNum / SS4_SIZE_TILES.width) * 8,\n              // };\n              // toReturn += colorToHex(this.getPixelColorAt(coords)) + \",\";\n              const ssCoords: ImageCoordinates = {\n                x: sstx * TILE_SIZE.width + tileCol,\n                y: ssty * TILE_SIZE.height + tileRow,\n              };\n              // Translate coordinates to be relative to sprite\n              const spCoords = spritesheetCoordsToSpriteCoords(\n                ssCoords,\n                this._pixelDimensions,\n                sprite.position,\n                sprite.dimensions\n              );\n              // Get 8 bits worth of data\n              const d0 = sprite.getDataAt(spCoords);\n              const d1 = sprite.getDataAt({ x: spCoords.x + 1, y: spCoords.y });\n              const d2 = sprite.getDataAt({ x: spCoords.x + 2, y: spCoords.y });\n              const d3 = sprite.getDataAt({ x: spCoords.x + 3, y: spCoords.y });\n              const out = (d0 << 0) + (d1 << 4) + (d2 << 8) + (d3 << 12);\n              const outString = \"0x\" + out.toString(16).padStart(4, \"0\") + \", \";\n              console.log(outString);\n              toReturn += outString;\n            }\n            if (tileRow === 3 || tileRow === 7) {\n              toReturn += \"\\n\\t\";\n            }\n          }\n        } else {\n          toReturn +=\n            \"0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,\\n\\t\" +\n            \"0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,\\n\\t\";\n        }\n        if ((sstx + 1) % 4 === 0) {\n          toReturn += \"\\n\\t\";\n        }\n      }\n    }\n    toReturn += \"};\";\n    return toReturn;\n  }\n\n  /**\n   * Get the c source code for the current spritesheet.\n   * Contains the spritesheet data and palette.\n   */\n  public get cSourceData(): string {\n    return (\n      \"//spritesheet export\\n\" +\n      this.tileData +\n      \"\\n\\n\" +\n      PaletteToGBA(this._palette)\n    );\n  }\n}\n\n/**\n * It's not entirely necessary for the tile grid to be it's own class like the\n * PixelGrid, since it's not really being re-used. So, TileGridUtils is a\n * collection of methods that create and operate on an HTMLCanavsElement that\n * contains a tile grid and also displays boxes around sprites.\n */\nconst TileGridUtils = {\n  /**\n   * Creates a hidden canvas with a tile grid already in place\n   * @param tileDimensions the dimensions of the hidden canvas to create\n   */\n  createHiddenCanvas(tileDimensions: Dimensions) {\n    // height vs. width doesn't matter, since tiles /should/ be square...\n    const ratio = TILEGRID_RATIO * TILE_SIZE.height;\n    const hiddenCanvas = createHiddenCanvas({\n      height: ratio * tileDimensions.height,\n      width: ratio * tileDimensions.width,\n    });\n    this.drawTilesOnCanvas(hiddenCanvas, tileDimensions);\n    return hiddenCanvas;\n  },\n\n  /**\n   * Draws a tile grid on an HTMLCanvasElement. Depends on the canvas and the\n   * tile dimensions matching up based on the TILEGRID_RATIO. They will match\n   * up if the hidden canvas was created with\n   * TileGridUtils.createHiddenCanvas().\n   * @param canvas the existing canvas to draw tiles on\n   * @param tileDimensions the dimensions of the tile grid to draw on the canvas\n   */\n  drawTilesOnCanvas(canvas: HTMLCanvasElement, tileDimensions: Dimensions) {\n    const error = () =>\n      console.error(\n        \"Spritesheet: Failed to get context for tile grid canvas.\",\n        \"Cannot draw tile grid.\"\n      );\n\n    const ratio = TILEGRID_RATIO * TILE_SIZE.height;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) {\n      error();\n      return canvas;\n    }\n\n    ctx.globalAlpha = 1;\n    ctx.strokeStyle = \"blue\";\n    ctx.beginPath();\n\n    for (let x = 0; x <= tileDimensions.width; x++) {\n      ctx.moveTo(x * ratio, 0);\n      ctx.lineTo(x * ratio, tileDimensions.height * ratio);\n    }\n\n    for (let y = 0; y <= tileDimensions.height; y++) {\n      ctx.moveTo(0, y * ratio);\n      ctx.lineTo(tileDimensions.width * ratio, y * ratio);\n    }\n\n    ctx.stroke();\n  },\n\n  /**\n   * Completely redraws the tile grid and all sprite boxes and numbers. To be\n   * used when deleting a sprite or when creating a new canvas after restoring\n   * or loading a pre-existing spritesheet.\n   *\n   * @remarks the grid needs to be redrawn as well, since if a sprite is\n   * deleted, then the old box and number would still be there. So it's\n   * necessary to clear the canvas.\n   *\n   * @param canvas the canvas to redraw the tile grid to\n   * @param sprites the list of sprites to draw the boxes and numbers of\n   * @param tileDimensions the dimensions of the spritesheet and canvas, in tiles\n   */\n  redrawCanvas(\n    canvas: HTMLCanvasElement,\n    sprites: Sprite[],\n    tileDimensions: Dimensions\n  ) {\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    this.drawTilesOnCanvas(canvas, tileDimensions);\n    sprites.map((s, i) =>\n      this.addSpriteBoxToCanvas(s.position, s.dimensions, i, canvas)\n    );\n  },\n\n  /**\n   * Draws a bounding box around a sprite depending on its position and\n   * dimensions, and also draws a number in the corner of the box as an\n   * identifier.\n   * @param spritePos position of the sprite, in tiles\n   * @param spriteDim dimensions of the sprite, in pixels\n   * @param spriteNum the number to be drawn in the corner of the sprite box\n   * @param canvas the canvas to draw the sprite box on\n   */\n  addSpriteBoxToCanvas(\n    spritePos: ImageCoordinates,\n    spriteDim: Dimensions,\n    spriteNum: number,\n    canvas: HTMLCanvasElement\n  ) {\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    const ratio = TILEGRID_RATIO * TILE_SIZE.height;\n    ctx.strokeStyle = \"yellow\";\n    ctx.strokeRect(\n      spritePos.x * ratio,\n      spritePos.y * ratio,\n      spriteDim.width * TILEGRID_RATIO,\n      spriteDim.height * TILEGRID_RATIO\n    );\n    ctx.fillStyle = \"white\";\n    ctx.font = \"12px monospace\";\n    ctx.fillText(\n      spriteNum.toString(),\n      spritePos.x * ratio + 2,\n      spritePos.y * ratio + 12\n    );\n  },\n};\n\n/**\n * Translates coordinates from spritesheet space to the context of a sprite\n * @param ssc coordinates on the spritesheet to translate, in pixels\n * @param ssd the size of the spritesheet, in pixels\n * @param stp the position of the sprite on the spritesheet, in tiles\n * @param spd the size of the sprite, in pixels\n * @returns coordinates of the pixel in terms of a sprite at the given position\n */\nexport function spritesheetCoordsToSpriteCoords(\n  ssc: ImageCoordinates,\n  ssd: Dimensions,\n  stp: ImageCoordinates,\n  spd: Dimensions\n): ImageCoordinates {\n  const spp: ImageCoordinates = {\n    x: stp.x * TILE_SIZE.width,\n    y: stp.y * TILE_SIZE.height,\n  };\n  // console.log(\"in:\", ssc, ssd, spp, spd);\n\n  if (ssc.y >= ssd.height || ssc.x >= ssd.width) {\n    console.warn(\"Trying to translate spritesheet coordinates out of range!\");\n  }\n\n  const pixelPos: ImageCoordinates = {\n    x: ssc.x - spp.x,\n    y: ssc.y - spp.y,\n  };\n\n  if (pixelPos.x >= spd.width || pixelPos.y >= spd.height) {\n    console.warn(\"Translated sprite coordinates out of sprite range!\");\n  }\n\n  // console.log(\"out\", pixelPos);\n\n  return pixelPos;\n}\n","import Palette from \"../models/Palette\";\nimport Color from \"../models/Color\";\n\nexport const DEFAULT_PALETTE: Palette = [\n  new Color(0, 0, 0, 1),\n  new Color(128, 0, 0, 1),\n  new Color(0, 128, 0, 1),\n  new Color(128, 128, 0, 1),\n  new Color(0, 0, 128, 1),\n  new Color(128, 0, 128, 1),\n  new Color(0, 128, 128, 1),\n  new Color(192, 192, 192, 1),\n  new Color(128, 128, 128, 1),\n  new Color(248, 0, 0, 1),\n  new Color(0, 248, 0, 1),\n  new Color(248, 248, 0, 1),\n  new Color(0, 0, 248, 1),\n  new Color(248, 0, 248, 1),\n  new Color(0, 248, 248, 1),\n  new Color(248, 248, 248, 1),\n  new Color(32, 0, 0, 1),\n  new Color(63, 0, 0, 1),\n  new Color(95, 0, 0, 1),\n  new Color(127, 0, 0, 1),\n  new Color(159, 0, 0, 1),\n  new Color(191, 0, 0, 1),\n  new Color(223, 0, 0, 1),\n  new Color(255, 0, 0, 1),\n  new Color(0, 32, 0, 1),\n  new Color(0, 63, 0, 1),\n  new Color(0, 95, 0, 1),\n  new Color(0, 127, 0, 1),\n  new Color(0, 159, 0, 1),\n  new Color(0, 191, 0, 1),\n  new Color(0, 223, 0, 1),\n  new Color(0, 255, 0, 1),\n  new Color(32, 32, 0, 1),\n  new Color(63, 63, 0, 1),\n  new Color(95, 95, 0, 1),\n  new Color(127, 127, 0, 1),\n  new Color(159, 159, 0, 1),\n  new Color(191, 191, 0, 1),\n  new Color(223, 223, 0, 1),\n  new Color(255, 255, 0, 1),\n  new Color(0, 0, 32, 1),\n  new Color(0, 0, 63, 1),\n  new Color(0, 0, 95, 1),\n  new Color(0, 0, 127, 1),\n  new Color(0, 0, 159, 1),\n  new Color(0, 0, 191, 1),\n  new Color(0, 0, 223, 1),\n  new Color(0, 0, 255, 1),\n  new Color(32, 0, 32, 1),\n  new Color(63, 0, 63, 1),\n  new Color(95, 0, 95, 1),\n  new Color(127, 0, 127, 1),\n  new Color(159, 0, 159, 1),\n  new Color(191, 0, 191, 1),\n  new Color(223, 0, 223, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 32, 32, 1),\n  new Color(0, 63, 63, 1),\n  new Color(0, 95, 95, 1),\n  new Color(0, 127, 127, 1),\n  new Color(0, 159, 159, 1),\n  new Color(0, 191, 191, 1),\n  new Color(0, 223, 223, 1),\n  new Color(0, 255, 255, 1),\n  new Color(16, 16, 16, 1),\n  new Color(31, 31, 31, 1),\n  new Color(47, 47, 47, 1),\n  new Color(63, 63, 63, 1),\n  new Color(79, 79, 79, 1),\n  new Color(95, 95, 95, 1),\n  new Color(111, 111, 111, 1),\n  new Color(127, 127, 127, 1),\n  new Color(143, 143, 143, 1),\n  new Color(159, 159, 159, 1),\n  new Color(175, 175, 175, 1),\n  new Color(191, 191, 191, 1),\n  new Color(207, 207, 207, 1),\n  new Color(223, 223, 223, 1),\n  new Color(239, 239, 239, 1),\n  new Color(255, 255, 255, 1),\n  new Color(255, 0, 0, 1),\n  new Color(255, 31, 0, 1),\n  new Color(255, 63, 0, 1),\n  new Color(255, 95, 0, 1),\n  new Color(255, 127, 0, 1),\n  new Color(255, 159, 0, 1),\n  new Color(255, 191, 0, 1),\n  new Color(255, 223, 0, 1),\n  new Color(255, 255, 0, 1),\n  new Color(224, 255, 0, 1),\n  new Color(192, 255, 0, 1),\n  new Color(160, 255, 0, 1),\n  new Color(128, 255, 0, 1),\n  new Color(96, 255, 0, 1),\n  new Color(64, 255, 0, 1),\n  new Color(32, 255, 0, 1),\n  new Color(0, 255, 0, 1),\n  new Color(0, 255, 31, 1),\n  new Color(0, 255, 63, 1),\n  new Color(0, 255, 95, 1),\n  new Color(0, 255, 127, 1),\n  new Color(0, 255, 159, 1),\n  new Color(0, 255, 191, 1),\n  new Color(0, 255, 223, 1),\n  new Color(0, 255, 255, 1),\n  new Color(0, 224, 255, 1),\n  new Color(0, 192, 255, 1),\n  new Color(0, 160, 255, 1),\n  new Color(0, 128, 255, 1),\n  new Color(0, 96, 255, 1),\n  new Color(0, 64, 255, 1),\n  new Color(0, 32, 255, 1),\n  new Color(0, 0, 255, 1),\n  new Color(31, 0, 255, 1),\n  new Color(63, 0, 255, 1),\n  new Color(95, 0, 255, 1),\n  new Color(127, 0, 255, 1),\n  new Color(159, 0, 255, 1),\n  new Color(191, 0, 255, 1),\n  new Color(223, 0, 255, 1),\n  new Color(255, 0, 255, 1),\n  new Color(255, 0, 224, 1),\n  new Color(255, 0, 192, 1),\n  new Color(255, 0, 160, 1),\n  new Color(255, 0, 128, 1),\n  new Color(255, 0, 96, 1),\n  new Color(255, 0, 64, 1),\n  new Color(255, 0, 32, 1),\n  new Color(255, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(8, 8, 8, 1),\n  new Color(16, 16, 16, 1),\n  new Color(24, 24, 24, 1),\n  new Color(32, 32, 32, 1),\n  new Color(41, 41, 41, 1),\n  new Color(49, 49, 49, 1),\n  new Color(57, 57, 57, 1),\n  new Color(65, 65, 65, 1),\n  new Color(74, 74, 74, 1),\n  new Color(82, 82, 82, 1),\n  new Color(90, 90, 90, 1),\n  new Color(98, 98, 98, 1),\n  new Color(106, 106, 106, 1),\n  new Color(115, 115, 115, 1),\n  new Color(123, 123, 123, 1),\n  new Color(131, 131, 131, 1),\n  new Color(139, 139, 139, 1),\n  new Color(148, 148, 148, 1),\n  new Color(156, 156, 156, 1),\n  new Color(164, 164, 164, 1),\n  new Color(172, 172, 172, 1),\n  new Color(180, 180, 180, 1),\n  new Color(189, 189, 189, 1),\n  new Color(197, 197, 197, 1),\n  new Color(205, 205, 205, 1),\n  new Color(213, 213, 213, 1),\n  new Color(222, 222, 222, 1),\n  new Color(230, 230, 230, 1),\n  new Color(238, 238, 238, 1),\n  new Color(246, 246, 246, 1),\n  new Color(255, 255, 255, 1)\n];\n\nexport const SPRITESHEET_PALETTE = [\n  new Color(255, 0, 255, 1),\n  new Color(128, 0, 0, 1),\n  new Color(255, 0, 0, 1),\n  new Color(128, 0, 128, 1),\n  new Color(0, 128, 0, 1),\n  new Color(0, 255, 0, 1),\n  new Color(128, 128, 0, 1),\n  new Color(255, 255, 0, 1),\n  new Color(255, 128, 0, 1),\n  new Color(0, 0, 128, 1),\n  new Color(0, 0, 255, 1),\n  new Color(0, 128, 128, 1),\n  new Color(0, 255, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(192, 192, 192, 1),\n  new Color(255, 255, 255, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(255, 0, 255, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n  new Color(0, 0, 0, 1),\n];\n\n// export default DEFAULT_PALETTE;\n","import Bitmap from \"../models/Bitmap\";\r\nimport Bitmap4 from \"../models/Bitmap4\";\r\nimport Color from \"../models/Color\";\r\nimport Palette from \"../models/Palette\";\r\n\r\nconst BLACK: Color = new Color(0, 0, 0, 1);\r\n\r\nexport function quantize(\r\n  image: Bitmap,\r\n  depth: number\r\n): { sprite: Bitmap4; palette: Palette } {\r\n\r\n  let centroids: number[][];\r\n  let imageArr = imageToArr(image);\r\n  let colors = depth;\r\n  const MaxPalSize = 256;\r\n\r\n  //start by checking that there are at least 'depth' unique colors in image\r\n  // console.log(\"find colors\")\r\n  let uniqueColors = [];\r\n  let uniqueColorsString: String[] = [];\r\n  for (let i = 0; i < imageArr.length; i++) {\r\n    let check = imageArr[i];\r\n    if (!uniqueColorsString.includes(JSON.stringify(check))) {\r\n      uniqueColors.push(check);\r\n      uniqueColorsString.push(JSON.stringify(check));\r\n    }\r\n  }\r\n\r\n  //pick unique colors for centroids using binary search to find points with\r\n  //largest average distance\r\n  if (colors === 1 || uniqueColors.length < colors) {\r\n    centroids = uniqueColors;\r\n    colors = uniqueColors.length;\r\n  } else {\r\n    let { pickedCentroids } = findCentroids(uniqueColors, colors);\r\n    // console.log(pickedCentroids)\r\n    centroids = JSON.parse(JSON.stringify(pickedCentroids));\r\n  }\r\n\r\n  // use K-means to fit all colors in image to 'colors' clusters\r\n  let { groups, centers } = kmeans(\r\n    JSON.parse(JSON.stringify(imageArr)),\r\n    JSON.parse(JSON.stringify(centroids)),\r\n    colors\r\n  );\r\n\r\n  // console.log(\"kmeans output:\")\r\n  // console.log(groups[0][0]);\r\n  // console.log(centers);\r\n\r\n  let clusters: number[][][] = [];\r\n  //group centers and points in cluster for sorting\r\n  for (let i = 0; i < centers.length; i++) {\r\n    let newCluster: number[][] = [[], []];\r\n    newCluster[0] = centers[i];\r\n    for (var j = 0; j < groups[i].length; j++) {\r\n      newCluster[j + 1] = groups[i][j];\r\n    }\r\n    clusters.push(newCluster);\r\n  }\r\n  // sort clusters from largest to smallest\r\n  clusters.sort(function (a, b) {\r\n    return b.length - a.length;\r\n  });\r\n\r\n  console.log(clusters);\r\n\r\n  let spriteIndexArrayLength = image.dimensions.height * image.dimensions.width;\r\n\r\n  // generate out sprite and palette based on k-means clusters\r\n  let spriteIndexArray: number[] = new Array<number>(spriteIndexArrayLength);\r\n  spriteIndexArray.fill(0);\r\n\r\n  let palette: Color[] = new Array(256);\r\n\r\n  //clusters: [center[r,g,b]], [point 1[r,g,b]], ...]\r\n  let i = 0;\r\n  for (i; i < clusters.length && i < MaxPalSize; i++) {\r\n    let center: Color = new Color(\r\n      clusters[i][0][0],\r\n      clusters[i][0][1],\r\n      clusters[i][0][2],\r\n      1\r\n    );\r\n    palette[i] = center;\r\n    for (let j = 1; j < clusters[i].length; j++) {\r\n      let imageIndex = getColorIndex(imageArr, clusters[i][j]);\r\n      // console.log(imageIndex);\r\n      if (imageIndex !== -1) {\r\n        spriteIndexArray[imageIndex] = i;\r\n      }\r\n    }\r\n  }\r\n  // console.log(paletteColorArray)\r\n  for (i; i < MaxPalSize; i++) {\r\n    palette[i] = BLACK;\r\n  }\r\n\r\n  let sprite = new Bitmap4(\r\n    image.fileName,\r\n    palette,\r\n    image.dimensions,\r\n    spriteIndexArray\r\n  );\r\n  return { sprite, palette };\r\n}\r\n\r\n/**\r\n * Used to find the index of colors for building Palette of\r\n * quantized image\r\n * NOTE: This function destroys imageArr\r\n * @param imageArr The image to quantize as a 2D array\r\n * @param colorArr List of unique colors in the image\r\n */\r\nfunction getColorIndex(imageArr: number[][], colorArr: number[]): number {\r\n  for (let i = 0; i < imageArr.length; i++) {\r\n    if (\r\n      imageArr[i][0] === colorArr[0] &&\r\n      imageArr[i][1] === colorArr[1] &&\r\n      imageArr[i][2] === colorArr[2]\r\n    ) {\r\n      imageArr[i] = [-1, -1, -1];\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * converst image into array of RGB color values\r\n * @param image The image to convert to 2d array\r\n */\r\nfunction imageToArr(image: Bitmap): number[][] {\r\n  let imageArr = [];\r\n  for (let y = 0; y < image.dimensions.height; y++) {\r\n    for (let x = 0; x < image.dimensions.width; x++) {\r\n      let color = image.getPixelColorAt({ x, y });\r\n      imageArr.push([\r\n        Math.round(Math.min(Math.max(color.r, 0), 255)),\r\n        Math.round(Math.min(Math.max(color.g, 0), 255)),\r\n        Math.round(Math.min(Math.max(color.b, 0), 255))\r\n      ]);\r\n    }\r\n  }\r\n  return imageArr;\r\n}\r\n\r\n/**\r\n * Used to find clusters of similar colors for image color quantization\r\n * @param arrayToProcess 2D array of RGB color values for the image to quantize\r\n * @param centroids List of center points for each color cluster\r\n *  2D array of RGB values\r\n * @param clusters 3D array of clusters for color quantization\r\n * Each centroid is associated with a cluster\r\n */\r\nfunction kmeans(\r\n  arrayToProcess: number[][],\r\n  centroids: number[][],\r\n  clusters: number\r\n): { groups: number[][][]; centers: number[][] } {\r\n  let Groups: any[] = [];\r\n  let iterations = 0;\r\n  let tempdistance = 0;\r\n  let oldcentroids: number[][] = JSON.parse(JSON.stringify(centroids));\r\n  let changed = false;\r\n\r\n  do {\r\n    for (let reset = 0; reset < clusters; reset++) {\r\n      Groups[reset] = [];\r\n    }\r\n\r\n    changed = false;\r\n\r\n    changed = false;\r\n\r\n    for (let i = 0; i < arrayToProcess.length; i++) {\r\n      let minDist = -1;\r\n      let minCluster = 0;\r\n\r\n      for (\r\n        let clusterIterate = 0;\r\n        clusterIterate < clusters;\r\n        clusterIterate++\r\n      ) {\r\n        let dist = 0;\r\n\r\n        for (let j = 0; j < arrayToProcess[i].length; j++) {\r\n          dist += Math.pow(\r\n            Math.abs(arrayToProcess[i][j] - centroids[clusterIterate][j]),\r\n            2\r\n          );\r\n        }\r\n        tempdistance = Math.sqrt(dist);\r\n\r\n        if (minDist === -1 || tempdistance <= minDist) {\r\n          minDist = tempdistance;\r\n          minCluster = clusterIterate;\r\n        }\r\n      }\r\n      Groups[minCluster].push(arrayToProcess[i].slice());\r\n    }\r\n\r\n    for (let clusterIterate = 0; clusterIterate < clusters; clusterIterate++) {\r\n      for (let i = 0; i < Groups[clusterIterate].length; i++) {\r\n        for (let j = 0; j < Groups[clusterIterate][i].length; j++) {\r\n          centroids[clusterIterate][j] += Groups[clusterIterate][i][j];\r\n        }\r\n      }\r\n      for (let i = 0; i < centroids[clusterIterate].length; i++) {\r\n        centroids[clusterIterate][i] = Math.round(\r\n          Math.min(\r\n            Math.max(\r\n              centroids[clusterIterate][i] /\r\n              (Groups[clusterIterate].length <= 1\r\n                ? 1\r\n                : Groups[clusterIterate].length),\r\n              0\r\n            ),\r\n            255\r\n          )\r\n        );\r\n\r\n        if (centroids[clusterIterate][i] !== oldcentroids[clusterIterate][i]) {\r\n          changed = true;\r\n          oldcentroids = [];\r\n          oldcentroids = JSON.parse(JSON.stringify(centroids));\r\n        }\r\n      }\r\n    }\r\n    iterations++;\r\n  } while (changed === true && iterations < 1000);\r\n\r\n  console.log(\"kmeans output:\");\r\n  console.log(iterations);\r\n  // console.log(Groups.length);\r\n  // console.log(Groups);\r\n  console.log(\"..........\");\r\n\r\n  // let ret = [Groups, centroids];\r\n  // console.log(ret);\r\n  // return ret;\r\n\r\n  return { groups: Groups, centers: centroids };\r\n}\r\n\r\n/**\r\n * Used to determine if there exists a group of points with a at most \r\n * minDist distance between them\r\n * @param points list of points to search\r\n * @param midDist average distance to check for\r\n * @param numCentroids number of points to find\r\n */\r\nfunction centroidPossible(\r\n  points: number[][],\r\n  midDist: number,\r\n  numCentroids: number\r\n): { possible: boolean; centers: number[][] } {\r\n  let centroids = 1;\r\n  let currColor: number[] = points[0];\r\n  let possible = false;\r\n  let centers: number[][] = [];\r\n\r\n  centers.push(currColor);\r\n\r\n  for (let i = 0; i < points.length; i++) {\r\n    let dist = 0;\r\n\r\n    for (let j = 0; j < points[i].length; j++) {\r\n      dist += Math.pow(Math.abs(points[i][j] - currColor[j]), 2);\r\n    }\r\n    dist = Math.sqrt(dist);\r\n\r\n    if (dist >= midDist) {\r\n      centroids++;\r\n      currColor = points[i];\r\n      centers.push(points[i]);\r\n\r\n      if (centroids >= numCentroids) {\r\n        possible = true;\r\n        return { possible, centers };\r\n      }\r\n    }\r\n  }\r\n  return { possible, centers };\r\n}\r\n\r\n//binary search to find centroids, reutrn list of centroids with\r\n// average largest distance between them\r\n\r\n/**\r\n * Used to find optimal centroids for kmeans\r\n * Uses binary search to find the group of centroids with min average distance\r\n * between them\r\n * @param uniqueColors 2D array of unique RGB color values\r\n * @param depth number of centroids to find\r\n */\r\nfunction findCentroids(\r\n  uniqueColors: number[][],\r\n  depth: number\r\n): { pickedCentroids: number[][] } {\r\n  let maxDist = 442;\r\n  let minDist = 0;\r\n  let midDist = (maxDist + minDist) / 2;\r\n\r\n  let dist = 0;\r\n\r\n  let pickedCentroids: number[][] = [];\r\n\r\n  while (minDist <= maxDist) {\r\n    midDist = (maxDist + minDist) / 2;\r\n    let { possible, centers } = centroidPossible(uniqueColors, midDist, depth);\r\n\r\n    if (!possible) {\r\n      maxDist = midDist - 1;\r\n    } else {\r\n      if (dist < midDist) {\r\n        pickedCentroids = JSON.parse(JSON.stringify(centers));\r\n        dist = midDist;\r\n      }\r\n      minDist = midDist + 1;\r\n    }\r\n  }\r\n  return { pickedCentroids };\r\n}\r\n","import React from \"react\";\n\ninterface ExportButtonProps {\n  startImageExport: () => void;\n  buttonLabel: string;\n}\n\nfunction ExportButton({ startImageExport, buttonLabel }: ExportButtonProps): JSX.Element {\n  const handleClick = () => {\n    startImageExport();\n  };\n\n  return (\n    <button className=\"button export-button\" onClick={handleClick}>\n      {buttonLabel}\n    </button>\n  );\n}\n\nexport default ExportButton;\n","import React, { useRef } from \"react\";\n\ntype ImportFile = File | null;\n\ninterface IProps {\n  buttonLabel: string;\n  onFileInputChange: (\n    element: HTMLInputElement | null,\n    event: React.FormEvent<HTMLInputElement>\n  ) => void;\n}\n\nfunction ImportButton({ onFileInputChange, buttonLabel }: IProps): JSX.Element {\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  return (\n    <>\n      <label>{buttonLabel}\n        <input\n          type=\"file\"\n          accept=\".png, .jpg, .jpeg, .bmp, .pal\"\n          ref={fileInput}\n          onChange={e => onFileInputChange(fileInput.current, e)}\n        />\n      </label>\n    </>\n  );\n}\n\nexport default ImportButton;\n","import React, { useState, PropsWithChildren } from \"react\";\r\n\r\ninterface DropdownProps {\r\n  label: string;\r\n}\r\n\r\nexport default function Dropdown({\r\n  label,\r\n  children\r\n}: PropsWithChildren<DropdownProps>) {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"dd-container\">\r\n      <button onClick={() => setOpen(!open)} className=\"dd-button\">\r\n        {label}\r\n      </button>\r\n      <div\r\n        id=\"myDropdown\"\r\n        className={open ? \"dd-content dd-show\" : \"dd-content\"}\r\n        onClick={() => setOpen(false)}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport Color from \"../models/Color\";\nimport Palette from \"../models/Palette\";\nimport Spritesheet4 from \"../models/Spritesheet4\";\nimport { Tool } from \"../util/consts\";\nimport {\n  EditorSettings,\n  ImageCoordinates,\n  ImageInterface,\n} from \"../util/types\";\nimport { spritesheetCoordsToSpriteCoords } from \"../models/Spritesheet4\";\n\n// The pixel grid will not be visible when the scale is smaller than this value.\nconst PIXELGRID_ZOOM_LIMIT = 8;\nconst TILEGRID_ZOOM_LIMIT = 4;\n\ninterface EditorCanvasProps {\n  image: ImageInterface;\n  palette: Palette;\n  selectedPaletteIndex: number;\n  settings: EditorSettings;\n  scale: number;\n  onChangeImage: (newImage: ImageInterface) => void;\n  onChangeColor: (newColor: Color) => void;\n  onMouseWheel: (e: WheelEvent) => void;\n}\n\nexport default function EditorCanvas({\n  image,\n  palette,\n  selectedPaletteIndex,\n  settings,\n  scale,\n  onChangeImage,\n  onChangeColor,\n  onMouseWheel,\n}: EditorCanvasProps): JSX.Element {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [canvasSize, setCanvasSize] = useState<number[]>([0, 0]);\n\n  ///////////////////// Drawing Tool\n  const [isPainting, setIsPainting] = useState<boolean>(false);\n  const [mousePos, setMousePos] = useState<ImageCoordinates | undefined>(\n    undefined\n  );\n  const [startPos, setStartPos] = useState<ImageCoordinates>({\n    x: 0,\n    y: 0,\n  });\n  const [imagePosition, setImagePosition] = useState<ImageCoordinates>({\n    x: 0,\n    y: 0,\n  });\n  const [endingPos, setEndingPos] = useState<ImageCoordinates | undefined>(\n    undefined\n  );\n  ///////////////////////////////////////////\n\n  const drawImageOnCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext(\"2d\");\n    if (!context) return;\n    if (!image) return;\n\n    // Clear the context\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    // Draw the image at the correct position and scale\n    context.drawImage(\n      image.imageCanvasElement,\n      imagePosition.x,\n      imagePosition.y,\n      image.dimensions.width * scale,\n      image.dimensions.height * scale\n    );\n    // Draw the grid (if we need to)\n    if (settings.grid && scale >= PIXELGRID_ZOOM_LIMIT) {\n      context.drawImage(\n        image.pixelGridCanvasElement,\n        imagePosition.x,\n        imagePosition.y,\n        image.dimensions.width * scale,\n        image.dimensions.height * scale\n      );\n    }\n    // Always draw tile grid on spritesheets\n    // TODO: Add option for this\n    if (\n      settings.grid &&\n      image instanceof Spritesheet4 &&\n      scale >= TILEGRID_ZOOM_LIMIT\n    ) {\n      context.drawImage(\n        (image as Spritesheet4).tileGridCanvasElement,\n        imagePosition.x,\n        imagePosition.y,\n        image.dimensions.width * scale,\n        image.dimensions.height * scale\n      );\n    }\n  }, [image, imagePosition, canvasRef, scale, settings.grid]);\n\n  /**\n   * Handle window resizing and set the new canvasSize state.\n   */\n  useLayoutEffect(() => {\n    const updateCanvasSize = () => {\n      if (canvasRef.current) {\n        setCanvasSize([\n          canvasRef.current.clientWidth,\n          canvasRef.current.clientHeight,\n        ]);\n      }\n    };\n    window.addEventListener(\"resize\", () => updateCanvasSize());\n  }, []);\n\n  /**\n   * Set up the canvas.\n   */\n  useLayoutEffect(() => {\n    console.log(\"Setting up canvas...\");\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext(\"2d\");\n    if (!context) return;\n    setCanvasSize([canvas.clientWidth, canvas.clientHeight]);\n    context.imageSmoothingEnabled = false;\n  }, [canvasRef]);\n\n  /**\n   * Change the dimensions of the canvas when the canvasSize changes.\n   */\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext(\"2d\");\n    if (!context) return;\n\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    canvas.width = canvasSize[0] * devicePixelRatio;\n    canvas.height = canvasSize[1] * devicePixelRatio;\n    context.imageSmoothingEnabled = false;\n  }, [canvasSize, canvasRef]);\n\n  /**\n   * Handle mousewheel zooming\n   */\n  useLayoutEffect(() => {\n    if (canvasRef.current) {\n      canvasRef.current.addEventListener(\"wheel\", onMouseWheel);\n    }\n  }, [onMouseWheel]);\n\n  /**\n   * Draw the image whenever the image, imageCanvas, context, scale, or editor\n   * settings change.\n   */\n  useLayoutEffect(() => drawImageOnCanvas());\n\n  /////////////////////////////////////////////////////////////////////////////\n  // Drawing Tool\n  const getMousePos = (e: MouseEvent): ImageCoordinates | undefined => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n      return {\n        x: (e.clientX - rect.left) * scaleX,\n        y: (e.clientY - rect.top) * scaleY,\n      };\n    }\n    return undefined;\n  };\n\n  const getImageCoord = useCallback(\n    (mousePos: ImageCoordinates): ImageCoordinates | undefined => {\n      const x = Math.floor((mousePos.x - imagePosition.x) / scale);\n      const y = Math.floor((mousePos.y - imagePosition.y) / scale);\n      if (\n        x < 0 ||\n        x > image.dimensions.width ||\n        y < 0 ||\n        y > image.dimensions.height\n      )\n        return undefined;\n      return { x, y };\n    },\n    [scale, imagePosition, image.dimensions]\n  );\n\n  // const atNewPixel = useCallback((newPos: ImageCoordinates): boolean => {\n  //   if (!mousePos) return false;\n  //   const prevImgCoord = getImageCoord(mousePos);\n  //   if (!prevImgCoord) return false;\n  //   const prevPixel = {\n  //     x: imagePosition.x + prevImgCoord.x * scale,\n  //     y: imagePosition.y + prevImgCoord.y * scale\n  //   }\n\n  //   if (prevPixel.x === newPos.x && prevPixel.y === newPos.y) {\n  //     return false;\n  //   }\n  //   return true;\n  // }, [mousePos, getImageCoord, imagePosition, scale]);\n\n  const fillPixel = useCallback(\n    (pos: ImageCoordinates | undefined, color: Color): void => {\n      if (!pos) return;\n      if (!canvasRef.current) return;\n      const context = canvasRef.current.getContext(\"2d\");\n      if (!context) return;\n\n      image.setPixelColor(pos, color);\n      drawImageOnCanvas();\n    },\n    [drawImageOnCanvas, image]\n  );\n\n  const bucketFill = useCallback(\n    (\n      pos: ImageCoordinates | undefined,\n      newColor: Color,\n      topLeft: ImageCoordinates,\n      botRight: ImageCoordinates\n    ): void => {\n      // BFS fill\n      if (!pos) return;\n      const color = image.getPixelColorAt(pos);\n      if (color.isEqual(newColor)) return;\n      image.setPixelColor(pos, newColor);\n      let queue = new Array<ImageCoordinates>(pos);\n      let explored = new Array<ImageCoordinates>(pos);\n      while (queue[0] !== undefined) {\n        let curr = queue.shift() as ImageCoordinates;\n        let edges = new Array<ImageCoordinates>(0);\n        // add edges\n        if (curr.y > topLeft.y) {\n          edges.push({ x: curr.x, y: curr.y - 1 });\n        }\n        if (curr.y < botRight.y - 1) {\n          edges.push({ x: curr.x, y: curr.y + 1 });\n        }\n        if (curr.x > topLeft.x) {\n          edges.push({ x: curr.x - 1, y: curr.y });\n        }\n        if (curr.x < botRight.x - 1) {\n          edges.push({ x: curr.x + 1, y: curr.y });\n        }\n        ///\n        edges\n          .filter((n) => !explored.includes(n))\n          .forEach((n) => {\n            explored.push(n);\n            if (image.getPixelColorAt(n).isEqual(color)) {\n              queue.push(n);\n              image.setPixelColor(n, newColor);\n            }\n          });\n      }\n\n      drawImageOnCanvas();\n    },\n    [image, drawImageOnCanvas]\n  );\n\n  // const rectangle = useCallback((): void => {\n  //   if (!endingPos) return;\n  //   if (!canvasRef.current) return;\n  //   const context = canvasRef.current.getContext('2d');\n  //   if (!context) return;\n  //   // drawImageOnCanvas();\n  //   const color = palette[selectedPaletteIndex];\n  //   const colorString = `rgb(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n  //   context.fillStyle = colorString;\n  //   context.lineWidth = 1;\n  //   context.rect(\n  //     startPos.x, startPos.y,\n  //     endingPos.x - startPos.x, endingPos.y - startPos.y);\n  //   context.fill();\n  // }, [startPos, endingPos, palette, selectedPaletteIndex]);\n\n  const startPaint = useCallback(\n    (e: MouseEvent) => {\n      const mousePosition = getMousePos(e);\n      if (!mousePosition) return;\n      setMousePos(mousePosition);\n      const imageCoord = getImageCoord(mousePosition);\n      if (!imageCoord) return;\n      if (!canvasRef.current) return;\n      const context = canvasRef.current.getContext(\"2d\");\n      if (!context) return;\n      // if (!imageCoord) return;\n      switch (settings.currentTool) {\n        case Tool.PENCIL:\n          setIsPainting(true);\n          fillPixel(imageCoord, palette[selectedPaletteIndex]);\n          break;\n        case Tool.BUCKET:\n          let topLeft = { x: 0, y: 0 };\n          let dims = image.dimensions;\n          let botRight = { x: dims.width, y: dims.height };\n          if (image instanceof Spritesheet4) {\n            const sprite = image.getSpriteFromCoordinates(imageCoord);\n            if (!sprite) return;\n            dims = sprite.dimensions;\n            const spriteCoord = spritesheetCoordsToSpriteCoords(\n              imageCoord,\n              image.dimensions,\n              sprite.position,\n              sprite.dimensions\n            );\n            topLeft = {\n              x: imageCoord.x - spriteCoord.x,\n              y: imageCoord.y - spriteCoord.y,\n            };\n            botRight = {\n              x: topLeft.x + dims.width,\n              y: topLeft.y + dims.height,\n            };\n          }\n          bucketFill(\n            imageCoord,\n            palette[selectedPaletteIndex],\n            topLeft,\n            botRight\n          );\n          break;\n        case Tool.SQUARE:\n          if (!imageCoord) return;\n          const startingPos = imageCoord;\n          setStartPos(startingPos);\n          setIsPainting(true);\n          break;\n        case Tool.ELLIPSE:\n          if (!imageCoord) return;\n          setStartPos(imageCoord);\n          setIsPainting(true);\n          break;\n        case Tool.PAN:\n          setIsPainting(true);\n          break;\n        case Tool.DROPPER:\n          if (!imageCoord) return;\n          const color = image.getPixelColorAt(imageCoord);\n          onChangeColor(color);\n          break;\n      }\n    },\n    [\n      image,\n      onChangeColor,\n      settings.currentTool,\n      bucketFill,\n      fillPixel,\n      getImageCoord,\n      palette,\n      selectedPaletteIndex,\n    ]\n  );\n\n  const paint = useCallback(\n    (e: MouseEvent) => {\n      const newMousePos = getMousePos(e);\n      if (!newMousePos) return;\n      const imageCoord = getImageCoord(newMousePos);\n      switch (settings.currentTool) {\n        case Tool.PENCIL:\n          if (isPainting) {\n            fillPixel(imageCoord, palette[selectedPaletteIndex]);\n            setMousePos(newMousePos);\n          }\n          break;\n        case Tool.SQUARE:\n          if (isPainting) {\n            if (!imageCoord) return;\n            const endingPos = imageCoord;\n            setEndingPos(endingPos);\n          }\n          break;\n        case Tool.ELLIPSE:\n          if (isPainting) {\n            if (!imageCoord) return;\n            const endingPos = imageCoord;\n            setEndingPos(endingPos);\n          }\n          break;\n        case Tool.PAN:\n          if (isPainting && mousePos) {\n            const newImagePosition = {\n              x: imagePosition.x + (newMousePos.x - mousePos.x),\n              y: imagePosition.y + (newMousePos.y - mousePos.y),\n            };\n            setImagePosition(newImagePosition);\n            setMousePos(newMousePos);\n          }\n          break;\n      }\n    },\n    [\n      isPainting,\n      fillPixel,\n      getImageCoord,\n      palette,\n      selectedPaletteIndex,\n      imagePosition,\n      mousePos,\n      settings.currentTool,\n    ]\n  );\n\n  const stopPaint = useCallback(() => {\n    setMousePos(undefined);\n    setIsPainting(false);\n    if (settings.currentTool === Tool.SQUARE) {\n      if (!endingPos) return;\n      let s = startPos;\n      let e = endingPos;\n      if (e.x < s.x) {\n        let temp = s.x;\n        s = { x: e.x, y: s.y };\n        e = { x: temp, y: e.y };\n      }\n      if (e.y < s.y) {\n        let temp = s.y;\n        s = { x: s.x, y: e.y };\n        e = { x: e.x, y: temp };\n      }\n      for (let i = s.y; i <= e.y; i++) {\n        for (let j = s.x; j <= e.x; j++) {\n          let pos: ImageCoordinates = { x: j, y: i };\n          image.setPixelColor(pos, palette[selectedPaletteIndex]);\n        }\n      }\n      drawImageOnCanvas();\n    }\n\n    if (settings.currentTool === Tool.ELLIPSE) {\n      console.log(\"drawing ellipse\");\n      if (!endingPos) return;\n      let s = startPos;\n      let e = endingPos;\n      if (e.x < s.x) {\n        let temp = s.x;\n        s = { x: e.x, y: s.y };\n        e = { x: temp, y: e.y };\n      }\n      if (e.y < s.y) {\n        let temp = s.y;\n        s = { x: s.x, y: e.y };\n        e = { x: e.x, y: temp };\n      }\n      let center = {\n        x: (s.x + e.x) / 2,\n        y: (s.y + e.y) / 2,\n      };\n      // let center = startPos;\n      let a = Math.abs(e.x - center.x);\n      let b = Math.abs(e.y - center.y);\n      // let s = { x: center.x - a, y: center.y - b };\n      // let e = { x: center.x + a, y: center.y + b };\n      for (let i = s.y; i <= e.y; i++) {\n        for (let j = s.x; j <= e.x; j++) {\n          let point = { x: j, y: i };\n          console.log(point);\n          // solve for equation of ellipse to check if inside or on ellipse\n          let l = Math.pow(point.x - center.x, 2) / Math.pow(a, 2);\n          let r = Math.pow(point.y - center.y, 2) / Math.pow(b, 2);\n          console.log(l + r);\n          let isInside: boolean = l + r <= 1;\n          if (isInside) {\n            image.setPixelColor(point, palette[selectedPaletteIndex]);\n          }\n        }\n      }\n      drawImageOnCanvas();\n    }\n    setEndingPos(undefined);\n    onChangeImage(image);\n  }, [\n    settings.currentTool,\n    startPos,\n    endingPos,\n    drawImageOnCanvas,\n    image,\n    palette,\n    selectedPaletteIndex,\n    onChangeImage,\n  ]);\n\n  const mouseLeave = useCallback(() => {\n    setMousePos(undefined);\n    setIsPainting(false);\n  }, []);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"mousedown\", startPaint);\n    return () => canvas.removeEventListener(\"mousedown\", startPaint);\n  }, [startPaint]);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"mousemove\", paint);\n    return () => {\n      canvas.removeEventListener(\"mousemove\", paint);\n    };\n  }, [paint]);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"mouseup\", stopPaint);\n    canvas.addEventListener(\"mouseleave\", mouseLeave);\n    return () => {\n      canvas.removeEventListener(\"mouseup\", stopPaint);\n      canvas.removeEventListener(\"mouseleave\", mouseLeave);\n    };\n  }, [stopPaint, mouseLeave]);\n\n  /////////////////////////////////////////////////////////////////////////////\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={generateEditorCanvasProps(settings.currentTool)}\n    />\n  );\n}\n\nconst generateEditorCanvasProps = (tool: Tool): string => {\n  const base = \"image-canvas \";\n  switch (tool) {\n    case Tool.PENCIL:\n      return base + \"pencil\";\n    case Tool.BUCKET:\n      return base + \"bucket\";\n    case Tool.SQUARE:\n      return base + \"square\";\n    case Tool.ELLIPSE:\n      return base + \"ellipse\";\n    case Tool.PAN:\n      return base + \"pan\";\n    case Tool.DROPPER:\n      return base + \"dropper\";\n  }\n  return base;\n};\n","import { useState } from \"react\";\n\nconst useModal = () => {\n  const [isShowing, setIsShowing] = useState(false);\n  const toggle = () => setIsShowing(!isShowing);\n  return { isShowing, toggle };\n};\n\nexport default useModal;\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ImportButton from \"../buttons/ImportButton\";\r\nimport Palette from \"../../models/Palette\";\r\nimport { DEFAULT_PALETTE } from \"../../util/defaultPalette\";\r\nimport { loadNewPalette } from \"../../util/fileLoadUtils\";\r\n\r\ninterface ImportPaletteModalProps {\r\n  onAccept: (pal: Palette, oldStartRow: number, newStartRow: number, numRows: number) => void;\r\n  isShowing: boolean;\r\n  hide: () => void;\r\n  oldPal: Palette;\r\n}\r\n\r\ninterface ImportPaletteFormProps {\r\n  onAccept: (pal: Palette, oldStartRow: number, newStartRow: number, numRows: number) => void;\r\n  oldPal: Palette;\r\n}\r\n\r\nconst ImportPaletteModal = ({ onAccept, isShowing, hide, oldPal }: ImportPaletteModalProps) =>\r\n  isShowing\r\n    ? ReactDOM.createPortal(\r\n        <React.Fragment>\r\n          <div className=\"modal-overlay\" />\r\n          <div\r\n            className=\"modal-wrapper\"\r\n            aria-modal\r\n            aria-hidden\r\n            tabIndex={-1}\r\n            role=\"dialog\"\r\n          >\r\n            <div className=\"import-pal-modal\">\r\n              <div className=\"modal-header\">Import A Color Palette</div>\r\n              <ImportPaletteForm\r\n                onAccept={(pal, oldStartRow, newStartRow, numRows) => {\r\n                  onAccept(pal, oldStartRow, newStartRow, numRows);\r\n                  hide();\r\n                }}\r\n                oldPal={oldPal}\r\n              ></ImportPaletteForm>\r\n              <div className=\"modal-import-right\">\r\n                <button onClick={hide} className=\"modal-button-import\">Cancel</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>,\r\n        document.body\r\n      )\r\n    : null;\r\n\r\nconst ImportPaletteForm = ({ onAccept, oldPal }: ImportPaletteFormProps) => {\r\n  const [pal, setPal] = useState<Palette>(DEFAULT_PALETTE);\r\n  const [oldStartRow, setOldStartRow] = useState<number>(0);\r\n  const [newStartRow, setNewStartRow] = useState<number>(0);\r\n  const [numRows, setNumRows] = useState<number>(16);\r\n\r\n  const handleFileInputChange = (\r\n    element: HTMLInputElement | null,\r\n    event: React.FormEvent<HTMLInputElement>\r\n  ): void => {\r\n    event.preventDefault();\r\n    if (!element || !element.files) return;\r\n    handlePaletteLoad(element.files[0]);\r\n  };\r\n\r\n  const handlePaletteLoad = async (palFile: File | null) => {\r\n    if (palFile) {\r\n      console.log(\"Loading palette from file...\");\r\n      let newPalette = await loadNewPalette(palFile);\r\n      if (newPalette) {\r\n        setPal(newPalette);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  const handleOldStartRowChange = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n    setOldStartRow(parseInt(e.target.value));\r\n\r\n  const handleNewStartRowChange = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n    setNewStartRow(parseInt(e.target.value));\r\n  \r\n  const handleNumRowsChange = (e: React.ChangeEvent<HTMLInputElement>) =>\r\n    setNumRows(parseInt(e.target.value));\r\n\r\n  /**\r\n   * On submit, we combine the palettes and pass back the updated palette\r\n   */\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    combinePals(oldPal, pal, oldStartRow, newStartRow, numRows);\r\n    onAccept(oldPal, oldStartRow, newStartRow, numRows);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"modal-input-container\">\r\n        {/* <label className=\"modal-label\">Palette:</label> */}\r\n        <div className=\"import-file-button\">\r\n        <ImportButton\r\n          onFileInputChange={handleFileInputChange}\r\n          buttonLabel=\"Choose File\"\r\n        />\r\n        </div>\r\n        (*.pal)\r\n      </div>\r\n      <br />\r\n      <label className=\"modal-label\"> Properties: </label>\r\n      <br />\r\n      <div className=\"modal-prop-container\">\r\n        <label htmlFor=\"currStartRow\" className=\"modal-label-input\">Current Palette Starting Row:</label>\r\n        <input\r\n          id=\"currStartRow\"\r\n          type=\"number\"\r\n          min={0}\r\n          max={16}\r\n          value={oldStartRow}\r\n          onChange={handleOldStartRowChange}\r\n          className=\"modal-input\"\r\n        />\r\n        <br />\r\n        <label htmlFor=\"importStartRow\" className=\"modal-label-input\">Imported Palette Starting Row:</label>\r\n        <input\r\n          id=\"importStartRow\"\r\n          type=\"number\"\r\n          min={0}\r\n          max={16}\r\n          value={newStartRow}\r\n          onChange={handleNewStartRowChange}\r\n          className=\"modal-input\"\r\n        />\r\n        <br />\r\n        <label htmlFor=\"numRows\" className=\"modal-label-input\">Number of Rows:</label>\r\n        <input\r\n          id=\"numRows\"\r\n          type=\"number\"\r\n          min={0}\r\n          max={16}          \r\n          value={numRows}\r\n          onChange={handleNumRowsChange}\r\n          className=\"modal-input\"\r\n        />\r\n      </div>\r\n      <br />\r\n      <div className=\"modal-import-left\">\r\n        <button className=\"modal-button-import\">OK</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n/**\r\n * Function for combining two palettes\r\n * @param oldPal old Palette\r\n * @param newPal new Palette\r\n * @param oldStartRow start row of old Palette\r\n * @param newStartRow start row of new Palette\r\n * @param numRows number of rows to replace\r\n * This function overwrites a given number of rows on \r\n * the old Palette with rows from the new Palette\r\n */\r\nconst combinePals = (\r\n  oldPal: Palette, \r\n  newPal: Palette, \r\n  oldStartRow: number,\r\n  newStartRow: number, \r\n  numRows: number\r\n): void => {\r\n   for(let i = 0; i < numRows * 16; i++) {\r\n      oldPal[i + oldStartRow * 16] = newPal[i + newStartRow * 16];\r\n   }\r\n}\r\n\r\nexport default ImportPaletteModal;\r\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Dimensions } from \"../../util/types\";\n\nconst MIN_IMG_SIZE = 1;\n\ninterface NewImageModalProps {\n  onAccept: (fileName: string, dimensions: Dimensions) => void;\n  isShowing: boolean;\n  hide: () => void;\n}\n\ninterface NewImageFormProps {\n  onAccept: (fileName: string, dimensions: Dimensions) => void;\n}\n\nconst NewImageModal = ({ onAccept, isShowing, hide }: NewImageModalProps) =>\n  isShowing\n    ? ReactDOM.createPortal(\n        <React.Fragment>\n          <div className=\"modal-overlay\" />\n          <div\n            className=\"modal-wrapper\"\n            aria-modal\n            aria-hidden\n            tabIndex={-1}\n            role=\"dialog\"\n          >\n            <div className=\"modal\">\n              <div className=\"modal-header\">Create a New Image</div>\n              <NewImageForm\n                onAccept={(fileName, dimensions) => {\n                  onAccept(fileName, dimensions);\n                  hide();\n                }}\n              ></NewImageForm>\n              <div className=\"modal-button-right\">\n                <button onClick={hide} className=\"modal-button\">\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </div>\n        </React.Fragment>,\n        document.body\n      )\n    : null;\n\nconst NewImageForm = ({ onAccept }: NewImageFormProps) => {\n  const [fileName, setFileName] = useState<string>(\"untitled\");\n  const [height, setHeight] = useState<number>(32);\n  const [width, setWidth] = useState<number>(32);\n\n  const handleFileNameChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setFileName(e.target.value);\n\n  const handleHeightChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setHeight(parseInt(e.target.value));\n\n  const handleWidthChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setWidth(parseInt(e.target.value));\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onAccept(fileName, { height, width });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"modal-input-text\">\n        <label htmlFor=\"filename\" className=\"modal-label\">\n          Name:\n        </label>\n        <input\n          id=\"filename\"\n          name=\"filename\"\n          type=\"text\"\n          value={fileName}\n          onChange={handleFileNameChange}\n        />\n      </div>\n      <br />\n      <label className=\"modal-label\">Image Size</label>\n      <div className=\"modal-input-num\">\n        <label htmlFor=\"height\" className=\"modal-label-num\">\n          Height:\n        </label>\n        <input\n          id=\"height\"\n          type=\"number\"\n          min={MIN_IMG_SIZE}\n          value={height}\n          onChange={handleHeightChange}\n        />\n        <label>&nbsp;px</label>\n        <br />\n        <label htmlFor=\"width\" className=\"modal-label-num\">\n          Width:\n        </label>\n        <input\n          id=\"width\"\n          type=\"number\"\n          min={MIN_IMG_SIZE}\n          value={width}\n          onChange={handleWidthChange}\n        />\n        <label>&nbsp;px</label>\n      </div>\n      <br />\n      <div className=\"modal-button-left\">\n        <button className=\"modal-button\">OK</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewImageModal;\n","import React, { useState } from \"react\";\n\nconst MIN_QUANTIZE = 1;\nconst MAX_QUANTIZE = 256;\n\ninterface ExportButtonProps {\n  handleQuantize: (newColorDepth: number) => void;\n}\n\nfunction ExportButton({ handleQuantize }: ExportButtonProps): JSX.Element {\n  const [depth, setDepth] = useState<number>(15);\n\n  const handleClick = () => {\n    if (!depth) {\n      alert(\"Can't quantize with unspecified color depth!\");\n      return;\n    }\n    handleQuantize(depth);\n  };\n\n  return (\n    <div className=\"quantize-container\">\n      <button className=\"quantize-button\" onClick={handleClick}>\n        Quantize\n      </button>\n      <input\n        className=\"quantize-input\"\n        type=\"number\"\n        value={depth}\n        min={MIN_QUANTIZE}\n        max={MAX_QUANTIZE}\n        onChange={e => setDepth(parseInt(e.target.value))}\n      ></input>\n    </div>\n  );\n}\n\nexport default ExportButton;\n","import React, { useRef, useEffect, useCallback, useState } from \"react\";\nimport Palette, * as PaletteUtils from \"../models/Palette\";\nimport { PixelGrid } from \"../models/ImageCanvas\";\n\ninterface IPaletteDisplay {\n  palette: Palette;\n  selectedColorIndex: number;\n  onChangeSelectedColorIndex: (newIndex: number) => void;\n}\n\ninterface MousePos {\n  x: number;\n  y: number;\n}\n\n// This size is defined the same in app.scss\nconst PALETTE_CANVAS_SIZE = {\n  height: 192,\n  width: 192\n};\n\nconst SCALE = PALETTE_CANVAS_SIZE.height / 16;\n\nconst INDEX_TO_X = (index: number) => index % 16;\nconst INDEX_TO_Y = (index: number) => Math.floor(index / 16);\nconst XY_TO_INDEX = ({ x, y }: { x: number; y: number }) => y * 16 + x;\nconst MOUSE_POS_TO_XY = ({ x, y }: { x: number; y: number }) => ({\n  x: Math.floor(x / SCALE),\n  y: Math.floor(y / SCALE)\n});\nconst MOUSE_POS_TO_INDEX = (pos: { x: number; y: number }) =>\n  XY_TO_INDEX(MOUSE_POS_TO_XY(pos));\n\nfunction PaletteDisplay({\n  palette,\n  selectedColorIndex,\n  onChangeSelectedColorIndex\n}: IPaletteDisplay): JSX.Element {\n  const [paletteHiddenCanvas, setPaletteHiddenCanvas] = useState<\n    HTMLCanvasElement\n  >();\n  const [pixelGrid, setPixelGrid] = useState<PixelGrid>();\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  /**\n   * method to draw the palette grid\n   */\n  const drawGrid = useCallback(() => {\n    if (!canvasRef.current || !pixelGrid) return;\n    const context = canvasRef.current.getContext(\"2d\");\n    if (!context) return;\n    context.drawImage(\n      pixelGrid.canvasElement,\n      0,\n      0,\n      PALETTE_CANVAS_SIZE.width * window.devicePixelRatio,\n      PALETTE_CANVAS_SIZE.height * window.devicePixelRatio\n    );\n  }, [pixelGrid]);\n\n  /**\n   * method to populate the palette with colors\n   * fills palette index with proper color using palette colorArray\n   */\n  const drawPalette = useCallback(() => {\n    if (!canvasRef.current || !paletteHiddenCanvas) return;\n    const context = canvasRef.current.getContext(\"2d\");\n    if (!context) return;\n    PaletteUtils.drawPaletteToHiddenCanvas(palette, paletteHiddenCanvas);\n    context.drawImage(\n      paletteHiddenCanvas,\n      0,\n      0,\n      PALETTE_CANVAS_SIZE.width * window.devicePixelRatio,\n      PALETTE_CANVAS_SIZE.height * window.devicePixelRatio\n    );\n  }, [palette, paletteHiddenCanvas]);\n\n  /**\n   * Draws a box around the selected color in the palette view.\n   */\n  const drawSelectedColorHighlight = useCallback(\n    (index: number) => {\n      if (!canvasRef.current) return;\n      let context = canvasRef.current.getContext(\"2d\");\n      if (!context) return;\n      context.beginPath();\n      context.strokeStyle = \"rgba(255, 255, 0, 1)\";\n      context.lineWidth = 2;\n      const ratio = window.devicePixelRatio * SCALE;\n      context.rect(\n        INDEX_TO_X(index) * ratio,\n        INDEX_TO_Y(index) * ratio,\n        ratio,\n        ratio\n      );\n      context.stroke();\n    },\n    [canvasRef]\n  );\n\n  /**\n   * gets mouse position on the palette canvas\n   * @param e MouseEvent\n   */\n  const getMousePos = (e: React.MouseEvent): MousePos => {\n    if (canvasRef.current) {\n      const rect = canvasRef.current.getBoundingClientRect();\n      return {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      };\n    }\n    return {\n      x: -1,\n      y: -1\n    };\n  };\n\n  /**\n   * handles mouse click event\n   * selects the proper row on the palette\n   * @param e MouseEvent\n   */\n  const handleClick = (e: React.MouseEvent): void => {\n    onChangeSelectedColorIndex(MOUSE_POS_TO_INDEX(getMousePos(e)));\n  };\n\n  /**\n   * Set up the canvas\n   */\n  useEffect(() => {\n    console.log(\"Setting up palette canvas\");\n    const setupCanvasSize = (canvas: HTMLCanvasElement) => {\n      const devicePixelRatio = window.devicePixelRatio || 1;\n      canvas.width = canvas.clientWidth * devicePixelRatio;\n      canvas.height = canvas.clientHeight * devicePixelRatio;\n      const context = canvas.getContext(\"2d\");\n      if (context) context.imageSmoothingEnabled = false;\n    };\n    if (canvasRef.current) {\n      setupCanvasSize(canvasRef.current);\n    }\n    const {\n      pixelGrid,\n      hiddenCanvas\n    } = PaletteUtils.PaletteDrawablesGenerator();\n    setPaletteHiddenCanvas(hiddenCanvas);\n    setPixelGrid(pixelGrid);\n  }, []);\n\n  /**\n   * Draw the palette every time something changes\n   */\n  useEffect(() => {\n    drawPalette();\n    drawGrid();\n    drawSelectedColorHighlight(selectedColorIndex);\n  }, [selectedColorIndex, drawPalette, drawGrid, drawSelectedColorHighlight]);\n\n  return (\n    <canvas ref={canvasRef} onClick={handleClick} className=\"palette-canvas\" />\n  );\n}\n\nexport default PaletteDisplay;\n","import React from \"react\";\nimport Color from \"../models/Color\";\nimport Palette from \"../models/Palette\";\nimport { EditorSettings } from \"../util/types\";\nimport QuantizeButton from \"./buttons/QuantizeButton\";\nimport PaletteDisplay from \"./PaletteDisplay\";\n\ninterface PalettePanelProps {\n  palette: Palette;\n  selectedColorIndex: number;\n  updatePalette: (newPalette: Palette) => void;\n  onChangeSelectedColorIndex: (newIndex: number) => void;\n  onChangeColor: (newColor: Color) => void;\n  handleQuantize: (newColorDepth: number) => void;\n  settings: EditorSettings;\n  onSettingsChange: (newSettings: EditorSettings) => void;\n}\n\nexport default function PalettePanel({\n  palette,\n  selectedColorIndex,\n  onChangeSelectedColorIndex,\n  onChangeColor,\n  handleQuantize,\n  settings,\n  onSettingsChange,\n}: PalettePanelProps): JSX.Element {\n  return (\n    <div>\n      <div className=\"panel-header-top\">Palette</div>\n      <div className=\"palette-container\">\n        <PaletteDisplay\n          palette={palette}\n          selectedColorIndex={selectedColorIndex}\n          onChangeSelectedColorIndex={onChangeSelectedColorIndex}\n        />\n      </div>\n      <ColorInput\n        currentColor={palette[selectedColorIndex]}\n        onChangeColor={onChangeColor}\n      ></ColorInput>\n      <QuantizeButton handleQuantize={handleQuantize} />\n      <div className=\"panel-header\">Properties</div>\n      <div className=\"properties-container\">\n        <div>\n          Mode: &nbsp; {settings.imageMode}\n          <br />\n          Type: &nbsp; {settings.editorMode.toString()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst MIN_COLOR_VAL = \"0\";\nconst MAX_COLOR_VAL = \"31\";\n\nconst color256to32 = (color: Color): Color => {\n  const r = Math.ceil((color.r + 1) / 8) - 1;\n  const g = Math.ceil((color.g + 1) / 8) - 1;\n  const b = Math.ceil((color.b + 1) / 8) - 1;\n\n  return new Color(r, g, b, 1);\n};\n\nconst color32to256 = (color: Color): Color => {\n  const r = (color.r + 1) * 8 - 1;\n  const g = (color.g + 1) * 8 - 1;\n  const b = (color.b + 1) * 8 - 1;\n\n  return new Color(r, g, b, 1);\n};\n\ninterface ColorInputProps {\n  currentColor: Color;\n  onChangeColor: (newColor: Color) => void;\n}\n\nfunction ColorInput({\n  currentColor,\n  onChangeColor,\n}: ColorInputProps): JSX.Element {\n  // const [color, setColor] = useState<Color>(Color256to32(currentColor));\n\n  /**\n   * When we select a new color from props, we should update which color is being inspected\n   */\n  // useEffect(() => {\n  //   setColor(Color256to32(currentColor));\n  // }, [currentColor]);\n\n  // useEffect(() => {\n  //   onChangeColor(Color32to256(color));\n  // }, [color, onChangeColor]);\n\n  const color32 = color256to32(currentColor);\n\n  const handleRChange = (newRValue: number) => {\n    color32.r = newRValue;\n    const color256 = color32to256(color32);\n    onChangeColor(color256);\n  };\n\n  const handleGChange = (newGValue: number) => {\n    color32.g = newGValue;\n    const color256 = color32to256(color32);\n    onChangeColor(color256);\n  };\n\n  const handleBChange = (newBValue: number) => {\n    color32.b = newBValue;\n    const color256 = color32to256(color32);\n    onChangeColor(color256);\n  };\n\n  return (\n    <div className=\"rgb-container\">\n      <label className=\"rgb-label\">R</label>\n      <input\n        type=\"number\"\n        max={MAX_COLOR_VAL}\n        min={MIN_COLOR_VAL}\n        value={color32.r}\n        onChange={(e) => handleRChange(parseInt(e.target.value))}\n      ></input>\n      <label className=\"rgb-label\">G</label>\n      <input\n        type=\"number\"\n        max={MAX_COLOR_VAL}\n        min={MIN_COLOR_VAL}\n        value={color32.g}\n        onChange={(e) => handleGChange(parseInt(e.target.value))}\n      ></input>\n      <label className=\"rgb-label\">B</label>\n      <input\n        type=\"number\"\n        max={MAX_COLOR_VAL}\n        min={MIN_COLOR_VAL}\n        value={color32.b}\n        onChange={(e) => handleBChange(parseInt(e.target.value))}\n      ></input>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Sprite from \"../models/Sprite\";\nimport { ImageCoordinates, SpriteDimensions } from \"../util/types\";\n\ninterface SpritePanelProps {\n  onAddSprite: (\n    position: ImageCoordinates,\n    dimensions: SpriteDimensions\n  ) => void;\n  onRemoveSprite: (i: number) => void;\n  onUpdatePaletteRow: () => void;\n  sprites: Sprite[];\n}\n\nexport default function SpritePanel({\n  sprites,\n  onAddSprite,\n  onRemoveSprite,\n  onUpdatePaletteRow,\n}: SpritePanelProps) {\n  const handleChangePaletteRow = (s: Sprite, n: number) => {\n    s.paletteRow = n;\n    onUpdatePaletteRow();\n  };\n  const renderSpriteList = (sprites: Sprite[]) =>\n    sprites.map((s, i) => (\n      <SpriteListItem\n        sprite={s}\n        i={i}\n        onRemoveSprite={onRemoveSprite.bind(null, i)}\n        onChangePaletteRow={handleChangePaletteRow.bind(null, s)}\n      />\n    ));\n\n  return (\n    <div>\n      <div className=\"panel-header\">Sprites</div>\n      <div className=\"spritepanel-container\">\n        <NewSpriteForm onAddSprite={onAddSprite}></NewSpriteForm>\n        <div className=\"sprite-list-container\">\n          {renderSpriteList(sprites)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface SpriteListItemProps {\n  sprite: Sprite;\n  i: number;\n  onRemoveSprite: () => void;\n  onChangePaletteRow: (newPaletteRow: number) => void;\n}\n\nfunction SpriteListItem({\n  sprite,\n  i,\n  onRemoveSprite,\n  onChangePaletteRow,\n}: SpriteListItemProps) {\n  const [paletteRow, setPaletteRow] = useState<number>(sprite.paletteRow);\n  const handleChangePaletteRow = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.value) return;\n    const newRow = parseInt(e.target.value);\n    if (newRow >= 0 && newRow <= 15) {\n      setPaletteRow(newRow);\n      onChangePaletteRow(newRow);\n    }\n  };\n  return (\n    <div className=\"sprite-list-content\">\n      <div key={i}>\n        <div className=\"sprite-list-label\">Sprite #{i}\n          <button onClick={onRemoveSprite} className=\"x-button\">x</button>\n        </div>\n        Position: ({sprite.position.x}, {sprite.position.y})\n        <br /> \n        Dimensions: {sprite.dimensions.height}x{sprite.dimensions.width} px\n        <br />\n        <label>Palette Row: </label>\n        <input\n          className=\"row-num-input\"\n          // type=\"number\"\n          min={0}\n          max={15}\n          value={paletteRow}\n          onChange={handleChangePaletteRow}\n        ></input>\n        <br />\n        {/* <button onClick={onRemoveSprite}>X</button> */}\n      </div>\n    </div>\n  );\n}\n\ninterface NewSpriteFormProps {\n  onAddSprite: (\n    position: ImageCoordinates,\n    dimensions: SpriteDimensions\n  ) => void;\n}\n\nfunction NewSpriteForm({ onAddSprite }: NewSpriteFormProps) {\n  // In terms of PIXELS\n  const [dimensions, setDimensions] = useState<SpriteDimensions>({\n    height: 8,\n    width: 8,\n  });\n  // In terms of TILES\n  const [position, setPosition] = useState<ImageCoordinates>({ x: 0, y: 0 });\n\n  const handleSpriteHeightChange = (\n    e: React.ChangeEvent<HTMLSelectElement>\n  ) => {\n    setDimensions({\n      height: parseInt(e.target.value),\n      width: dimensions.width,\n    } as SpriteDimensions);\n  };\n\n  const handleSpriteWidthChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setDimensions({\n      width: parseInt(e.target.value),\n      height: dimensions.height,\n    } as SpriteDimensions);\n  };\n\n  const handlePosXChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPosition({\n      x: parseInt(e.target.value),\n      y: position.y,\n    });\n  };\n\n  const handlePosYChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPosition({\n      y: parseInt(e.target.value),\n      x: position.x,\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onAddSprite(position, dimensions);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"spritepanel-label\">Dimensions</div>\n      <div className=\"sprite-input-container\">\n        <label htmlFor=\"sprite-height\" className=\"spritepanel-label-dim\">Height:</label>\n        <select\n          className=\"sprite-select\"\n          id=\"sprite-height\"\n          name=\"sprite-height\"\n          value={dimensions.height}\n          onChange={handleSpriteHeightChange}\n        >\n          <option value={8}>8</option>\n          <option value={16}>16</option>\n          <option value={32}>32</option>\n          <option value={64}>64</option>\n        </select>\n        <br />\n        <label htmlFor=\"sprite-width\" className=\"spritepanel-label-dim\">Width:</label>\n        <select\n          className=\"sprite-select\"\n          id=\"sprite-width\"\n          name=\"sprite-width\"\n          value={dimensions.width}\n          onChange={handleSpriteWidthChange}\n        >\n          <option value={8}>8</option>\n          <option value={16}>16</option>\n          <option value={32}>32</option>\n          <option value={64}>64</option>\n        </select>\n      </div>\n      <br />\n      <div className=\"spritepanel-label\">Position</div>\n      <div className=\"sprite-input-container\">\n        <label htmlFor=\"sprite-pos-x\" className=\"spritepanel-label-pos\">X:</label>\n        <input\n          className=\"sprite-input\"\n          id=\"sprite-pos-x\"\n          name=\"sprite-pos-x\"\n          type=\"number\"\n          min={0}\n          max={31}\n          value={position.x}\n          onChange={handlePosXChange}\n        ></input>\n        <label htmlFor=\"sprite-pos-y\" className=\"spritepanel-label-pos\">Y:</label>\n        <input\n          className=\"sprite-input\"\n          id=\"sprite-pos-y\"\n          name=\"sprite-pos-y\"\n          type=\"number\"\n          min={0}\n          max={31}\n          value={position.y}\n          onChange={handlePosYChange}\n        ></input>\n      </div>\n      <br />\n      <button className=\"sprite-button\">Add Sprite</button>\n      {/* <div className=\"spritepanel-divider\"></div> */}\n      {/* <div className=\"spritepanel-label\">Sprite List </div> */}\n    </form>\n  );\n}\n","import React, { PropsWithChildren } from \"react\";\n\ntype ToggleProps = {\n  state: boolean;\n  onClick: (newState: boolean) => void;\n};\n\nexport default function Toggle({\n  state,\n  onClick,\n  children\n}: PropsWithChildren<ToggleProps>): JSX.Element {\n  return (\n    <button\n      className={state ? \"toggle-on\" : \"toggle-off\"}\n      onClick={() => onClick(!state)}\n    >\n      {children}\n    </button>\n  );\n}\n","import React from \"react\";\nimport { EditorSettings } from \"../util/types\";\nimport {\n  faBorderAll,\n  faPen,\n  faFillDrip,\n  faSearchPlus,\n  faEyeDropper,\n  faLayerGroup,\n  faCode,\n  faPlusSquare,\n  faFileImage\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  faCircle,\n  faSquare,\n  faHandPaper\n} from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Tool } from \"../util/consts\";\nimport Toggle from \"./buttons/Toggle\";\n\ntype ToolsPanelProps = {\n  settings: EditorSettings;\n  onSettingsChange: (newSettings: EditorSettings) => void;\n  onToolChange: (newTool: Tool) => void;\n};\n\nexport default function ToolsPanel({\n  settings,\n  onSettingsChange,\n  onToolChange\n}: ToolsPanelProps) {\n  return (\n    <div>\n      <div className=\"panel-header-top\">Tools</div>\n      <span title=\"Draw Tool\">\n        <Toggle\n          state={settings.currentTool === Tool.PENCIL}\n          onClick={() => onToolChange(Tool.PENCIL)}\n        >\n          <FontAwesomeIcon icon={faPen} />\n        </Toggle>\n      </span>\n      <span title=\"Color Fill\">\n        <Toggle\n          state={settings.currentTool === Tool.BUCKET}\n          onClick={() => onToolChange(Tool.BUCKET)}\n        >\n          <FontAwesomeIcon icon={faFillDrip} />\n        </Toggle>\n      </span>\n    <span title=\"Draw Rectangle\">\n      <Toggle\n        state={settings.currentTool === Tool.SQUARE}\n        onClick={() => onToolChange(Tool.SQUARE)}\n      >\n        <FontAwesomeIcon icon={faSquare} />\n        </Toggle>\n      </span>\n      <span title=\"Draw Ellipse\">\n        <Toggle\n          state={settings.currentTool === Tool.ELLIPSE}\n          onClick={() => onToolChange(Tool.ELLIPSE)}\n        >\n          <FontAwesomeIcon icon={faCircle} />\n        </Toggle>\n      </span>\n      <span title=\"Zoom Tool\">\n        <Toggle\n          state={settings.currentTool === Tool.ZOOM}\n          onClick={() => onToolChange(Tool.ZOOM)}\n        >\n          <FontAwesomeIcon icon={faSearchPlus} />\n        </Toggle>\n      </span>\n      <span title=\"Pan Tool\">\n        <Toggle\n          state={settings.currentTool === Tool.PAN}\n          onClick={() => onToolChange(Tool.PAN)}\n        >\n          <FontAwesomeIcon icon={faHandPaper} />\n        </Toggle>\n      </span>\n      <span title=\"Color Picker\">\n        <Toggle\n          state={settings.currentTool === Tool.DROPPER}\n          onClick={() => onToolChange(Tool.DROPPER)}\n        >\n          <FontAwesomeIcon icon={faEyeDropper} />\n        </Toggle>\n      </span>\n      <span title=\"New Layer\">\n        <Toggle\n          state={settings.currentTool === Tool.LAYER}\n          onClick={() => onToolChange(Tool.LAYER)}\n        >\n          <FontAwesomeIcon icon={faPlusSquare} />\n        </Toggle>\n      </span>\n      <div className=\"panel-header\">View</div>\n      <span title=\"Gridlines\">\n        <Toggle\n          state={settings.grid}\n          onClick={() => {\n            let newSettings = { ...settings };\n            newSettings.grid = !settings.grid;\n            onSettingsChange(newSettings);\n          }}\n        >\n          <FontAwesomeIcon icon={faBorderAll} />\n        </Toggle>\n      </span>\n      <span title=\"Layers\">\n        <Toggle state={false} onClick={() => null}>\n          <FontAwesomeIcon icon={faLayerGroup} />\n        </Toggle>\n      </span>\n      <span title=\"Image Preview\">\n        <Toggle state={false} onClick={() => null}>\n          <FontAwesomeIcon icon={faFileImage} />\n        </Toggle>\n      </span>\n      <span title=\"Code Panel\">\n        <Toggle state={false} onClick={() => null}>\n          <FontAwesomeIcon icon={faCode} />\n        </Toggle>\n      </span>\n    </div>\n  );\n}\n","import { saveAs } from \"file-saver\";\nimport React, { useCallback, useEffect, useReducer, useState } from \"react\";\nimport Bitmap3 from \"../models/Bitmap3\";\nimport Bitmap4 from \"../models/Bitmap4\";\nimport Color from \"../models/Color\";\nimport Palette, { paletteIndexToCol } from \"../models/Palette\";\nimport Spritesheet4 from \"../models/Spritesheet4\";\nimport { DEFAULT_SETTINGS, STORAGE, Tool } from \"../util/consts\";\nimport { DEFAULT_PALETTE, SPRITESHEET_PALETTE } from \"../util/defaultPalette\";\nimport { exportImage, exportPalette, exportType } from \"../util/exportUtils\";\nimport { loadNewImage } from \"../util/fileLoadUtils\";\nimport { quantize } from \"../util/quantize\";\nimport {\n  Dimensions,\n  EditorMode,\n  EditorSettings,\n  ImageCoordinates,\n  ImageDataStore,\n  ImageInterface,\n  Mode,\n  SpriteDimensions,\n  SpritesheetDataStore,\n} from \"../util/types\";\nimport ExportButton from \"./buttons/ExportButton\";\nimport ImportButton from \"./buttons/ImportButton\";\nimport Dropdown from \"./Dropdown\";\nimport EditorCanvas from \"./EditorCanvas\";\nimport useModal from \"./hooks/useModal\";\nimport ImportPaletteModal from \"./modals/ImportPaletteModal\";\nimport NewImageModal from \"./modals/NewImageModal\";\nimport PalettePanel from \"./PalettePanel\";\nimport SpritePanel from \"./SpritePanel\";\nimport ToolsPanel from \"./ToolsPanel\";\n\nfunction scaleReducer(state: number, e: WheelEvent) {\n  const direction = e.deltaY < 0 ? -1 : 1;\n  if (direction === 1) {\n    return state * 1.1;\n  } else {\n    return state / 1.1;\n  }\n}\n\nfunction App(): JSX.Element {\n  const [image, setImage] = useState<ImageInterface>();\n  const [palette, setPalette] = useState<Palette>(DEFAULT_PALETTE);\n  const [selectedColorIndex, setSelectedColorIndex] = useState<number>(0);\n  const [editorSettings, setEditorSettings] = useState<EditorSettings>({\n    grid: true,\n    currentTool: Tool.PENCIL,\n    imageMode: 3,\n    editorMode: EditorMode.Bitmap,\n  });\n\n  const [, updateState] = React.useState();\n  const forceUpdate = useCallback(() => updateState({}), []);\n\n  /**\n   * The undo stack will hold stringified ImageDataStore objects ONLY. They will\n   * be decoded on undo.\n   */\n  const [undoStack, setUndoStack] = useState<Array<string>>([]);\n  const [undoPointer, setUndoPointer] = useState<number>(-1);\n\n  const {\n    isShowing: isMode3BitmapModalShowing,\n    toggle: toggleMode3BitmpModal,\n  } = useModal();\n  const {\n    isShowing: isMode4BitmapModalShowing,\n    toggle: toggleMode4BitmpModal,\n  } = useModal();\n  const {\n    isShowing: isPaletteModalShowing,\n    toggle: togglePaletteModal,\n  } = useModal();\n\n  const [scale, scaleDispatch] = useReducer(scaleReducer, 8);\n  const handleMouseWheelEvent = useCallback((e) => scaleDispatch(e), []);\n\n  const handleFileInputChange = (\n    type: \"Image\" | \"Palette\",\n    element: HTMLInputElement | null,\n    event: React.FormEvent<HTMLInputElement>\n  ): void => {\n    event.preventDefault();\n    if (!element || !element.files) return;\n    switch (type) {\n      case \"Image\":\n        handleImageLoad(element.files[0]);\n        break;\n      // case \"Palette\":\n      //   handlePaletteLoad(element.files[0]);\n      //   break;\n    }\n  };\n\n  const handleImageLoad = async (imageFile: File | null) => {\n    if (imageFile) {\n      console.log(\"Loading image from file...\");\n      let image = await loadNewImage(imageFile);\n      resetUndo();\n      handleImageChange(image);\n    }\n  };\n\n  const handleImageChange = (newImage: ImageInterface) => {\n    let store: string;\n    if (newImage instanceof Spritesheet4) {\n      store = JSON.stringify(newImage.spritesheetDataStore);\n    } else {\n      store = JSON.stringify(newImage.imageDataStore);\n    }\n    window.localStorage.setItem(STORAGE.imageData, store);\n    pushUndoStack(store);\n    setImage(newImage);\n  };\n\n  const handleAddSprite = (\n    position: ImageCoordinates,\n    dimensions: SpriteDimensions,\n    paletteRow = 0\n  ) => {\n    let spritesheet = image as Spritesheet4;\n    spritesheet.addSprite(position, dimensions);\n    handleImageChange(spritesheet);\n    forceUpdate();\n    console.log(\"Adding sprite\");\n  };\n\n  const handleRemoveSprite = (image: ImageInterface | undefined, i: number) => {\n    if (image && image instanceof Spritesheet4) {\n      (image as Spritesheet4).removeSprite(i);\n    }\n    forceUpdate();\n  };\n\n  const pushUndoStack = (imageDataStoreString: string) => {\n    let newStack = undoStack.slice(0, undoPointer + 1);\n    newStack.push(imageDataStoreString);\n    setUndoStack(newStack);\n    setUndoPointer(newStack.length - 1);\n  };\n\n  const handleUndo = useCallback(() => {\n    console.log(\"trying to undo\");\n    if (image && undoPointer >= 1) {\n      if (image instanceof Spritesheet4) {\n      } else {\n      }\n      const newStoreString = undoStack[undoPointer - 1];\n      const newStore = JSON.parse(newStoreString);\n      window.localStorage.setItem(STORAGE.imageData, newStoreString);\n      image.updateFromStore(newStore);\n      setUndoPointer(undoPointer - 1);\n      setImage(image);\n    }\n  }, [undoStack, undoPointer, image]);\n\n  const handleRedo = useCallback(() => {\n    console.log(\"trying to redo\");\n    if (image && undoPointer + 1 < undoStack.length) {\n      image.updateFromStore(JSON.parse(undoStack[undoPointer + 1]));\n      setUndoPointer(undoPointer + 1);\n    }\n  }, [image, undoPointer, undoStack]);\n\n  const resetUndo = () => {\n    setUndoStack([]);\n    setUndoPointer(-1);\n  };\n\n  const handlePaletteChange = (newPalette: Palette) => {\n    window.localStorage.setItem(STORAGE.palette, JSON.stringify(newPalette));\n    setPalette(newPalette);\n  };\n\n  const handleSettingsChange = (newSettings: EditorSettings) => {\n    window.localStorage.setItem(\n      STORAGE.imageMode,\n      newSettings.imageMode.toString()\n    );\n    window.localStorage.setItem(\n      STORAGE.imageType,\n      newSettings.editorMode.toString()\n    );\n    setEditorSettings(newSettings);\n  };\n\n  const handleClearLocalStorage = () => window.localStorage.clear();\n\n  // const handlePaletteLoad = async (palFile: File | null) => {\n  //   if (palFile) {\n  //     console.log(\"Loading palette from file...\");\n  //     let newPalette = await loadNewPalette(palFile);\n  //     if (newPalette) {\n  //       if (image instanceof Bitmap4) {\n  //         image.updatePalette(newPalette);\n  //       }\n  //       handlePaletteChange(newPalette);\n  //     }\n  //   }\n  // };\n\n  const handlePaletteImport = (pal: Palette) => {\n    if (image instanceof Bitmap4) {\n      image.updatePalette(pal);\n    }\n    handlePaletteChange(pal.slice());\n  };\n\n  const handleToolChange = useCallback(\n    (newTool: Tool) => {\n      handleSettingsChange({\n        grid: editorSettings.grid,\n        currentTool: newTool,\n        imageMode: editorSettings.imageMode,\n        editorMode: editorSettings.editorMode,\n      });\n    },\n    [editorSettings]\n  );\n\n  /**\n   * Call this function when initializing a new \"project\" or whatever you want\n   * to call it. You will be greeted with a blank image to work on.\n   *\n   * @param editorMode The mode to set up the editor in. Can be either bitmap,\n   * spritesheet, or background.\n   * @param imageMode The image mode to edit in. Can be any of the GBA Modes,\n   * although only 0, 3, and 4 are supported.\n   */\n  const handleNewImage = (\n    editorMode: EditorMode,\n    imageMode: Mode,\n    fileName: string,\n    dimensions: Dimensions\n  ) => {\n    if (image) {\n      let accept = window.confirm(\n        \"Are you sure you want to create a new image? You will lose all unsaved work.\"\n      );\n      if (!accept) return;\n    }\n    switch (editorMode) {\n      case EditorMode.Bitmap:\n        // Open a modal dialog to query for image filename and dimensions\n        switch (imageMode) {\n          case 3: // Set up the editor for working on a mode 3 bitmap\n            editorSettings.editorMode = EditorMode.Bitmap;\n            editorSettings.imageMode = 3;\n            handleSettingsChange(editorSettings);\n            handleImageChange(new Bitmap3(fileName, dimensions));\n            handlePaletteChange(palette);\n            return;\n          case 4: // Set up the editor for working on a mode 4 paletted bitmap\n            editorSettings.editorMode = EditorMode.Bitmap;\n            editorSettings.imageMode = 4;\n            handleSettingsChange(editorSettings);\n            handleImageChange(new Bitmap4(fileName, palette, dimensions));\n            handlePaletteChange(palette);\n            return;\n          default:\n            alert(\"Unsupported image mode!\");\n            return;\n        }\n      case EditorMode.Spritesheet:\n        editorSettings.editorMode = EditorMode.Spritesheet;\n        editorSettings.imageMode = 0;\n        handleSettingsChange(editorSettings);\n        handleImageChange(\n          new Spritesheet4(\n            \"untitled\",\n            SPRITESHEET_PALETTE,\n            paletteIndexToCol(selectedColorIndex)\n          )\n        );\n        handlePaletteChange(SPRITESHEET_PALETTE);\n        return;\n      case EditorMode.Background:\n      default:\n        alert(\"Unsupported editing mode!\");\n        return;\n    }\n  };\n\n  const handleQuantize = (newColorDepth: number): void => {\n    newColorDepth = Math.floor(newColorDepth); // just in case of a float\n    if (!(image instanceof Bitmap3)) {\n      alert(\"Requantization of paletted images currently not supported!\");\n    } else {\n      let ok = window.confirm(\n        \"Quantizing a bitmap will change it from mode 3 to mode 4. Is this okay?\"\n      );\n      if (ok) {\n        let { palette, sprite } = quantize(image, newColorDepth);\n        handleImageChange(sprite);\n        handlePaletteChange(palette);\n      }\n    }\n  };\n\n  const handleChangeSelectedColor = (newIndex: number) => {\n    setSelectedColorIndex(newIndex);\n    if (image instanceof Bitmap4 || image instanceof Spritesheet4) {\n      image.setPaletteIndex(newIndex);\n    }\n  };\n\n  const handleColorChange = (newColor: Color): void => {\n    const newPalette = palette.slice();\n    newPalette[selectedColorIndex] = newColor;\n    if (selectedColorIndex % 16 === 0 && image instanceof Spritesheet4) {\n      for (let i = 0; i < 16; i++) {\n        let index = i * 16;\n        newPalette[index] = newColor;\n      }\n      image.setBackgroundColor(newColor);\n    }\n    if (image instanceof Bitmap4 || image instanceof Spritesheet4) {\n      image.updatePalette(newPalette);\n    }\n    handlePaletteChange(newPalette);\n  };\n\n  const handleImageExport = async (kind: exportType) => {\n    let fileName;\n    let fileType = \"\";\n    let blob: Blob | null;\n\n    if (image) {\n      fileName = image.fileName.slice(0, image.fileName.lastIndexOf(\".\"));\n    } else {\n      fileName = \"default\";\n    }\n\n    const exportFailAlert = () =>\n      alert(\"Failed to export image! Check console for more information.\");\n\n    switch (kind) {\n      case exportType.GBA:\n        if (!image) {\n          alert(\"No image to export! Try importing one first.\");\n          return;\n        }\n        //.c file\n        fileType = \".c\";\n        let cBlob = new Blob([image.cSourceData]);\n        saveAs(cBlob, fileName + fileType);\n        //.h file\n        fileType = \".h\";\n        let hBlob = new Blob([image.headerData]);\n        saveAs(hBlob, fileName + fileType);\n        return;\n      case exportType.BG:\n        blob = null;\n        console.log(\"Trying to export as background!\");\n        break;\n      case exportType.PAL:\n        //.pal file\n        if (!palette) {\n          alert(\"Can't export a non-existant palette!\");\n          return;\n        } else {\n          fileType = \".pal\";\n          blob = new Blob([exportPalette(palette)]);\n          break;\n        }\n      case exportType.BMP:\n        if (!image) {\n          alert(\"No image to export! Try importing one first.\");\n          return;\n        }\n        //.bmp file\n        fileType = \".bmp\";\n        blob = await exportImage(image, kind);\n        break;\n      case exportType.PNG:\n        if (!image) {\n          alert(\"No image to export! Try importing one first.\");\n          return;\n        }\n        //.png file\n        fileType = \".png\";\n        blob = await exportImage(image, kind);\n        break;\n    }\n    if (!blob) {\n      exportFailAlert();\n    } else {\n      saveAs(blob, fileName + fileType);\n    }\n  };\n\n  /**\n   * Set up listeners for undo and redo.\n   */\n  useEffect(() => {\n    const keydownHandler = (e: KeyboardEvent) => {\n      if (e.keyCode === 89 && e.ctrlKey) {\n      } else if (e.keyCode === 90 && e.ctrlKey && e.shiftKey) {\n        handleRedo();\n      } else if (e.keyCode === 90 && e.ctrlKey) {\n        handleUndo();\n      }\n    };\n    document.addEventListener(\"keydown\", keydownHandler);\n    return () => document.removeEventListener(\"keydown\", keydownHandler);\n  }, [handleUndo, handleRedo]);\n\n  /**\n   * Load Images from local storage.\n   */\n  useEffect(() => {\n    const alertBadFormatting = () =>\n      alert(\"Image data incorrectly formatted. Aborting load operation.\");\n    const askLoadImage = () =>\n      window.confirm(\n        \"Found automatically saved image data from your last session in storage. Would you like to load it? If not, it will be deleted.\"\n      );\n\n    const loadedImageMode = window.localStorage.getItem(STORAGE.imageMode);\n    const loadedImageType = window.localStorage.getItem(STORAGE.imageType);\n    const loadedPalette = window.localStorage.getItem(STORAGE.palette);\n    const loadedImage = window.localStorage.getItem(STORAGE.imageData);\n\n    if (loadedImageMode && loadedImageType && loadedImage) {\n      let loadImage = askLoadImage();\n\n      if (!loadImage) {\n        window.localStorage.clear();\n        return;\n      }\n\n      const parsedImageMode: Mode = parseInt(loadedImageMode) as Mode;\n      const parsedImageType: EditorMode = loadedImageType as EditorMode;\n\n      const buildPalette = (paletteString: string): Palette => {\n        interface IColor {\n          r: number;\n          g: number;\n          b: number;\n          a: number;\n        }\n        // The following cast is definitely unsafe.\n        let parsedPalette = JSON.parse(paletteString) as IColor[];\n        let newPalette = parsedPalette.map(\n          (c) => new Color(c.r, c.g, c.b, c.a)\n        );\n        return newPalette;\n      };\n\n      switch (parsedImageMode) {\n        case 0:\n          if (!loadedPalette) {\n            alertBadFormatting();\n            return;\n          } else {\n            const newPalette = buildPalette(loadedPalette);\n            console.log(newPalette);\n            const parsedImage = JSON.parse(loadedImage) as SpritesheetDataStore;\n            setPalette(newPalette);\n            setImage(Spritesheet4.fromDataStore(parsedImage, newPalette, 0));\n            let newEditorSettings = DEFAULT_SETTINGS;\n            newEditorSettings.imageMode = parsedImageMode;\n            newEditorSettings.editorMode = parsedImageType;\n            setEditorSettings(newEditorSettings);\n          }\n          break;\n        case 3:\n          const parsedImage = JSON.parse(loadedImage) as ImageDataStore;\n          setImage(Bitmap3.fromDataStore(parsedImage));\n          let newEditorSettings = DEFAULT_SETTINGS;\n          newEditorSettings.imageMode = parsedImageMode;\n          newEditorSettings.editorMode = parsedImageType;\n          setEditorSettings(newEditorSettings);\n          break;\n        case 4:\n          if (!loadedPalette) {\n            alertBadFormatting();\n            return;\n          } else {\n            const parsedImage = JSON.parse(loadedImage) as ImageDataStore;\n            const newPalette = buildPalette(loadedPalette);\n            setImage(Bitmap4.fromDataStore(parsedImage, newPalette));\n            setPalette(newPalette);\n            let newEditorSettings = DEFAULT_SETTINGS;\n            newEditorSettings.imageMode = parsedImageMode;\n            newEditorSettings.editorMode = parsedImageType;\n            setEditorSettings(newEditorSettings);\n          }\n          break;\n        default:\n          alertBadFormatting();\n      }\n    }\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"navbar\">\n        <span className=\"title\">VOCC</span>\n        <Dropdown label=\"New\">\n          <div className=\"dd-content-header\">Bitmap</div>\n          <button onClick={toggleMode3BitmpModal}>Mode 3</button>\n          <NewImageModal\n            isShowing={isMode3BitmapModalShowing}\n            hide={toggleMode3BitmpModal}\n            onAccept={handleNewImage.bind(null, EditorMode.Bitmap, 3)}\n          ></NewImageModal>\n          <button onClick={toggleMode4BitmpModal}>Mode 4</button>\n          <NewImageModal\n            isShowing={isMode4BitmapModalShowing}\n            hide={toggleMode4BitmpModal}\n            onAccept={handleNewImage.bind(null, EditorMode.Bitmap, 4)}\n          ></NewImageModal>\n          <div className=\"dd-divider\"></div>\n          <div className=\"dd-content-header\">Spritesheet</div>\n          <button\n            onClick={() =>\n              handleNewImage(EditorMode.Spritesheet, 0, \"untitled\", {\n                height: 256,\n                width: 256,\n              })\n            }\n          >\n            4 bpp\n          </button>\n          <div className=\"dd-divider\"></div>\n          <div className=\"dd-content-header\">Background</div>\n          <button\n            onClick={() => alert(\"Background editing not currently supported.\")}\n          >\n            Mode 0\n          </button>\n        </Dropdown>\n        <Dropdown label=\"Edit\">\n          <button onClick={() => handleUndo()}>Undo</button>\n          <button onClick={() => handleRedo()}>Redo</button>\n          <div className=\"dd-divider\"></div>\n          <button onClick={() => null}>Clear All</button>\n        </Dropdown>\n        <Dropdown label=\"Import\">\n          <div className=\"dd-content-header\">Image</div>\n          <ImportButton\n            onFileInputChange={handleFileInputChange.bind(null, \"Image\")}\n            buttonLabel=\"Image (*.png, *.bmp, *.jpg)\"\n          />\n          <div className=\"dd-divider\"></div>\n          {/* <ImportButton\n            onFileInputChange={handleFileInputChange.bind(null, \"Palette\")}\n            buttonLabel=\"Color Palette (*.pal)\"\n          /> */}\n\n          <button onClick={togglePaletteModal}>Palette</button>\n          <ImportPaletteModal\n            isShowing={isPaletteModalShowing}\n            hide={togglePaletteModal}\n            onAccept={handlePaletteImport}\n            oldPal={palette}\n          ></ImportPaletteModal>\n        </Dropdown>\n        <Dropdown label=\"Export\">\n          <div className=\"dd-content-header\">Image</div>\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, exportType.PNG)}\n            buttonLabel=\"PNG Image (*.png)\"\n          />\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, exportType.BMP)}\n            buttonLabel=\"Bitmap (*.bmp)\"\n          />\n          <div className=\"dd-divider\"></div>\n          <div className=\"dd-content-header\">GBA</div>\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, exportType.GBA)}\n            buttonLabel=\"C Source Code (*.c/.h)\"\n          />\n          <div className=\"dd-divider\"></div>\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, exportType.PAL)}\n            buttonLabel=\"Color Palette (*.pal)\"\n          />\n        </Dropdown>\n        <Dropdown label=\"Help\">\n          <form>\n            <button type=\"submit\" formAction=\"\" formTarget=\"\">\n              Documentation\n            </button>\n          </form>\n          <form>\n            <button\n              type=\"submit\"\n              formAction=\"https://www.coranac.com/tonc/text/\"\n              formTarget=\"_blank\"\n            >\n              GBA Graphics 101\n            </button>\n          </form>\n          <div className=\"dd-divider\"></div>\n          <form>\n            <button type=\"submit\" formAction=\"\" formTarget=\"\">\n              About VOCC\n            </button>\n          </form>\n          <div className=\"dd-divider\"></div>\n          <form>\n            <button\n              type=\"submit\"\n              formAction=\"https://github.com/lbussell/vocc\"\n              formTarget=\"_blank\"\n            >\n              View on GitHub\n            </button>\n          </form>\n          <button onClick={handleClearLocalStorage}>Clear Local Storage</button>\n        </Dropdown>\n      </div>\n      <div className=\"workspace-container\">\n        <div className=\"left-panel\">\n          <div className=\"tools-container\">\n            <ToolsPanel\n              settings={editorSettings}\n              onSettingsChange={handleSettingsChange}\n              onToolChange={handleToolChange}\n            ></ToolsPanel>\n            <div className=\"scale-container\">\n              {image ? <div> Scale: {scale.toFixed(2)}x </div> : null}\n            </div>\n          </div>\n          {/* <div className=\"scale-container\">\n            {image ? <div> Scale: {scale.toFixed(2)}x </div> : null}\n          </div> */}\n        </div>\n        <div className=\"image-container\">\n          {image ? (\n            <EditorCanvas\n              image={image}\n              settings={editorSettings}\n              palette={palette}\n              selectedPaletteIndex={selectedColorIndex}\n              scale={scale}\n              onChangeImage={handleImageChange}\n              onChangeColor={handleColorChange}\n              onMouseWheel={handleMouseWheelEvent}\n            />\n          ) : (\n            <div className=\"start-message\">\n              <em>Import an image to get started</em>\n            </div>\n          )}\n        </div>\n        <div className=\"right-panel\">\n          <PalettePanel\n            palette={palette}\n            updatePalette={handlePaletteChange}\n            selectedColorIndex={selectedColorIndex}\n            onChangeSelectedColorIndex={handleChangeSelectedColor}\n            onChangeColor={handleColorChange}\n            handleQuantize={handleQuantize}\n            settings={editorSettings}\n            onSettingsChange={handleSettingsChange}\n          />\n          {editorSettings.editorMode === EditorMode.Spritesheet ? (\n            <SpritePanel\n              onAddSprite={handleAddSprite}\n              onRemoveSprite={(i) => handleRemoveSprite(image, i)}\n              onUpdatePaletteRow={forceUpdate}\n              sprites={(image as Spritesheet4).sprites}\n            />\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles/styles.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}