{"version":3,"sources":["lib/consts.ts","lib/interfaces.ts","lib/exportUtils.ts","components/objects/Bitmap.ts","components/objects/ImageCanvas.ts","components/objects/Bitmap3.ts","lib/fileLoadUtils.ts","components/objects/Bitmap4.ts","lib/quantize.ts","lib/defaultPalette.ts","components/EditorCanvas.tsx","components/buttons/ExportButton.tsx","components/buttons/ImportButton.tsx","components/objects/Palette.ts","components/PaletteDisplay.tsx","components/buttons/QuantizeButton.tsx","components/PalettePanel.tsx","components/buttons/Toggle.tsx","components/ToolsPanel.tsx","components/Dropdown.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Tool","EditorMode","PALETTE_SIZE","height","width","PALETTE_LENGTH","generateCSourceFileString","image","mode","palette","generateMode3CSourceFileString","console","error","variableName","fileName","slice","lastIndexOf","bitmapLength","dimensions","imageDefinitionString","imageData","getImageData","imageDataHexString","i","length","paletteIndicesToHex","paletteCSourceString","palC","element","colorToHex","PaletteToGBA","generateMode4CSourceFileString","pixelCount","j","pixelToHex","generateHeaderString","params","generateMode3HeaderString","imageDimensions","bitmapLengthDefinition","toUpperCase","imageHeightDefinition","imageWidthDefinition","paletteLengthDefinition","paletteDefinitionString","generateMode4HeaderString","warn","bitmapSize","bitmapSizeDefinition","index1","index2","combinedIndexString","toString","padStart","bgr","binary_value","forEach","elementString","Math","floor","hex_value","parseInt","color","b","g","r","exportImage","img","type","a","getImageFileBlob","Blob","Bitmap","imageCanvas","this","Uint8ClampedArray","getImageCanvasElement","getPixelGridCanvasElement","Promise","resolve","toBlob","blob","pos","Loader","ImageCanvas","pixelGridRatio","hiddenCanvas","context","pixelGrid","log","createHiddenCanvas","getContext","PixelGrid","drawImageToHiddenCanvas","getCanvasElement","drawPixel","x","y","dx","dy","colorString","fillStyle","fillRect","getPixelColorAt","drawGrid","strokeStyle","beginPath","moveTo","lineTo","stroke","Bitmap3","updatePixel","d","document","createElement","hidden","setAttribute","loadImageDataFromCanvas","canvas","data","loadHiddenImage","imagefile","reject","Image","onload","onerror","src","URL","createObjectURL","loadNewImage","imageFile","hiddenImage","naturalHeight","naturalWidth","drawImage","name","offset","loadNewPalette","paletteFile","Response","text","fileString","trim","replace","colors","Array","substr","red","green","blue","Bitmap4","indexArray","currentPaletteIndex","newPaletteIndex","newPalette","redrawImage","BLACK","quantize","depth","centroids","imageArr","push","round","min","max","imageToArr","uniqueColors","uniqueColorsString","check","includes","JSON","stringify","pickedCentroids","maxDist","minDist","midDist","dist","centroidPossible","possible","centers","parse","findCentroids","arrayToProcess","clusters","Groups","iterations","tempdistance","oldcentroids","changed","reset","minCluster","clusterIterate","pow","abs","sqrt","groups","kmeans","newCluster","sort","spriteIndexArrayLength","spriteIndexArray","fill","center","imageIndex","getColorIndex","sprite","colorArr","points","numCentroids","currColor","DEFAULT_PALETTE","EditorCanvas","selectedPaletteIndex","settings","scale","onMouseWheel","canvasRef","useRef","useState","canvasSize","setCanvasSize","isPainting","setIsPainting","undefined","setMousePos","drawImageOnCanvas","useCallback","current","clearRect","grid","useLayoutEffect","window","addEventListener","clientWidth","clientHeight","imageSmoothingEnabled","devicePixelRatio","getMousePos","e","rect","getBoundingClientRect","scaleX","scaleY","clientX","left","clientY","top","getImageCoord","mousePos","fillPixel","setPixelColor","startPaint","mousePosition","paint","newMousePos","stopPaint","useEffect","removeEventListener","ref","className","ExportButton","startImageExport","buttonLabel","onClick","ImportButton","onFileChange","fileInput","handleSubmit","preventDefault","files","accept","onChange","drawPaletteToHiddenCanvas","PALETTE_CANVAS_SIZE","SCALE","MOUSE_POS_TO_INDEX","XY_TO_INDEX","MOUSE_POS_TO_XY","PaletteDisplay","selectedColorIndex","onChangeSelectedColorIndex","paletteHiddenCanvas","setPaletteHiddenCanvas","setPixelGrid","drawPalette","PaletteUtils","drawSelectedColorHighlight","index","lineWidth","ratio","INDEX_TO_X","INDEX_TO_Y","setupCanvasSize","handleQuantize","setDepth","alert","value","target","PalettePanel","onChangeColor","ColorInput","currentColor","QuantizeButton","color32to256","color32","ceil","color256to32","newRValue","color256","handleRChange","newGValue","handleGChange","newBValue","handleBChange","Toggle","state","children","ToolsPanel","onSettingsChange","onToolChange","currentTool","PENCIL","icon","faPen","BUCKET","faFillDrip","SQUARE","faSquare","ELLIPSE","faCircle","ZOOM","faSearchPlus","PAN","faHandPaper","DROPPER","faEyeDropper","newSettings","faBorderAll","faLayerGroup","faCode","editorMode","Dropdown","label","open","setOpen","id","scaleReducer","deltaY","App","setPalette","setImage","setSelectedColorIndex","editorSettings","setEditorSettings","useReducer","scaleDispatch","handleMouseWheelEvent","handleImageLoad","handleToolChange","newTool","handleEditorChange","handlePaletteLoad","palFile","updatePalette","handleImageExport","fileType","exportFailAlert","cBlob","getCSourceData","saveAs","hBlob","getHeaderData","pal","count","hex","paletteToHex","handleSettingsChange","Spritesheet","Background","bind","formAction","formTarget","toFixed","newIndex","setPaletteIndex","newColor","newColorDepth","confirm","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,EAAGD,EAAG,EAAGD,EAAG,EAAGM,EAAG,GACvB,CAAEJ,EAAG,GAAID,EAAG,GAAID,EAAG,GAAIM,EAAG,GAC1B,CAAEJ,EAAG,GAAID,EAAG,GAAID,EAAG,GAAIM,EAAG,GAC1B,CAAEJ,EAAG,GAAID,EAAG,GAAID,EAAG,GAAIM,EAAG,GAC1B,CAAEJ,EAAG,GAAID,EAAG,GAAID,EAAG,GAAIM,EAAG,GAC1B,CAAEJ,EAAG,GAAID,EAAG,GAAID,EAAG,GAAIM,EAAG,GAC1B,CAAEJ,EAAG,GAAID,EAAG,GAAID,EAAG,GAAIM,EAAG,GAC1B,CAAEJ,EAAG,GAAID,EAAG,GAAID,EAAG,GAAIM,EAAG,GAC1B,CAAEJ,EAAG,GAAID,EAAG,GAAID,EAAG,GAAIM,EAAG,GAC1B,CAAEJ,EAAG,GAAID,EAAG,GAAID,EAAG,GAAIM,EAAG,GAC1B,CAAEJ,EAAG,GAAID,EAAG,GAAID,EAAG,GAAIM,EAAG,GAC1B,CAAEJ,EAAG,GAAID,EAAG,GAAID,EAAG,GAAIM,EAAG,GAC1B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,EAAG,IAAKM,EAAG,GAC7B,CAAEJ,EAAG,IAAKD,EAAG,IAAKD,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","file":"static/js/main.ce9618bb.chunk.js","sourcesContent":["import { Dimensions } from \"./interfaces\";\n\nexport const COLORS = {\n  black: { r: 0, g: 0, b: 0, a: 1 },\n  red: { r: 255, g: 0, b: 0, a: 1 },\n  blue: { r: 0, g: 255, b: 0, a: 1 },\n  green: { r: 0, g: 0, b: 255, a: 1 },\n};\n\nexport const PALETTE_SIZE: Dimensions = { height: 16, width: 16 };\nexport const PALETTE_LENGTH = PALETTE_SIZE.height * PALETTE_SIZE.width;\n\nexport enum Tool {\n  PENCIL,\n  BUCKET,\n  SQUARE,\n  ELLIPSE,\n  ZOOM,\n  PAN,\n  DROPPER\n}\n","import { Tool } from \"./consts\";\n\nexport interface Color {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nexport interface Color32 {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport interface Dimensions {\n  height: number;\n  width: number;\n}\n\nexport type Mode = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7; \n\nexport enum EditorMode {\n  Bitmap = \"Bitmap\",\n  Spritesheet = \"Spritesheet\",\n  Background = \"Background\"\n}\n\nexport interface Drawable {\n  dimensions: Dimensions;\n  getImageCanvasElement: () => HTMLCanvasElement;\n  getPixelGridCanvasElement: () => HTMLCanvasElement;\n}\n\n/**\n * Eventually, these methods should be entirely encapsulated within the classes\n * themselves, not separated as part of a utilities file. Make classes do the\n * work, not functions with access to the classes' private information.\n * Perhaps an abstract class with default implementations will work well here.\n */\nexport interface Exportable {\n  fileName: string;\n  getImageData: () => Uint8ClampedArray;\n  getImageFileBlob: () => Promise<Blob | null>;\n  getHeaderData: () => string;\n  getCSourceData: () => string;\n  getPixelColorAt: (pos: ImageCoordinates) => Color;\n}\n\nexport interface Modifiable {\n  setPixelColor: (pos: ImageCoordinates, color: Color) => void;\n}\n\nexport interface ImageInterface extends Drawable, Exportable, Modifiable {}\n\nexport interface EditorSettings {\n  grid: boolean;\n  currentTool: Tool;\n  mode: Mode;\n  editorMode: EditorMode;\n}\n\nexport interface ImageCoordinates {\n  x: number;\n  y: number;\n}\n","import { ImageInterface, Color, Dimensions, Mode } from \"./interfaces\";\nimport { PALETTE_LENGTH } from \"./consts\";\nimport Palette from \"../components/objects/Palette\";\n\n/*\n  getGBAImageString\n\n  take in ImageObject and Palette\n  get the image array from image2GBA\n  get the palette array from pal2GBA\n  returns the combination of them into one string\n*/\nexport function generateCSourceFileString(\n  image: ImageInterface,\n  mode: Mode,\n  palette?: Palette\n): string {\n  switch (mode) {\n    case 3:\n      return generateMode3CSourceFileString(image);\n    case 4:\n      return generateMode4CSourceFileString(image, palette);\n    default:\n      return generateMode3CSourceFileString(image);\n  }\n}\n\nfunction generateMode3CSourceFileString(image: ImageInterface): string {\n  const variableName = image.fileName.slice(0, image.fileName.lastIndexOf(\".\"));\n  const bitmapLength = image.dimensions.height * image.dimensions.width;\n  const imageDefinitionString = `const unsigned short ${variableName}Bitmap[${bitmapLength /\n    2}]__attribute__((aligned(4)))=\\n{\\n\\t`;\n\n  const imageData = image.getImageData();\n  let imageDataHexString = ``;\n\n  let pixelCount = 0;\n  for (var i = 0, j = imageData.length; i < j; i += 4) {\n    let bgr = [imageData[i + 2], imageData[i + 1], imageData[i]]; // bgr for little endian\n    let hexcode = pixelToHex(bgr);\n    imageDataHexString += hexcode + \",\";\n    pixelCount++;\n    if (pixelCount % 8 === 0) {\n      imageDataHexString += \"\\n\";\n      if (pixelCount % 64 === 0) {\n        imageDataHexString += \"\\n\\t\";\n      } else {\n        imageDataHexString += \"\\t\";\n      }\n    }\n  }\n\n  const imageDefinitionEnd = `\\n};\\n`;\n\n  return imageDefinitionString + imageDataHexString + imageDefinitionEnd;\n}\n\nfunction generateMode4CSourceFileString(\n  image: ImageInterface,\n  palette?: Palette\n): string {\n  if (!palette) {\n    console.error(\n      \"Tried to generate mode 4 header string with no palette! Falling back to mode 3...\"\n    );\n    return generateMode3CSourceFileString(image);\n  }\n\n  // Note: we compress the length of the bitmap by 2 because we can fit 2 chars\n  // into a short\n  const variableName = image.fileName.slice(0, image.fileName.lastIndexOf(\".\"));\n  const bitmapLength = image.dimensions.height * image.dimensions.width;\n  const imageDefinitionString = `const unsigned short ${variableName}Bitmap[${bitmapLength /\n    2}]__attribute__((aligned(4)))=\\n{\\n`;\n\n  const imageData = image.getImageData();\n  let imageDataHexString = \"\";\n  for (let i = 0; i < imageData.length; i += 2) {\n    imageDataHexString += paletteIndicesToHex(imageData[i], imageData[i + 1]);\n    if ((i / 2 + 1) % 8 === 0) imageDataHexString += `\\n`;\n  }\n  const imageDefinitionEnd = `};\\n\\n`;\n\n  // Palette length is uncompressed\n  const paletteCSourceString = PaletteToGBA(palette);\n\n  const CSourceString =\n    imageDefinitionString +\n    imageDataHexString +\n    imageDefinitionEnd +\n    paletteCSourceString;\n\n  return CSourceString;\n}\n\ninterface headerFileParams {\n  fileName: string;\n  imageDimensions: Dimensions;\n  palette?: Palette;\n}\n\nexport function generateHeaderString(\n  params: headerFileParams,\n  mode: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7\n): string {\n  switch (mode) {\n    case 3:\n      return generateMode3HeaderString(params);\n    case 4:\n      return generateMode4HeaderString(params);\n    default:\n      console.warn(\n        `Attempting to generate header file for mode ${mode}, but it's unsupported for now. Defaulting to mode 3.`\n      );\n      return generateMode3HeaderString(params);\n  }\n}\n\nexport function generateMode3HeaderString({\n  fileName,\n  imageDimensions,\n  palette\n}: headerFileParams): string {\n  const variableName = fileName.slice(0, fileName.lastIndexOf(\".\"));\n  const bitmapLength = imageDimensions.height * imageDimensions.width;\n  const bitmapSize = bitmapLength * 2;\n  // TODO: Find out how to compute the size vs. the length of the bitmap\n  const bitmapSizeDefinition = `#define ${variableName.toUpperCase()}_SIZE ${bitmapSize}\\n`;\n  const bitmapLengthDefinition = `#define ${variableName.toUpperCase()}_LENGTH ${bitmapLength}\\n`;\n  const imageHeightDefinition = `#define ${variableName.toUpperCase()}_HEIGHT ${\n    imageDimensions.height\n  }\\n`;\n  const imageWidthDefinition = `#define ${variableName.toUpperCase()}_WIDTH ${\n    imageDimensions.width\n  }\\n`;\n  const imageDefinitionString = `extern const unsigned short ${variableName}Bitmap[${bitmapLength}];\\n\\n`;\n\n  const headerString =\n    bitmapLengthDefinition +\n    bitmapSizeDefinition +\n    imageHeightDefinition +\n    imageWidthDefinition +\n    `\\n` +\n    imageDefinitionString +\n    `\\n`;\n\n  return headerString;\n}\n\nexport function generateMode4HeaderString({\n  fileName,\n  imageDimensions,\n  palette\n}: headerFileParams): string {\n  if (!palette) {\n    console.error(\n      \"Tried to generate mode 4 header string with no palette! Falling back to mode 3...\"\n    );\n    return generateMode3HeaderString({\n      fileName: fileName,\n      imageDimensions: imageDimensions\n    });\n  }\n\n  // Note: we compress the length of the bitmap by 2 because we can fit 2 chars\n  // into a short\n  const variableName = fileName.slice(0, fileName.lastIndexOf(\".\"));\n  const bitmapLength = imageDimensions.height * imageDimensions.width;\n  const bitmapLengthDefinition = `#define ${variableName.toUpperCase()}_SIZE ${bitmapLength}\\n`;\n  const imageHeightDefinition = `#define ${variableName.toUpperCase()}_HEIGHT ${\n    imageDimensions.height\n  }\\n`;\n  const imageWidthDefinition = `#define ${variableName.toUpperCase()}_WIDTH ${\n    imageDimensions.width\n  }\\n`;\n  const imageDefinitionString = `extern const unsigned short ${variableName}Bitmap[${bitmapLength /\n    2}];\\n\\n`;\n\n  // Palette length is uncompressed\n  const paletteLengthDefinition = `#define ${variableName.toUpperCase()}_PAL_SIZE ${PALETTE_LENGTH *\n    2}\\n`;\n  const paletteDefinitionString = `extern const unsigned short ${variableName}Palette[${PALETTE_LENGTH}];\\n\\n`;\n\n  const headerString =\n    bitmapLengthDefinition +\n    imageHeightDefinition +\n    imageWidthDefinition +\n    imageDefinitionString +\n    paletteLengthDefinition +\n    paletteDefinitionString;\n\n  return headerString;\n}\n\nfunction paletteIndicesToHex(index1: number, index2: number): string {\n  if (index1 > 255 || index2 > 255) {\n    console.error(\n      `Tried to convert palette indices ${index1} and ${index2}, but at least one is out of range! Truncating bitwise...`\n    );\n  }\n\n  index1 = index1 & 0xff; // Truncate in case the indices are too big\n  index2 = index2 & 0xff;\n\n  const combinedIndexString = (index2 | (index1 << 8))\n    .toString(16)\n    .toUpperCase()\n    .padStart(4, \"0\");\n\n  return `0x${combinedIndexString}, `;\n}\n\n/*\n  pixel2hex\n\n  takes in a number array [b: number, g: number, r: number]\n  convert each pixel to GBA compatible bgr hex format\n  return hex value of pixel\n*/\nfunction pixelToHex(bgr: number[]): string {\n  // convert to 16-bit binary format: 0bbbbbgggggrrrrr\n  let binary_value = \"0\";\n  bgr.forEach(element => {\n    element = Math.floor((element * 32) / 256);\n    let elementString = element.toString(2); // convert to binary\n    while (elementString.length < 5) {\n      elementString = \"0\" + elementString;\n    }\n    binary_value += elementString;\n  });\n  // convert to hex\n  let hex_value = parseInt(binary_value, 2).toString(16);\n  while (hex_value.length < 4) {\n    hex_value = \"0\" + hex_value;\n  }\n  hex_value = hex_value.toUpperCase();\n  return \"0x\" + hex_value;\n}\n\nfunction colorToHex(color: Color): string {\n  let bgr = [color.b, color.g, color.r];\n  return pixelToHex(bgr);\n}\n\n/*\n  pal2Hex\n  \n  takes in a Palette and converts rgb into hex values 0x00rrggbb\n  outputs string of the converted Palette colorArray\n*/\nexport function paletteToHex(palette: Palette): string {\n  let palFile = \"\";\n  let count = 1;\n  const alignment = 4; //this number can change depending on how we want to format\n  palette.forEach(element => {\n    let hex = \"0x00\";\n    hex +=\n      element.r < 16 ? \"0\" + element.r.toString(16) : element.r.toString(16);\n    hex +=\n      element.g < 16 ? \"0\" + element.g.toString(16) : element.g.toString(16);\n    hex +=\n      element.b < 16 ? \"0\" + element.b.toString(16) : element.b.toString(16);\n    palFile += hex + \"\\t\";\n    if (count === alignment) {\n      palFile += \"\\n\";\n      count = 1;\n    } else {\n      count++;\n    }\n  });\n  return palFile;\n}\n\n/*\n  pal2GBA\n  \n  takes in a Palette and converts rgb into hex values (binary: 0bbbbbgggggrrrrr)\n  adds a declaration for the palette array in C\n  outputs string with the declaration and converted Palette colorArray\n*/\nfunction PaletteToGBA(palette: Palette): string {\n  const palArea = PALETTE_LENGTH;\n  const colAlignment = 8; //these numbers can change depending depending on how we want to format\n  const rowAlignment = 8; //\n\n  let palC =\n    \"const unsigned short powPal[\" +\n    palArea +\n    \"] __attribute__((aligned(4)))=\\n{\\n\";\n\n  for (let i = 1; i <= palette.length; i++) {\n    const element = palette[i - 1];\n    palC += colorToHex(element) + \",\";\n\n    if (i % colAlignment === 0) {\n      palC += \"\\n\";\n    }\n    if (i % (colAlignment * rowAlignment) === 0) {\n      palC += \"\\n\";\n    }\n  }\n\n  return palC + \"};\";\n}\n\nexport function exportPalette(pal: Palette): string {\n  return paletteToHex(pal);\n}\n\nexport async function exportImage(\n  img: ImageInterface,\n  type: string\n): Promise<Blob | null> {\n  switch (type) {\n    case \"BMP\":\n    case \"PNG\":\n      return await img.getImageFileBlob();\n    default:\n      return new Blob([\"Invalid file type\"]);\n  }\n}\n","import {\n  Color,\n  Dimensions,\n  ImageInterface,\n  ImageCoordinates\n} from \"../../lib/interfaces\";\nimport ImageCanvas from \"./ImageCanvas\";\nimport * as Loader from \"../../lib/fileLoadUtils\";\n\nexport default abstract class Bitmap implements ImageInterface {\n  public  fileName: string;\n  public dimensions: Dimensions;\n\n  protected imageData: Uint8ClampedArray;\n  protected abstract imageCanvas: ImageCanvas;\n\n  constructor(\n    fileName: string,\n    dimensions: Dimensions,\n    imageData?: Uint8ClampedArray\n  ) {\n    this.fileName = fileName;\n    this.dimensions = dimensions;\n\n    if (imageData) {\n      this.imageData = imageData;\n    } else {\n      this.imageData = new Uint8ClampedArray(\n        this.dimensions.width * this.dimensions.height * 4\n      );\n    }\n  }\n\n  public getImageCanvasElement(): HTMLCanvasElement {\n    return this.imageCanvas.getImageCanvasElement();\n  }\n\n  public getPixelGridCanvasElement(): HTMLCanvasElement {\n    return this.imageCanvas.getPixelGridCanvasElement();\n  }\n\n  public getImageData(): Uint8ClampedArray {\n    return this.imageData;\n  }\n\n  public async getImageFileBlob(): Promise<Blob | null> {\n    return new Promise(resolve => {\n      this.getImageCanvasElement().toBlob(blob => resolve(blob));\n    });\n  }\n\n  protected updateImageData(pos: ImageCoordinates, color: Color): void {\n    this.imageData[Loader.offset(pos, this.dimensions)] = color.r;\n    this.imageData[Loader.offset(pos, this.dimensions) + 1] = color.g;\n    this.imageData[Loader.offset(pos, this.dimensions) + 2] = color.b;\n    this.imageData[Loader.offset(pos, this.dimensions) + 3] = color.a;\n  }\n\n  /////////////////////////////////////// abstract classes\n\n  public abstract getCSourceData(): string;\n  public abstract getHeaderData(): string;\n  public abstract getPixelColorAt(pos: ImageCoordinates): Color;\n  public abstract setPixelColor(\n    pos: ImageCoordinates,\n    color: Color\n  ): void;\n}","import {\n  Color,\n  Dimensions,\n  ImageInterface,\n  ImageCoordinates\n} from \"../../lib/interfaces\";\nimport { createHiddenCanvas } from \"../../lib/fileLoadUtils\";\n\nexport default class ImageCanvas {\n  public dimensions: Dimensions;\n  public pixelGridRatio = 16;\n\n  private hiddenCanvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D | null;\n  private pixelGrid: PixelGrid;\n\n  public constructor(image: ImageInterface) {\n    console.log(\"Creating new internal ImageCanvas.\");\n\n    this.dimensions = image.dimensions;\n    this.hiddenCanvas = createHiddenCanvas(image.dimensions);\n    this.context = this.hiddenCanvas.getContext(\"2d\");\n    this.pixelGrid = new PixelGrid(image.dimensions, this.pixelGridRatio);\n\n    this.drawImageToHiddenCanvas(image);\n  }\n\n  public getImageCanvasElement(): HTMLCanvasElement {\n    return this.hiddenCanvas;\n  }\n\n  public getPixelGridCanvasElement(): HTMLCanvasElement {\n    return this.pixelGrid.getCanvasElement();\n  }\n\n  public updatePixel(pos: ImageCoordinates, color: Color): void {\n    this.drawPixel(pos, color);\n  }\n\n  public updateRegion(\n    image: ImageInterface,\n    x: number,\n    y: number,\n    dx: number,\n    dy: number\n  ): void {\n    // for (let x = 0; x < image.dimensions.width; x++) {\n    //   for (let y = 0; y < image.dimensions.height; y++) {\n    //     this.drawPixel({ x, y }, image.getPixelColorAt({ x, y }));\n    //   }\n    // }\n  }\n\n  public redrawImage(image: ImageInterface): void {\n    this.drawImageToHiddenCanvas(image);\n  }\n\n  private drawPixel(pos: ImageCoordinates, color: Color): void {\n    if (!this.context) return;\n    let colorString = `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`;\n    this.context.fillStyle = colorString;\n    this.context.fillRect(pos.x, pos.y, 1, 1);\n  }\n\n  private drawImageToHiddenCanvas(image: ImageInterface) {\n    for (let x = 0; x < image.dimensions.width; x++) {\n      for (let y = 0; y < image.dimensions.height; y++) {\n        this.drawPixel({ x, y }, image.getPixelColorAt({ x, y }));\n      }\n    }\n  }\n}\n\nexport class PixelGrid {\n  public dimensions: Dimensions;\n  public pixelGridRatio = 16;\n\n  private hiddenCanvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D | null;\n\n  constructor(dimensions: Dimensions, pixelGridRatio: number) {\n    console.log(\"Setting up pixel grid.\");\n\n    this.pixelGridRatio = pixelGridRatio;\n\n    this.dimensions = dimensions;\n    this.hiddenCanvas = createHiddenCanvas({\n      width: this.dimensions.width * this.pixelGridRatio,\n      height: this.dimensions.height * this.pixelGridRatio\n    });\n    this.context = this.hiddenCanvas.getContext(\"2d\");\n\n    this.drawGrid();\n  }\n\n  public getCanvasElement(): HTMLCanvasElement {\n    return this.hiddenCanvas;\n  }\n\n  private drawGrid(): void {\n    if (!this.context) return;\n    const { width, height } = this.dimensions;\n    this.context.strokeStyle = \"gray\";\n    this.context.beginPath();\n\n    for (let x = 0; x <= width; x++) {\n      this.context.moveTo(x * this.pixelGridRatio, 0);\n      this.context.lineTo(\n        x * this.pixelGridRatio,\n        height * this.pixelGridRatio\n      );\n    }\n\n    for (let y = 0; y <= height; y++) {\n      this.context.moveTo(0, y * this.pixelGridRatio);\n      this.context.lineTo(width * this.pixelGridRatio, y * this.pixelGridRatio);\n    }\n\n    this.context.stroke();\n  }\n}\n","import { Color, Dimensions, ImageCoordinates } from \"../../lib/interfaces\";\nimport {\n  generateHeaderString,\n  generateCSourceFileString\n} from \"../../lib/exportUtils\";\nimport * as Loader from \"../../lib/fileLoadUtils\";\nimport Bitmap from \"./Bitmap\";\nimport ImageCanvas from \"./ImageCanvas\";\n\nexport default class Bitmap3 extends Bitmap {\n  protected imageCanvas: ImageCanvas;\n\n  constructor(\n    fileName: string,\n    dimensions: Dimensions,\n    imageData: Uint8ClampedArray\n  ) {\n    super(fileName, dimensions, imageData);\n\n    this.imageCanvas = new ImageCanvas(this);\n  }\n\n  public getCSourceData(): string {\n    return generateCSourceFileString(this, 3);\n  }\n\n  public getHeaderData(): string {\n    return generateHeaderString(\n      { fileName: this.fileName, imageDimensions: this.dimensions },\n      3\n    );\n  }\n\n  public getPixelColorAt(pos: ImageCoordinates): Color {\n    return {\n      r: this.imageData[Loader.offset(pos, this.dimensions)],\n      g: this.imageData[Loader.offset(pos, this.dimensions) + 1],\n      b: this.imageData[Loader.offset(pos, this.dimensions) + 2],\n      a: this.imageData[Loader.offset(pos, this.dimensions) + 3]\n    };\n  }\n\n  public setPixelColor(pos: ImageCoordinates, color: Color): void {\n    console.log(\"setting pixel color bmp3\");\n    super.updateImageData(pos, color);\n    this.imageCanvas.updatePixel(pos, color);\n  }\n}\n","import { Dimensions, ImageCoordinates, Color } from \"./interfaces\";\nimport Bitmap from \"../components/objects/Bitmap\";\nimport Bitmap3 from \"../components/objects/Bitmap3\";\nimport Palette from \"../components/objects/Palette\";\n\nexport const createHiddenCanvas = (d: Dimensions): HTMLCanvasElement => {\n  let hiddenCanvas = document.createElement(\"canvas\");\n  hiddenCanvas.hidden = true;\n  hiddenCanvas.setAttribute(\"height\", d.height + \"px\");\n  hiddenCanvas.setAttribute(\"width\", d.width + \"px\");\n  return hiddenCanvas;\n};\n\nexport const loadImageDataFromCanvas = (\n  canvas: HTMLCanvasElement,\n  dimensions: Dimensions\n): Uint8ClampedArray => {\n  const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D; // unsafe\n  return context.getImageData(0, 0, dimensions.width, dimensions.height).data;\n};\n\n// is async necessary here???? I don't think it is\nexport const loadHiddenImage = (imagefile: File): Promise<HTMLImageElement> => {\n  return new Promise((resolve, reject) => {\n    let image = new Image();\n    image.hidden = true;\n\n    image.onload = () => {\n      resolve(image);\n    };\n\n    image.onerror = reject;\n    image.src = URL.createObjectURL(imagefile);\n  });\n};\n\nexport const loadNewImage = async (imageFile: File): Promise<Bitmap> => {\n  let hiddenImage = await loadHiddenImage(imageFile);\n  let dimensions = {\n    height: hiddenImage.naturalHeight,\n    width: hiddenImage.naturalWidth\n  };\n  let hiddenCanvas = createHiddenCanvas(dimensions);\n  const context = hiddenCanvas.getContext(\"2d\");\n  if (context) context.drawImage(hiddenImage, 0, 0);\n  let imageData = loadImageDataFromCanvas(hiddenCanvas, dimensions);\n  return new Bitmap3(imageFile.name, dimensions, imageData);\n};\n\nexport const offset = (pos: ImageCoordinates, d: Dimensions) =>\n  4 * (pos.y * d.width + pos.x);\n\n/**\n * loadNewPalette\n * @param paletteFile .pal file being imported\n * generates a Color[] by iterating through the File\n * returns initialized palette\n */\nexport const loadNewPalette = async (\n  paletteFile: File\n): Promise<Palette | null> => {\n  let text = await new Response(paletteFile).text();\n  let fileString = text\n    .trim()\n    .replace(/\\t/g, \"\")\n    .replace(/\\n/g, \"\");\n  let colors: Color[] = new Array(256);\n\n  // checking to make sure string is properly formatted before iterating through it\n  if (fileString.substr(0, 4) === \"0x00\") {\n    console.log(\"Palette file is valid. Generating color array...\");\n\n    // string is in 0x00rrggbb format (length 10)\n    for (let i = 0, j = 0; i < fileString.length; i += 10, j++) {\n      let red = parseInt(fileString.substr(i + 4, 2), 16);\n      let green = parseInt(fileString.substr(i + 6, 2), 16);\n      let blue = parseInt(fileString.substr(i + 8, 2), 16);\n\n      let color: Color = {\n        r: red,\n        g: green,\n        b: blue,\n        a: 1\n      };\n      colors[j] = color;\n    }\n    return colors;\n  } else {\n    console.log(\"Invalid palette. Palette unchanged.\");\n    return null;\n  }\n};\n","import { Color, Dimensions, ImageCoordinates } from \"../../lib/interfaces\";\nimport {\n  generateHeaderString,\n  generateCSourceFileString\n} from \"../../lib/exportUtils\";\nimport Palette from \"./Palette\";\nimport ImageCanvas from \"./ImageCanvas\";\nimport Bitmap from \"./Bitmap\";\n\nexport default class Bitmap4 extends Bitmap {\n  private data: number[];\n  private palette: Palette;\n  private currentPaletteIndex: number;\n\n  protected imageCanvas: ImageCanvas;\n\n  constructor(\n    fileName: string,\n    indexArray: number[],\n    palette: Palette,\n    dimensions: Dimensions\n  ) {\n    super(fileName, dimensions);\n    this.data = indexArray;\n    this.palette = palette;\n    this.imageCanvas = new ImageCanvas(this);\n    this.currentPaletteIndex = 0;\n  }\n\n  public getHeaderData(): string {\n    return generateHeaderString(\n      {\n        fileName: this.fileName,\n        imageDimensions: this.dimensions,\n        palette: this.palette\n      },\n      4\n    );\n  }\n\n  public getCSourceData(): string {\n    return generateCSourceFileString(this, 4, this.palette);\n  }\n\n  /**\n   * Returns the color at the specified index in the image by indexing into the\n   * color palette\n   * @param ImageCoordinates the index in the Sprite that you would like to get\n   *    the color at\n   */\n  public getPixelColorAt(pos: ImageCoordinates): Color {\n    if (pos.x >= this.dimensions.width || pos.y >= this.dimensions.height) {\n      console.error(\n        \"Tried to access pixel at\",\n        pos,\n        \"but dimensions of sprite are\",\n        this.dimensions\n      );\n    }\n    return this.palette[this.data[this.dimensions.width * pos.y + pos.x]];\n  }\n\n  // TODO: this is totally broken\n  public setPixelColor(pos: ImageCoordinates): void {\n    // // console.log(\"setting pixel color bmp4\");\n    // const paletteIndex = 255;\n    this.data[pos.y * this.dimensions.width + pos.x] = this.currentPaletteIndex;\n    // this.data[pos.y * this.dimensions.width + pos.x] = paletteIndex;\n    this.imageCanvas.updatePixel(pos, this.palette[this.currentPaletteIndex]);\n  }\n\n  setPaletteIndex(newPaletteIndex: number) {\n    this.currentPaletteIndex = newPaletteIndex;\n  }\n\n  public updatePalette(newPalette: Palette): void {\n    this.palette = newPalette;\n    this.imageCanvas.redrawImage(this);\n  }\n}\n","import Bitmap4 from \"../components/objects/Bitmap4\";\r\nimport Palette from \"../components/objects/Palette\";\r\nimport { Color } from \"./interfaces\";\r\nimport Bitmap from \"../components/objects/Bitmap\";\r\n\r\nconst BLACK: Color = {\r\n  r: 0,\r\n  g: 0,\r\n  b: 0,\r\n  a: 1\r\n};\r\n\r\nexport function quantize(\r\n  image: Bitmap,\r\n  depth: number\r\n): { sprite: Bitmap4; palette: Palette } {\r\n  let centroids: number[][];\r\n  let imageArr = imageToArr(image);\r\n  let colors = depth;\r\n  const MaxPalSize = 256;\r\n\r\n  //start by checking that there are at least 'depth' unique colors in image\r\n  // console.log(\"find colors\")\r\n  let uniqueColors = [];\r\n  let uniqueColorsString: String[] = [];\r\n  for (let i = 0; i < imageArr.length; i++) {\r\n    let check = imageArr[i];\r\n    if (!uniqueColorsString.includes(JSON.stringify(check))) {\r\n      uniqueColors.push(check);\r\n      uniqueColorsString.push(JSON.stringify(check));\r\n    }\r\n  }\r\n\r\n  //pick unique colors for centroids using binary search to find points with\r\n  //largest average distance\r\n  if (colors === 1 || uniqueColors.length < colors) {\r\n    centroids = uniqueColors;\r\n    colors = uniqueColors.length;\r\n  } else {\r\n    let { pickedCentroids } = findCentroids(uniqueColors, colors);\r\n    // console.log(pickedCentroids)\r\n    centroids = JSON.parse(JSON.stringify(pickedCentroids));\r\n  }\r\n\r\n  // use K-means to fit all colors in image to 'colors' clusters\r\n  let { groups, centers } = kmeans(\r\n    JSON.parse(JSON.stringify(imageArr)),\r\n    JSON.parse(JSON.stringify(centroids)),\r\n    colors\r\n  );\r\n\r\n  // console.log(\"kmeans output:\")\r\n  // console.log(groups[0][0]);\r\n  // console.log(centers);\r\n\r\n  let clusters: number[][][] = [];\r\n  //group centers and points in cluster for sorting\r\n  for (let i = 0; i < centers.length; i++) {\r\n    let newCluster: number[][] = [[], []];\r\n    newCluster[0] = centers[i];\r\n    for (var j = 0; j < groups[i].length; j++) {\r\n      newCluster[j + 1] = groups[i][j];\r\n    }\r\n    clusters.push(newCluster);\r\n  }\r\n  // sort clusters from largest to smallest\r\n  clusters.sort(function(a, b) {\r\n    return b.length - a.length;\r\n  });\r\n\r\n  console.log(clusters);\r\n\r\n  let spriteIndexArrayLength = image.dimensions.height * image.dimensions.width;\r\n\r\n  // generate out sprite and palette based on k-means clusters\r\n  let spriteIndexArray: number[] = new Array<number>(spriteIndexArrayLength);\r\n  spriteIndexArray.fill(0);\r\n\r\n  let palette: Color[] = new Array(256);\r\n\r\n  //clusters: [center[r,g,b]], [point 1[r,g,b]], ...]\r\n  let i = 0;\r\n  for (i; i < clusters.length && i < MaxPalSize; i++) {\r\n    let center: Color = {\r\n      r: clusters[i][0][0],\r\n      g: clusters[i][0][1],\r\n      b: clusters[i][0][2],\r\n      a: 1\r\n    };\r\n    palette[i] = center;\r\n    for (let j = 1; j < clusters[i].length; j++) {\r\n      let imageIndex = getColorIndex(imageArr, clusters[i][j]);\r\n      // console.log(imageIndex);\r\n      if (imageIndex !== -1) {\r\n        spriteIndexArray[imageIndex] = i;\r\n      }\r\n    }\r\n  }\r\n  // console.log(paletteColorArray)\r\n  for (i; i < MaxPalSize; i++) {\r\n    palette[i] = BLACK;\r\n  }\r\n\r\n  let sprite = new Bitmap4(\r\n    image.fileName,\r\n    spriteIndexArray,\r\n    palette,\r\n    image.dimensions\r\n  );\r\n  return { sprite, palette };\r\n}\r\n\r\n// Used to find index of colors for building sprite colorArray\r\n// This kills the imageArr (imageArr is destroyed by this function)\r\nfunction getColorIndex(imageArr: number[][], colorArr: number[]): number {\r\n  for (let i = 0; i < imageArr.length; i++) {\r\n    if (\r\n      imageArr[i][0] === colorArr[0] &&\r\n      imageArr[i][1] === colorArr[1] &&\r\n      imageArr[i][2] === colorArr[2]\r\n    ) {\r\n      imageArr[i] = [-1, -1, -1];\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n//converts imageObject into array of colors for k-means\r\nfunction imageToArr(image: Bitmap): number[][] {\r\n  let imageArr = [];\r\n  for (let y = 0; y < image.dimensions.height; y++) {\r\n    for (let x = 0; x < image.dimensions.width; x++) {\r\n      let color = image.getPixelColorAt({ x, y });\r\n      imageArr.push([\r\n        Math.round(Math.min(Math.max(color.r, 0), 255)),\r\n        Math.round(Math.min(Math.max(color.g, 0), 255)),\r\n        Math.round(Math.min(Math.max(color.b, 0), 255))\r\n      ]);\r\n    }\r\n  }\r\n  return imageArr;\r\n}\r\n\r\n//used to find clusters of similar points for image depth reduction (quantization)\r\n//arrayToProcess: number array of colors; [[r, g, b], [r, g, b], ...]\r\n//centroids: center point of clusters;\r\n//clusters: number of clusters to generate\r\nfunction kmeans(\r\n  arrayToProcess: number[][],\r\n  centroids: number[][],\r\n  clusters: number\r\n): { groups: number[][][]; centers: number[][] } {\r\n  let Groups: any[] = [];\r\n  let iterations = 0;\r\n  let tempdistance = 0;\r\n  let oldcentroids: number[][] = JSON.parse(JSON.stringify(centroids));\r\n  let changed = false;\r\n\r\n  do {\r\n    for (let reset = 0; reset < clusters; reset++) {\r\n      Groups[reset] = [];\r\n    }\r\n\r\n    changed = false;\r\n\r\n    changed = false;\r\n\r\n    for (let i = 0; i < arrayToProcess.length; i++) {\r\n      let minDist = -1;\r\n      let minCluster = 0;\r\n\r\n      for (\r\n        let clusterIterate = 0;\r\n        clusterIterate < clusters;\r\n        clusterIterate++\r\n      ) {\r\n        let dist = 0;\r\n\r\n        for (let j = 0; j < arrayToProcess[i].length; j++) {\r\n          dist += Math.pow(\r\n            Math.abs(arrayToProcess[i][j] - centroids[clusterIterate][j]),\r\n            2\r\n          );\r\n        }\r\n        tempdistance = Math.sqrt(dist);\r\n\r\n        if (minDist === -1 || tempdistance <= minDist) {\r\n          minDist = tempdistance;\r\n          minCluster = clusterIterate;\r\n        }\r\n      }\r\n      Groups[minCluster].push(arrayToProcess[i].slice());\r\n    }\r\n\r\n    for (let clusterIterate = 0; clusterIterate < clusters; clusterIterate++) {\r\n      for (let i = 0; i < Groups[clusterIterate].length; i++) {\r\n        for (let j = 0; j < Groups[clusterIterate][i].length; j++) {\r\n          centroids[clusterIterate][j] += Groups[clusterIterate][i][j];\r\n        }\r\n      }\r\n      for (let i = 0; i < centroids[clusterIterate].length; i++) {\r\n        centroids[clusterIterate][i] = Math.round(\r\n          Math.min(\r\n            Math.max(\r\n              centroids[clusterIterate][i] /\r\n                (Groups[clusterIterate].length <= 1\r\n                  ? 1\r\n                  : Groups[clusterIterate].length),\r\n              0\r\n            ),\r\n            255\r\n          )\r\n        );\r\n\r\n        if (centroids[clusterIterate][i] !== oldcentroids[clusterIterate][i]) {\r\n          changed = true;\r\n          oldcentroids = [];\r\n          oldcentroids = JSON.parse(JSON.stringify(centroids));\r\n        }\r\n      }\r\n    }\r\n    iterations++;\r\n  } while (changed === true && iterations < 1000);\r\n\r\n  console.log(\"kmeans output:\");\r\n  console.log(iterations);\r\n  // console.log(Groups.length);\r\n  // console.log(Groups);\r\n  console.log(\"..........\");\r\n\r\n  // let ret = [Groups, centroids];\r\n  // console.log(ret);\r\n  // return ret;\r\n\r\n  return { groups: Groups, centers: centroids };\r\n}\r\n\r\n//function to determine if there exists a group of centroids with specific\r\n//average distance between them\r\n//points: list of points to search\r\n//midDist: desired average distance\r\n//numCentroids: number of points to find\r\n//\r\n//returns:\r\n//possible (boolean)\r\n//centers (list of points with desired distance)\r\nfunction centroidPossible(\r\n  points: number[][],\r\n  midDist: number,\r\n  numCentroids: number\r\n): { possible: boolean; centers: number[][] } {\r\n  let centroids = 1;\r\n  let currColor: number[] = points[0];\r\n  let possible = false;\r\n  let centers: number[][] = [];\r\n\r\n  centers.push(currColor);\r\n\r\n  for (let i = 0; i < points.length; i++) {\r\n    let dist = 0;\r\n\r\n    for (let j = 0; j < points[i].length; j++) {\r\n      dist += Math.pow(Math.abs(points[i][j] - currColor[j]), 2);\r\n    }\r\n    dist = Math.sqrt(dist);\r\n\r\n    if (dist >= midDist) {\r\n      centroids++;\r\n      currColor = points[i];\r\n      centers.push(points[i]);\r\n\r\n      if (centroids >= numCentroids) {\r\n        possible = true;\r\n        return { possible, centers };\r\n      }\r\n    }\r\n  }\r\n  return { possible, centers };\r\n}\r\n\r\n//binary search to find centroids, reutrn list of centroids with\r\n// average largest distance between them\r\nfunction findCentroids(\r\n  uniqueColors: number[][],\r\n  depth: number\r\n): { pickedCentroids: number[][] } {\r\n  let maxDist = 442;\r\n  let minDist = 0;\r\n  let midDist = (maxDist + minDist) / 2;\r\n\r\n  let dist = 0;\r\n\r\n  let pickedCentroids: number[][] = [];\r\n\r\n  while (minDist <= maxDist) {\r\n    midDist = (maxDist + minDist) / 2;\r\n    let { possible, centers } = centroidPossible(uniqueColors, midDist, depth);\r\n\r\n    if (!possible) {\r\n      maxDist = midDist - 1;\r\n    } else {\r\n      if (dist < midDist) {\r\n        pickedCentroids = JSON.parse(JSON.stringify(centers));\r\n        dist = midDist;\r\n      }\r\n      minDist = midDist + 1;\r\n    }\r\n  }\r\n  return { pickedCentroids };\r\n}\r\n","import Palette from \"../components/objects/Palette\";\n\nconst DEFAULT_PALETTE: Palette = [\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 128, g: 0, b: 0, a: 1 },\n  { r: 0, g: 128, b: 0, a: 1 },\n  { r: 128, g: 128, b: 0, a: 1 },\n  { r: 0, g: 0, b: 128, a: 1 },\n  { r: 128, g: 0, b: 128, a: 1 },\n  { r: 0, g: 128, b: 128, a: 1 },\n  { r: 192, g: 192, b: 192, a: 1 },\n  { r: 128, g: 128, b: 128, a: 1 },\n  { r: 248, g: 0, b: 0, a: 1 },\n  { r: 0, g: 248, b: 0, a: 1 },\n  { r: 248, g: 248, b: 0, a: 1 },\n  { r: 0, g: 0, b: 248, a: 1 },\n  { r: 248, g: 0, b: 248, a: 1 },\n  { r: 0, g: 248, b: 248, a: 1 },\n  { r: 248, g: 248, b: 248, a: 1 },\n  { r: 32, g: 0, b: 0, a: 1 },\n  { r: 63, g: 0, b: 0, a: 1 },\n  { r: 95, g: 0, b: 0, a: 1 },\n  { r: 127, g: 0, b: 0, a: 1 },\n  { r: 159, g: 0, b: 0, a: 1 },\n  { r: 191, g: 0, b: 0, a: 1 },\n  { r: 223, g: 0, b: 0, a: 1 },\n  { r: 255, g: 0, b: 0, a: 1 },\n  { r: 0, g: 32, b: 0, a: 1 },\n  { r: 0, g: 63, b: 0, a: 1 },\n  { r: 0, g: 95, b: 0, a: 1 },\n  { r: 0, g: 127, b: 0, a: 1 },\n  { r: 0, g: 159, b: 0, a: 1 },\n  { r: 0, g: 191, b: 0, a: 1 },\n  { r: 0, g: 223, b: 0, a: 1 },\n  { r: 0, g: 255, b: 0, a: 1 },\n  { r: 32, g: 32, b: 0, a: 1 },\n  { r: 63, g: 63, b: 0, a: 1 },\n  { r: 95, g: 95, b: 0, a: 1 },\n  { r: 127, g: 127, b: 0, a: 1 },\n  { r: 159, g: 159, b: 0, a: 1 },\n  { r: 191, g: 191, b: 0, a: 1 },\n  { r: 223, g: 223, b: 0, a: 1 },\n  { r: 255, g: 255, b: 0, a: 1 },\n  { r: 0, g: 0, b: 32, a: 1 },\n  { r: 0, g: 0, b: 63, a: 1 },\n  { r: 0, g: 0, b: 95, a: 1 },\n  { r: 0, g: 0, b: 127, a: 1 },\n  { r: 0, g: 0, b: 159, a: 1 },\n  { r: 0, g: 0, b: 191, a: 1 },\n  { r: 0, g: 0, b: 223, a: 1 },\n  { r: 0, g: 0, b: 255, a: 1 },\n  { r: 32, g: 0, b: 32, a: 1 },\n  { r: 63, g: 0, b: 63, a: 1 },\n  { r: 95, g: 0, b: 95, a: 1 },\n  { r: 127, g: 0, b: 127, a: 1 },\n  { r: 159, g: 0, b: 159, a: 1 },\n  { r: 191, g: 0, b: 191, a: 1 },\n  { r: 223, g: 0, b: 223, a: 1 },\n  { r: 255, g: 0, b: 255, a: 1 },\n  { r: 0, g: 32, b: 32, a: 1 },\n  { r: 0, g: 63, b: 63, a: 1 },\n  { r: 0, g: 95, b: 95, a: 1 },\n  { r: 0, g: 127, b: 127, a: 1 },\n  { r: 0, g: 159, b: 159, a: 1 },\n  { r: 0, g: 191, b: 191, a: 1 },\n  { r: 0, g: 223, b: 223, a: 1 },\n  { r: 0, g: 255, b: 255, a: 1 },\n  { r: 16, g: 16, b: 16, a: 1 },\n  { r: 31, g: 31, b: 31, a: 1 },\n  { r: 47, g: 47, b: 47, a: 1 },\n  { r: 63, g: 63, b: 63, a: 1 },\n  { r: 79, g: 79, b: 79, a: 1 },\n  { r: 95, g: 95, b: 95, a: 1 },\n  { r: 111, g: 111, b: 111, a: 1 },\n  { r: 127, g: 127, b: 127, a: 1 },\n  { r: 143, g: 143, b: 143, a: 1 },\n  { r: 159, g: 159, b: 159, a: 1 },\n  { r: 175, g: 175, b: 175, a: 1 },\n  { r: 191, g: 191, b: 191, a: 1 },\n  { r: 207, g: 207, b: 207, a: 1 },\n  { r: 223, g: 223, b: 223, a: 1 },\n  { r: 239, g: 239, b: 239, a: 1 },\n  { r: 255, g: 255, b: 255, a: 1 },\n  { r: 255, g: 0, b: 0, a: 1 },\n  { r: 255, g: 31, b: 0, a: 1 },\n  { r: 255, g: 63, b: 0, a: 1 },\n  { r: 255, g: 95, b: 0, a: 1 },\n  { r: 255, g: 127, b: 0, a: 1 },\n  { r: 255, g: 159, b: 0, a: 1 },\n  { r: 255, g: 191, b: 0, a: 1 },\n  { r: 255, g: 223, b: 0, a: 1 },\n  { r: 255, g: 255, b: 0, a: 1 },\n  { r: 224, g: 255, b: 0, a: 1 },\n  { r: 192, g: 255, b: 0, a: 1 },\n  { r: 160, g: 255, b: 0, a: 1 },\n  { r: 128, g: 255, b: 0, a: 1 },\n  { r: 96, g: 255, b: 0, a: 1 },\n  { r: 64, g: 255, b: 0, a: 1 },\n  { r: 32, g: 255, b: 0, a: 1 },\n  { r: 0, g: 255, b: 0, a: 1 },\n  { r: 0, g: 255, b: 31, a: 1 },\n  { r: 0, g: 255, b: 63, a: 1 },\n  { r: 0, g: 255, b: 95, a: 1 },\n  { r: 0, g: 255, b: 127, a: 1 },\n  { r: 0, g: 255, b: 159, a: 1 },\n  { r: 0, g: 255, b: 191, a: 1 },\n  { r: 0, g: 255, b: 223, a: 1 },\n  { r: 0, g: 255, b: 255, a: 1 },\n  { r: 0, g: 224, b: 255, a: 1 },\n  { r: 0, g: 192, b: 255, a: 1 },\n  { r: 0, g: 160, b: 255, a: 1 },\n  { r: 0, g: 128, b: 255, a: 1 },\n  { r: 0, g: 96, b: 255, a: 1 },\n  { r: 0, g: 64, b: 255, a: 1 },\n  { r: 0, g: 32, b: 255, a: 1 },\n  { r: 0, g: 0, b: 255, a: 1 },\n  { r: 31, g: 0, b: 255, a: 1 },\n  { r: 63, g: 0, b: 255, a: 1 },\n  { r: 95, g: 0, b: 255, a: 1 },\n  { r: 127, g: 0, b: 255, a: 1 },\n  { r: 159, g: 0, b: 255, a: 1 },\n  { r: 191, g: 0, b: 255, a: 1 },\n  { r: 223, g: 0, b: 255, a: 1 },\n  { r: 255, g: 0, b: 255, a: 1 },\n  { r: 255, g: 0, b: 224, a: 1 },\n  { r: 255, g: 0, b: 192, a: 1 },\n  { r: 255, g: 0, b: 160, a: 1 },\n  { r: 255, g: 0, b: 128, a: 1 },\n  { r: 255, g: 0, b: 96, a: 1 },\n  { r: 255, g: 0, b: 64, a: 1 },\n  { r: 255, g: 0, b: 32, a: 1 },\n  { r: 255, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 0, g: 0, b: 0, a: 1 },\n  { r: 8, g: 8, b: 8, a: 1 },\n  { r: 16, g: 16, b: 16, a: 1 },\n  { r: 24, g: 24, b: 24, a: 1 },\n  { r: 32, g: 32, b: 32, a: 1 },\n  { r: 41, g: 41, b: 41, a: 1 },\n  { r: 49, g: 49, b: 49, a: 1 },\n  { r: 57, g: 57, b: 57, a: 1 },\n  { r: 65, g: 65, b: 65, a: 1 },\n  { r: 74, g: 74, b: 74, a: 1 },\n  { r: 82, g: 82, b: 82, a: 1 },\n  { r: 90, g: 90, b: 90, a: 1 },\n  { r: 98, g: 98, b: 98, a: 1 },\n  { r: 106, g: 106, b: 106, a: 1 },\n  { r: 115, g: 115, b: 115, a: 1 },\n  { r: 123, g: 123, b: 123, a: 1 },\n  { r: 131, g: 131, b: 131, a: 1 },\n  { r: 139, g: 139, b: 139, a: 1 },\n  { r: 148, g: 148, b: 148, a: 1 },\n  { r: 156, g: 156, b: 156, a: 1 },\n  { r: 164, g: 164, b: 164, a: 1 },\n  { r: 172, g: 172, b: 172, a: 1 },\n  { r: 180, g: 180, b: 180, a: 1 },\n  { r: 189, g: 189, b: 189, a: 1 },\n  { r: 197, g: 197, b: 197, a: 1 },\n  { r: 205, g: 205, b: 205, a: 1 },\n  { r: 213, g: 213, b: 213, a: 1 },\n  { r: 222, g: 222, b: 222, a: 1 },\n  { r: 230, g: 230, b: 230, a: 1 },\n  { r: 238, g: 238, b: 238, a: 1 },\n  { r: 246, g: 246, b: 246, a: 1 },\n  { r: 255, g: 255, b: 255, a: 1 }\n];\n\nexport default DEFAULT_PALETTE;\n","import React, {\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n  useLayoutEffect\n} from \"react\";\nimport { EditorSettings, ImageCoordinates, Color } from \"../lib/interfaces\";\nimport Bitmap from \"./objects/Bitmap\";\nimport Palette from \"./objects/Palette\";\n\n// The pixel grid will not be visible when the scale is smaller than this value.\nconst PIXELGRID_ZOOM_LIMIT = 8;\n\ninterface EditorCanvasProps {\n  image: Bitmap;\n  palette: Palette;\n  selectedPaletteIndex: number;\n  settings: EditorSettings;\n  scale: number;\n  onMouseWheel: (e: WheelEvent) => void;\n}\n\nexport default function EditorCanvas({\n  image,\n  palette,\n  selectedPaletteIndex,\n  settings,\n  scale,\n  onMouseWheel\n}: EditorCanvasProps): JSX.Element {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [canvasSize, setCanvasSize] = useState<number[]>([0, 0]);\n\n  ///////////////////// Drawing Tool\n  const [isPainting, setIsPainting] = useState<boolean>(false);\n  const [mousePos, setMousePos] = useState<ImageCoordinates | undefined>(\n    undefined\n  );\n  /////////////////////\n\n  const drawImageOnCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext(\"2d\");\n    if (!context) return;\n    if (!image) return;\n\n    // Clear the context\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    // Draw the image at the correct position and scale\n    context.drawImage(\n      image.getImageCanvasElement(),\n      0,\n      0,\n      image.dimensions.width * scale,\n      image.dimensions.height * scale\n    );\n    // Draw the grid (if we need to)\n    if (settings.grid && scale >= PIXELGRID_ZOOM_LIMIT) {\n      context.drawImage(\n        image.getPixelGridCanvasElement(),\n        0,\n        0,\n        image.dimensions.width * scale,\n        image.dimensions.height * scale\n      );\n    }\n  }, [image, canvasRef, scale, settings.grid]);\n\n  /**\n   * Handle window resizing and set the new canvasSize state.\n   */\n  useLayoutEffect(() => {\n    const updateCanvasSize = () => {\n      if (canvasRef.current) {\n        setCanvasSize([\n          canvasRef.current.clientWidth,\n          canvasRef.current.clientHeight\n        ]);\n      }\n    };\n    window.addEventListener(\"resize\", () => updateCanvasSize());\n  }, []);\n\n  /**\n   * Set up the canvas.\n   */\n  useLayoutEffect(() => {\n    console.log(\"Setting up canvas...\");\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext(\"2d\");\n    if (!context) return;\n    setCanvasSize([canvas.clientWidth, canvas.clientHeight]);\n    context.imageSmoothingEnabled = false;\n  }, [canvasRef]);\n\n  /**\n   * Change the dimensions of the canvas when the canvasSize changes.\n   */\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const context = canvas.getContext(\"2d\");\n    if (!context) return;\n\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    canvas.width = canvasSize[0] * devicePixelRatio;\n    canvas.height = canvasSize[1] * devicePixelRatio;\n    context.imageSmoothingEnabled = false;\n  }, [canvasSize, canvasRef]);\n\n  /**\n   * Handle mousewheel zooming\n   */\n  useLayoutEffect(() => {\n    if (canvasRef.current) {\n      canvasRef.current.addEventListener(\"wheel\", onMouseWheel);\n    }\n  }, [onMouseWheel]);\n\n  /**\n   * Draw the image whenever the image, imageCanvas, context, scale, or editor\n   * settings change.\n   */\n  useLayoutEffect(() => drawImageOnCanvas(), [\n    drawImageOnCanvas,\n    palette,\n    canvasSize\n  ]);\n\n  /////////////////////////////////////////////////////////////////////////////\n  // Drawing Tool\n  const getMousePos = (e: MouseEvent): ImageCoordinates | undefined => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n      return {\n        x: (e.clientX - rect.left) * scaleX,\n        y: (e.clientY - rect.top) * scaleY\n      };\n    }\n    return undefined;\n  };\n\n  const getImageCoord = useCallback(\n    (mousePos: ImageCoordinates): ImageCoordinates => {\n      const x = Math.floor(mousePos.x / scale);\n      const y = Math.floor(mousePos.y / scale);\n      return { x, y };\n    },\n    [scale]\n  );\n\n  const fillPixel = useCallback(\n    (pos: ImageCoordinates, color: Color): void => {\n      if (!canvasRef.current) return;\n      const context = canvasRef.current.getContext(\"2d\");\n      if (!context) return;\n\n      image.setPixelColor(pos, color);\n      drawImageOnCanvas();\n    },\n    [drawImageOnCanvas, image]\n  );\n\n  const startPaint = useCallback((e: MouseEvent) => {\n    const mousePosition = getMousePos(e);\n    if (mousePosition) {\n      setMousePos(mousePosition);\n      // fillPixel(\n      //   getImageCoord(mousePosition),\n      //   palette.getColorAt(selectedPaletteIndex)\n      // );\n      setIsPainting(true);\n    }\n  }, []);\n\n  const paint = useCallback(\n    (e: MouseEvent) => {\n      const newMousePos = getMousePos(e);\n      if (isPainting && newMousePos) {\n        fillPixel(getImageCoord(newMousePos), palette[selectedPaletteIndex]);\n        setMousePos(newMousePos);\n      }\n    },\n    [isPainting, fillPixel, getImageCoord, palette, selectedPaletteIndex]\n  );\n\n  const stopPaint = useCallback(() => {\n    setMousePos(undefined);\n    setIsPainting(false);\n  }, []);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"mousedown\", startPaint);\n    return () => canvas.removeEventListener(\"mousedown\", startPaint);\n  }, [startPaint]);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"mousemove\", paint);\n    return () => {\n      canvas.removeEventListener(\"mousemove\", paint);\n    };\n  }, [paint]);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"mouseup\", stopPaint);\n    canvas.addEventListener(\"mouseleave\", stopPaint);\n    return () => {\n      canvas.removeEventListener(\"mouseup\", stopPaint);\n      canvas.removeEventListener(\"mouseleave\", stopPaint);\n    };\n  }, [stopPaint]);\n\n  /////////////////////////////////////////////////////////////////////////////\n\n  return <canvas ref={canvasRef} className=\"image-canvas\" />;\n}\n","import React from \"react\";\n\ninterface ExportButtonProps {\n  startImageExport: () => void;\n  buttonLabel: string;\n}\n\nfunction ExportButton({ startImageExport, buttonLabel }: ExportButtonProps): JSX.Element {\n  const handleClick = () => {\n    startImageExport();\n  };\n\n  return (\n    <button className=\"button export-button\" onClick={handleClick}>\n      {buttonLabel}\n    </button>\n  );\n}\n\nexport default ExportButton;\n","import React, { useRef } from \"react\";\n\ntype ImportFile = File | null;\n\ninterface IProps {\n  buttonLabel: string;\n  onFileChange: (imageFile: ImportFile) => void;\n}\n\ninterface IFile {\n  fileName: string;\n  hasLoadedFile: boolean;\n}\n\nfunction ImportButton({ onFileChange, buttonLabel }: IProps): JSX.Element {\n  const fileInput = useRef<HTMLInputElement>(null);\n\n  const handleSubmit = (e: React.FormEvent<HTMLInputElement>): void => {\n    e.preventDefault();\n    if (fileInput.current) {\n      if (fileInput.current.files) {\n        onFileChange(fileInput.current.files[0]);\n      }\n    }\n  };\n\n  // const renderLoaded = (fileTitle: string): JSX.Element => (\n  //   <div>\n  //     <button className=\"button import-button\">\n  //     <label>\n  //       Import\n  //       <input\n  //         type=\"file\"\n  //         accept=\".png, .jpg, .jpeg, .bmp, .pal\"\n  //         ref={fileInput}\n  //         onChange={handleSubmit}\n  //       />\n  //     </label>\n  //   </button>\n  //     Loaded <em>{fileTitle}</em>\n  //   </div>\n  // );\n\n  const render = (): JSX.Element => (\n    <button className=\"button import-button\">\n      <label>\n        {buttonLabel}\n        <input\n          type=\"file\"\n          accept=\".png, .jpg, .jpeg, .bmp, .pal\"\n          ref={fileInput}\n          onChange={handleSubmit}\n        />\n      </label>\n    </button>\n  );\n\n  return render();\n}\n\nexport default ImportButton;\n","import { Color } from \"../../lib/interfaces\";\nimport { PALETTE_SIZE, PALETTE_LENGTH } from \"../../lib/consts\";\nimport { createHiddenCanvas } from \"../../lib/fileLoadUtils\";\nimport { PixelGrid } from \"./ImageCanvas\";\n\n// interface IPalette {\n//   readonly dimensions: Dimensions;\n//   getColorAt: (index: number) => Color;\n//   setColorAt: (index: number, color: Color) => void;\n//   swapRows: (row1: number, row2: number) => void;\n//   getColorArray: () => Color[];\n// }\n\ntype Palette = Color[];\n\nexport interface PaletteDrawables {\n  readonly pixelGrid: PixelGrid;\n  readonly hiddenCanvas: HTMLCanvasElement;\n}\n\n/**\n * Constructor for Palette objects. Contains initial draw call.\n * @param colorArray color array to be used as data for the palette\n */\nexport function PaletteDrawablesGenerator(): PaletteDrawables {\n  const pixelGrid = new PixelGrid(PALETTE_SIZE, 8);\n  const hiddenCanvas = createHiddenCanvas(PALETTE_SIZE);\n  // drawPaletteToHiddenCanvas(colorArray, hiddenCanvas);\n  return { pixelGrid, hiddenCanvas };\n}\n\nexport function drawPaletteToHiddenCanvas(\n  palette: Palette,\n  hiddenCanvas: HTMLCanvasElement\n) {\n  const context = hiddenCanvas.getContext(\"2d\");\n  if (!context) {\n    console.error(\"Failed to get Palette hidden canvas context!\");\n    return;\n  }\n  for (let i = 0; i < PALETTE_LENGTH; i++) {\n    const color = palette[i];\n    context.fillStyle = `rgb(${color.r}, ${color.g}, ${color.b})`;\n    context.fillRect(i % 16, Math.floor(i / 16), 1, 1);\n  }\n}\n\nexport function setPaletteColorAndRedraw(\n  palette: Palette,\n  hiddenCanvas: HTMLCanvasElement,\n  index: number,\n  color: Color\n) {\n  palette[index] = color;\n  drawPaletteToHiddenCanvas(palette, hiddenCanvas);\n}\n\nexport default Palette;\n\n// export default class Palette implements IPalette {\n//   public dimensions: Dimensions;\n//   private colorArray: Color[];\n//   private hiddenCanvas: HTMLCanvasElement;\n//   private pixelGrid: PixelGrid;\n\n//   // constructor input will be the inputs needed for generatePalette() function\n//   constructor(colorArray?: Color[]) {\n//     this.dimensions = PALETTE_SIZE;\n\n//     this.colorArray = new Array(this.dimensions.width * this.dimensions.height);\n//     if (colorArray === undefined) {\n//       this.colorArray.fill(COLORS.black);\n//     } else {\n//       if (colorArray.length > PALETTE_SIZE.height * PALETTE_SIZE.width) {\n//         console.warn(\n//           \"why would you ever try to make a palette bigger than 16x16 -_-\"\n//         );\n//         this.colorArray = colorArray.slice(0, 255);\n//       } else {\n//         this.colorArray = colorArray;\n//       }\n//     }\n\n//     this.hiddenCanvas = createHiddenCanvas(this.dimensions);\n//     this.drawPaletteToHiddenCanvas(this.hiddenCanvas);\n//     this.pixelGrid = new PixelGrid(PALETTE_SIZE, 8);\n//   }\n\n//   public swapRows(row1: number, row2: number) {\n//     if (row1 >= this.dimensions.height || row2 >= this.dimensions.height) {\n//       console.error(\"cannot swap rows: input out of bounds\");\n//     } else {\n//       console.log(\"swapping rows...\");\n//       const start1 = row1 * this.dimensions.height;\n//       const start2 = row2 * this.dimensions.height;\n//       this.groupSwap(start1, start2, this.dimensions.width);\n//     }\n//   }\n\n//   public getColorAt(index: number): Color {\n//     if (index >= PALETTE_LENGTH || index < 0) {\n//       console.error(\n//         \"Attempting to access palette at index greater than \" +\n//           PALETTE_LENGTH +\n//           \".\"\n//       );\n//     }\n//     // console.log(\"Palette index\", i, \"Color at index\", this.colorArray[i]);\n//     return this.colorArray[index];\n//   }\n\n//   public setColorAt(index: number, color: Color) {\n//     this.colorArray[index] = color;\n//     this.drawPaletteToHiddenCanvas(this.hiddenCanvas);\n//   }\n\n//   public getPaletteCanvas(): HTMLCanvasElement {\n//     return this.hiddenCanvas;\n//   }\n\n//   public getPixelGridCanvas(): HTMLCanvasElement {\n//     return this.pixelGrid.getCanvasElement();\n//   }\n\n//   public getColorArray(): Color[] {\n//     return this.colorArray;\n//   }\n\n//   private swapIndices(index1: number, index2: number) {\n//     const size = this.dimensions.width * this.dimensions.height;\n//     if (index1 >= size || index2 >= size) {\n//       console.error(\"cannot swip indices: input out of bounds\");\n//     } else {\n//       const temp = this.colorArray[index1];\n//       this.setColorAt(index1, this.colorArray[index2]);\n//       this.setColorAt(index2, temp);\n//     }\n//   }\n\n//   private groupSwap(start1: number, start2: number, len: number) {\n//     for (let i = 0; i < len; i++) {\n//       this.swapIndices(start1 + i, start2 + i);\n//     }\n//   }\n\n//   private drawPaletteToHiddenCanvas(canvas: HTMLCanvasElement) {\n//     const context = canvas.getContext(\"2d\");\n//     if (!context) {\n//       console.error(\"Failed to get Palette hidden canvas context!\");\n//       return;\n//     }\n//     for (let i = 0; i < PALETTE_LENGTH; i++) {\n//       const color = this.colorArray[i];\n//       context.fillStyle = `rgb(${color.r}, ${color.g}, ${color.b})`;\n//       context.fillRect(i % 16, Math.floor(i / 16), 1, 1);\n//     }\n//   }\n// }\n","import React, { useRef, useEffect, useCallback, useState } from \"react\";\nimport Palette, * as PaletteUtils from \"./objects/Palette\";\nimport { PixelGrid } from \"./objects/ImageCanvas\";\n\ninterface IPaletteDisplay {\n  palette: Palette;\n  selectedColorIndex: number;\n  onChangeSelectedColorIndex: (newIndex: number) => void;\n}\n\ninterface MousePos {\n  x: number;\n  y: number;\n}\n\n// This size is defined the same in app.scss\nconst PALETTE_CANVAS_SIZE = {\n  height: 192,\n  width: 192\n};\n\nconst SCALE = PALETTE_CANVAS_SIZE.height / 16;\n\nconst INDEX_TO_X = (index: number) => index % 16;\nconst INDEX_TO_Y = (index: number) => Math.floor(index / 16);\nconst XY_TO_INDEX = ({ x, y }: { x: number; y: number }) => y * 16 + x;\nconst MOUSE_POS_TO_XY = ({ x, y }: { x: number; y: number }) => ({\n  x: Math.floor(x / SCALE),\n  y: Math.floor(y / SCALE)\n});\nconst MOUSE_POS_TO_INDEX = (pos: { x: number; y: number }) =>\n  XY_TO_INDEX(MOUSE_POS_TO_XY(pos));\n\nfunction PaletteDisplay({\n  palette,\n  selectedColorIndex,\n  onChangeSelectedColorIndex\n}: IPaletteDisplay): JSX.Element {\n  const [paletteHiddenCanvas, setPaletteHiddenCanvas] = useState<\n    HTMLCanvasElement\n  >();\n  const [pixelGrid, setPixelGrid] = useState<PixelGrid>();\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  /**\n   * method to draw the palette grid\n   */\n  const drawGrid = useCallback(() => {\n    if (!canvasRef.current || !pixelGrid) return;\n    const context = canvasRef.current.getContext(\"2d\");\n    if (!context) return;\n    context.drawImage(\n      pixelGrid.getCanvasElement(),\n      0,\n      0,\n      PALETTE_CANVAS_SIZE.width * window.devicePixelRatio,\n      PALETTE_CANVAS_SIZE.height * window.devicePixelRatio\n    );\n  }, [pixelGrid]);\n\n  /**\n   * method to populate the palette with colors\n   * fills palette index with proper color using palette colorArray\n   */\n  const drawPalette = useCallback(() => {\n    if (!canvasRef.current || !paletteHiddenCanvas) return;\n    const context = canvasRef.current.getContext(\"2d\");\n    if (!context) return;\n    PaletteUtils.drawPaletteToHiddenCanvas(palette, paletteHiddenCanvas);\n    context.drawImage(\n      paletteHiddenCanvas,\n      0,\n      0,\n      PALETTE_CANVAS_SIZE.width * window.devicePixelRatio,\n      PALETTE_CANVAS_SIZE.height * window.devicePixelRatio\n    );\n  }, [palette, paletteHiddenCanvas]);\n\n  /**\n   * Draws a box around the selected color in the palette view.\n   */\n  const drawSelectedColorHighlight = useCallback(\n    (index: number) => {\n      if (!canvasRef.current) return;\n      let context = canvasRef.current.getContext(\"2d\");\n      if (!context) return;\n      context.beginPath();\n      context.strokeStyle = \"rgba(255, 255, 0, 1)\";\n      context.lineWidth = 2;\n      const ratio = window.devicePixelRatio * SCALE;\n      context.rect(\n        INDEX_TO_X(index) * ratio,\n        INDEX_TO_Y(index) * ratio,\n        ratio,\n        ratio\n      );\n      context.stroke();\n    },\n    [canvasRef]\n  );\n\n  /**\n   * gets mouse position on the palette canvas\n   * @param e MouseEvent\n   */\n  const getMousePos = (e: React.MouseEvent): MousePos => {\n    if (canvasRef.current) {\n      const rect = canvasRef.current.getBoundingClientRect();\n      return {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      };\n    }\n    return {\n      x: -1,\n      y: -1\n    };\n  };\n\n  /**\n   * handles mouse click event\n   * selects the proper row on the palette\n   * @param e MouseEvent\n   */\n  const handleClick = (e: React.MouseEvent): void => {\n    onChangeSelectedColorIndex(MOUSE_POS_TO_INDEX(getMousePos(e)));\n  };\n\n  /**\n   * Set up the canvas\n   */\n  useEffect(() => {\n    console.log(\"Setting up palette canvas\");\n    const setupCanvasSize = (canvas: HTMLCanvasElement) => {\n      const devicePixelRatio = window.devicePixelRatio || 1;\n      canvas.width = canvas.clientWidth * devicePixelRatio;\n      canvas.height = canvas.clientHeight * devicePixelRatio;\n      const context = canvas.getContext(\"2d\");\n      if (context) context.imageSmoothingEnabled = false;\n    };\n    if (canvasRef.current) {\n      setupCanvasSize(canvasRef.current);\n    }\n    const {\n      pixelGrid,\n      hiddenCanvas\n    } = PaletteUtils.PaletteDrawablesGenerator();\n    setPaletteHiddenCanvas(hiddenCanvas);\n    setPixelGrid(pixelGrid);\n  }, []);\n\n  /**\n   * Draw the palette every time something changes\n   */\n  useEffect(() => {\n    drawPalette();\n    drawGrid();\n    drawSelectedColorHighlight(selectedColorIndex);\n  }, [\n    palette,\n    selectedColorIndex,\n    drawPalette,\n    drawGrid,\n    drawSelectedColorHighlight\n  ]);\n\n  return (\n    <canvas ref={canvasRef} onClick={handleClick} className=\"palette-canvas\" />\n  );\n}\n\nexport default PaletteDisplay;\n","import React, { useState } from \"react\";\n\nconst MIN_QUANTIZE = 1;\nconst MAX_QUANTIZE = 256;\n\ninterface ExportButtonProps {\n  handleQuantize: (newColorDepth: number) => void;\n}\n\nfunction ExportButton({ handleQuantize }: ExportButtonProps): JSX.Element {\n  const [depth, setDepth] = useState<number>(15);\n\n  const handleClick = () => {\n    if (!depth) {\n      alert(\"Can't quantize with unspecified color depth!\");\n      return;\n    }\n    handleQuantize(depth);\n  };\n\n  return (\n    <div className=\"quantize-container\">\n      <button className=\"quantize-button\" onClick={handleClick}>\n        Quantize\n      </button>\n      <input\n        className=\"quantize-input\"\n        type=\"number\"\n        value={depth}\n        min={MIN_QUANTIZE}\n        max={MAX_QUANTIZE}\n        onChange={e => setDepth(parseInt(e.target.value))}\n      ></input>\n    </div>\n  );\n}\n\nexport default ExportButton;\n","import React from \"react\";\nimport Palette from \"./objects/Palette\";\nimport PaletteDisplay from \"./PaletteDisplay\";\nimport QuantizeButton from \"./buttons/QuantizeButton\";\nimport { Color } from \"../lib/interfaces\";\n\ninterface PalettePanelProps {\n  palette: Palette;\n  selectedColorIndex: number;\n  updatePalette: (newPalette: Palette) => void;\n  onChangeSelectedColorIndex: (newIndex: number) => void;\n  onChangeColor: (newColor: Color) => void;\n  handleQuantize: (newColorDepth: number) => void;\n}\n\nexport default function PalettePanel({\n  palette,\n  selectedColorIndex,\n  onChangeSelectedColorIndex,\n  onChangeColor,\n  handleQuantize\n}: PalettePanelProps): JSX.Element {\n  return (\n    <div>\n      <div className=\"panel-label\">Color Palette</div>\n      <div className=\"palette-container\">\n        <PaletteDisplay\n          palette={palette}\n          selectedColorIndex={selectedColorIndex}\n          onChangeSelectedColorIndex={onChangeSelectedColorIndex}\n        />\n      </div>\n      <ColorInput\n        currentColor={palette[selectedColorIndex]}\n        onChangeColor={onChangeColor}\n      ></ColorInput>\n      <QuantizeButton handleQuantize={handleQuantize} />\n    </div>\n  );\n}\n\nconst MIN_COLOR_VAL = \"0\";\nconst MAX_COLOR_VAL = \"31\";\n\nconst color256to32 = ({ r, g, b }: Color): Color => {\n  return {\n    r: Math.ceil((r + 1) / 8) - 1,\n    g: Math.ceil((g + 1) / 8) - 1,\n    b: Math.ceil((b + 1) / 8) - 1,\n    a: 1\n  };\n};\n\nconst color32to256 = ({ r, g, b }: Color): Color => {\n  return {\n    r: (r + 1) * 8 - 1,\n    g: (g + 1) * 8 - 1,\n    b: (b + 1) * 8 - 1,\n    a: 1\n  };\n};\n\ninterface ColorInputProps {\n  currentColor: Color;\n  onChangeColor: (newColor: Color) => void;\n}\n\nfunction ColorInput({\n  currentColor,\n  onChangeColor\n}: ColorInputProps): JSX.Element {\n  // const [color, setColor] = useState<Color>(Color256to32(currentColor));\n\n  /**\n   * When we select a new color from props, we should update which color is being inspected\n   */\n  // useEffect(() => {\n  //   setColor(Color256to32(currentColor));\n  // }, [currentColor]);\n\n  // useEffect(() => {\n  //   onChangeColor(Color32to256(color));\n  // }, [color, onChangeColor]);\n\n  const color32 = color256to32(currentColor);\n\n  const handleRChange = (newRValue: number) => {\n    const color256 = color32to256({\n      r: newRValue,\n      g: color32.g,\n      b: color32.b,\n      a: 1\n    });\n    onChangeColor(color256);\n  };\n\n  const handleGChange = (newGValue: number) => {\n    const color256 = color32to256({\n      r: color32.r,\n      g: newGValue,\n      b: color32.b,\n      a: 1\n    });\n    onChangeColor(color256);\n  };\n\n  const handleBChange = (newBValue: number) => {\n    const color256 = color32to256({\n      r: color32.r,\n      g: color32.g,\n      b: newBValue,\n      a: 1\n    });\n    onChangeColor(color256);\n  };\n\n  return (\n    <div>\n      <div>\n        <label>Red: </label>\n        <input\n          type=\"number\"\n          max={MAX_COLOR_VAL}\n          min={MIN_COLOR_VAL}\n          value={color32.r}\n          onChange={e => handleRChange(parseInt(e.target.value))}\n        ></input>\n      </div>\n      <div>\n        <label>Green: </label>\n        <input\n          type=\"number\"\n          max={MAX_COLOR_VAL}\n          min={MIN_COLOR_VAL}\n          value={color32.g}\n          onChange={e => handleGChange(parseInt(e.target.value))}\n        ></input>\n      </div>\n      <div>\n        <label>Blue: </label>\n        <input\n          type=\"number\"\n          max={MAX_COLOR_VAL}\n          min={MIN_COLOR_VAL}\n          value={color32.b}\n          onChange={e => handleBChange(parseInt(e.target.value))}\n        ></input>\n      </div>\n    </div>\n  );\n}\n","import React, { PropsWithChildren } from \"react\";\n\ntype ToggleProps = {\n  state: boolean;\n  onClick: (newState: boolean) => void;\n};\n\nexport default function Toggle({\n  state,\n  onClick,\n  children\n}: PropsWithChildren<ToggleProps>): JSX.Element {\n  return (\n    <button\n      className={state ? \"toggle-on\" : \"toggle-off\"}\n      onClick={() => onClick(!state)}\n    >\n      {children}\n    </button>\n  );\n}\n","import React from \"react\";\nimport { EditorSettings } from \"../lib/interfaces\";\nimport {\n  faBorderAll,\n  faPen,\n  faFillDrip,\n  faSearchPlus,\n  faEyeDropper,\n  faLayerGroup,\n  faCode\n} from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  faCircle,\n  faSquare,\n  faHandPaper\n} from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Tool } from \"../lib/consts\";\nimport Toggle from \"./buttons/Toggle\";\n\ntype ToolsPanelProps = {\n  settings: EditorSettings;\n  onSettingsChange: (newSettings: EditorSettings) => void;\n  onToolChange: (newTool: Tool) => void;\n};\n\nexport default function ToolsPanel({\n  settings,\n  onSettingsChange,\n  onToolChange\n}: ToolsPanelProps) {\n  return (\n    <div>\n      <div className=\"heading\">Tools</div>\n      <Toggle\n        state={settings.currentTool === Tool.PENCIL}\n        onClick={() => onToolChange(Tool.PENCIL)}\n      >\n        <FontAwesomeIcon icon={faPen} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.BUCKET}\n        onClick={() => onToolChange(Tool.BUCKET)}\n      >\n        <FontAwesomeIcon icon={faFillDrip} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.SQUARE}\n        onClick={() => onToolChange(Tool.SQUARE)}\n      >\n        <FontAwesomeIcon icon={faSquare} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.ELLIPSE}\n        onClick={() => onToolChange(Tool.ELLIPSE)}\n      >\n        <FontAwesomeIcon icon={faCircle} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.ZOOM}\n        onClick={() => onToolChange(Tool.ZOOM)}\n      >\n        <FontAwesomeIcon icon={faSearchPlus} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.PAN}\n        onClick={() => onToolChange(Tool.PAN)}\n      >\n        <FontAwesomeIcon icon={faHandPaper} />\n      </Toggle>\n      <Toggle\n        state={settings.currentTool === Tool.DROPPER}\n        onClick={() => onToolChange(Tool.DROPPER)}\n      >\n        <FontAwesomeIcon icon={faEyeDropper} />\n      </Toggle>\n      <div className=\"heading\">View</div>\n      <Toggle\n        state={settings.grid}\n        onClick={() => {\n          let newSettings = { ...settings };\n          newSettings.grid = !settings.grid;\n          onSettingsChange(newSettings);\n        }}\n      >\n        <FontAwesomeIcon icon={faBorderAll} />\n      </Toggle>\n      <Toggle state={false} onClick={() => null}>\n        <FontAwesomeIcon icon={faLayerGroup} />\n      </Toggle>\n      <Toggle state={false} onClick={() => null}>\n        <FontAwesomeIcon icon={faCode} />\n      </Toggle>\n      <div className=\"heading\">Settings</div>\n      <div>\n        Mode: {settings.mode}\n        <br/>\n        {settings.editorMode.toString()}\n      </div>\n    </div>\n  );\n}\n","import React, { useState, PropsWithChildren } from \"react\";\r\n\r\ninterface DropdownProps {\r\n  label: string;\r\n}\r\n\r\nexport default function Dropdown({ label, children }: PropsWithChildren<DropdownProps>) {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"dd-container\">\r\n      <button onClick={() => setOpen(!open)} className=\"dd-button\">\r\n        {label}\r\n      </button>\r\n      <div\r\n        id=\"myDropdown\"\r\n        className={open ? \"dd-content dd-show\" : \"dd-content\"}\r\n      >\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React, { useCallback, useState, useReducer } from \"react\";\nimport { exportImage, exportPalette } from \"../lib/exportUtils\";\nimport { EditorSettings, EditorMode, Mode, Color } from \"../lib/interfaces\";\nimport { loadNewImage, loadNewPalette } from \"../lib/fileLoadUtils\";\nimport { quantize } from \"../lib/quantize\";\nimport { saveAs } from \"file-saver\";\nimport { Tool } from \"../lib/consts\";\nimport Bitmap from \"./objects/Bitmap\";\nimport Bitmap3 from \"./objects/Bitmap3\";\nimport Bitmap4 from \"./objects/Bitmap4\";\nimport DEFAULT_PALETTE from \"../lib/defaultPalette\";\nimport EditorCanvas from \"./EditorCanvas\";\nimport ExportButton from \"./buttons/ExportButton\";\nimport ImportButton from \"./buttons/ImportButton\";\nimport Palette from \"./objects/Palette\";\nimport PalettePanel from \"./PalettePanel\";\nimport ToolsPanel from \"./ToolsPanel\";\nimport Dropdown from \"./Dropdown\";\n\nfunction scaleReducer(state: number, e: WheelEvent) {\n  const direction = e.deltaY < 0 ? -1 : 1;\n  if (direction === 1) {\n    return state * 1.1;\n  } else {\n    return state / 1.1;\n  }\n}\n\nfunction App(): JSX.Element {\n  const [palette, setPalette] = useState<Palette>(DEFAULT_PALETTE);\n  const [image, setImage] = useState<Bitmap>();\n  const [selectedColorIndex, setSelectedColorIndex] = useState<number>(0);\n  const [editorSettings, setEditorSettings] = useState<EditorSettings>({\n    grid: true,\n    currentTool: Tool.PENCIL,\n    mode: 3,\n    editorMode: EditorMode.Bitmap\n  });\n\n  const [scale, scaleDispatch] = useReducer(scaleReducer, 8);\n\n  const handleMouseWheelEvent = useCallback(e => scaleDispatch(e), []);\n\n  const handleImageLoad = async (imageFile: File | null) => {\n    if (imageFile) {\n      console.log(\"Loading image...\");\n      let image = await loadNewImage(imageFile);\n      setImage(image);\n    }\n  };\n\n  const handleToolChange = useCallback(\n    (newTool: Tool) => {\n      setEditorSettings({\n        grid: editorSettings.grid,\n        currentTool: newTool,\n        mode: editorSettings.mode,\n        editorMode: editorSettings.editorMode\n      });\n    },\n    [editorSettings]\n  );\n\n  const handleEditorChange = useCallback(\n    (editorMode: EditorMode, mode: Mode) => {\n      setEditorSettings({\n        grid: editorSettings.grid,\n        currentTool: editorSettings.currentTool,\n        mode: mode,\n        editorMode: editorMode\n      });\n    },\n    [editorSettings]\n  );\n\n  const handleQuantize = (newColorDepth: number): void => {\n    newColorDepth = Math.floor(newColorDepth); // just in case of a float\n    if (!(image instanceof Bitmap3)) {\n      alert(\"Requantization of paletted images currently not supported!\");\n    } else {\n      let ok = window.confirm(\n        \"(Don't panic!) Quantizing a bitmap will change it from mode 3 to mode 4. Is this okay?\"\n      );\n      if (ok) {\n        let { palette, sprite } = quantize(image, newColorDepth);\n        setImage(sprite);\n        setPalette(palette);\n      }\n    }\n  };\n\n  const handlePaletteLoad = async (palFile: File | null) => {\n    if (palFile) {\n      console.log(\"Loading palette...\");\n      let newPalette = await loadNewPalette(palFile);\n      if (newPalette) {\n        if (image instanceof Bitmap4) {\n          image.updatePalette(newPalette);\n        }\n        setPalette(newPalette);\n      }\n    }\n  };\n\n  const handleChangeSelectedColor = (newIndex: number) => {\n    setSelectedColorIndex(newIndex);\n    if (image instanceof Bitmap4) {\n      image.setPaletteIndex(newIndex);\n    }\n  };\n\n  const handleColorChange = (newColor: Color): void => {\n    const newPalette = palette.slice();\n    newPalette[selectedColorIndex] = newColor;\n    if (image instanceof Bitmap4) {\n      image.updatePalette(newPalette);\n    }\n    setPalette(newPalette);\n  };\n\n  const handleImageExport = async (type: string) => {\n    let fileName;\n    let fileType = \"\";\n    let blob: Blob | null;\n\n    if (image) {\n      fileName = image.fileName.slice(0, image.fileName.lastIndexOf(\".\"))\n    } else {\n      fileName = \"default\"\n    }\n\n    const exportFailAlert = () =>\n      alert(\"Failed to export image! Check console for more information.\");\n\n    switch (type) {\n      case \"GBA\":\n        if (!image) {\n          alert(\"No image to export! Try importing one first.\");\n          return;\n        }\n        //.c file\n        fileType = \".c\";\n        let cBlob = new Blob([image.getCSourceData()]);\n        saveAs(cBlob, fileName + fileType);\n        //.h file\n        fileType = \".h\";\n        let hBlob = new Blob([image.getHeaderData()]);\n        saveAs(hBlob, fileName + fileType);\n        return;\n      case \"PAL\":\n        //.pal file\n        if (!palette) {\n          alert(\"Can't export a non-existant palette!\");\n          return;\n        } else {\n          fileType = \".pal\";\n          blob = new Blob([exportPalette(palette)]);\n          break;\n        }\n      case \"BMP\":\n        if (!image) {\n          alert(\"No image to export! Try importing one first.\");\n          return;\n        }\n        //.bmp file\n        fileType = \".bmp\";\n        blob = await exportImage(image, type);\n        break;\n      case \"PNG\":\n        if (!image) {\n          alert(\"No image to export! Try importing one first.\");\n          return;\n        }\n        //.png file\n        fileType = \".png\";\n        blob = await exportImage(image, type);\n        break;\n      default:\n        if (!image) {\n          alert(\"No image to export! Try importing one first.\");\n          return;\n        }\n        //default as .txt if unrecognized type is selected\n        fileType = \".txt\";\n        blob = await exportImage(image, type);\n    }\n    if (!blob) {\n      exportFailAlert();\n    } else {\n      saveAs(blob, fileName + fileType);\n    }\n  };\n\n  const handleSettingsChange = useCallback(\n    (newSettings: EditorSettings): void => setEditorSettings(newSettings),\n    []\n  );\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"navbar\">\n        <span className=\"title\">VOCC</span>\n        <Dropdown label=\"New\">\n          <div className=\"dd-content-header\">Bitmap</div>\n          <button onClick={() => handleEditorChange(EditorMode.Bitmap, 3)}>\n            Mode 3\n          </button>\n          <button onClick={() => handleEditorChange(EditorMode.Bitmap, 4)}>\n            Mode 4\n          </button>\n          <div className=\"dd-divider\"></div>\n          <div className=\"dd-content-header\">Spritesheet</div>\n          <button onClick={() => handleEditorChange(EditorMode.Spritesheet, 4)}>\n            4 bpp\n          </button>\n          <div className=\"dd-divider\"></div>\n          <div className=\"dd-content-header\">Background</div>\n          <button onClick={() => handleEditorChange(EditorMode.Background, 0)}>\n            Mode 0\n          </button>\n        </Dropdown>\n        <Dropdown label=\"Edit\">\n          <button onClick={() => null}>Undo</button>\n          <button onClick={() => null}>Redo</button>\n          <div className=\"dd-divider\"></div>\n          <button onClick={() => null}>Clear All</button>\n        </Dropdown>\n        <Dropdown label=\"Import\">\n          <div className=\"dd-content-header\">Image</div>\n          <ImportButton\n            onFileChange={handleImageLoad}\n            buttonLabel=\"Image (*.png, *.bmp, *.jpg)\"\n          />\n          <div className=\"dd-divider\"></div>\n          <ImportButton\n            onFileChange={handlePaletteLoad}\n            buttonLabel=\"Palette (*.pal)\"\n          />\n        </Dropdown>\n        <Dropdown label=\"Export\">\n          <div className=\"dd-content-header\">Image</div>\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, \"PNG\")}\n            buttonLabel=\"PNG Image (*.png)\"\n          />\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, \"BMP\")}\n            buttonLabel=\"Bitmap (*.bmp)\"\n          />\n          <div className=\"dd-divider\"></div>\n          <div className=\"dd-content-header\">GBA</div>\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, \"GBA\")}\n            buttonLabel=\"C Source Code (*.c/.h)\"\n          />\n          <div className=\"dd-divider\"></div>\n          <ExportButton\n            startImageExport={handleImageExport.bind(null, \"PAL\")}\n            buttonLabel=\"Color Palette (*.pal)\"\n          />\n        </Dropdown>\n        <Dropdown label=\"Help\">\n          <form>\n            <button type=\"submit\" formAction=\"\" formTarget=\"\">\n              Documentation\n            </button>\n          </form>\n          <form>\n            <button\n              type=\"submit\"\n              formAction=\"https://www.coranac.com/tonc/text/\"\n              formTarget=\"_blank\"\n            >\n              GBA Graphics 101\n            </button>\n          </form>\n          <div className=\"dd-divider\"></div>\n          <form>\n            <button type=\"submit\" formAction=\"\" formTarget=\"\">\n              About VOCC\n            </button>\n          </form>\n          <div className=\"dd-divider\"></div>\n          <form>\n            <button\n              type=\"submit\"\n              formAction=\"https://github.com/lbussell/vocc\"\n              formTarget=\"_blank\"\n            >\n              View on GitHub\n            </button>\n          </form>\n        </Dropdown>\n      </div>\n      <div className=\"workspace-container\">\n        <div className=\"left-panel\">\n          <div className=\"tools-container\">\n            {/* {image ? <div> Scale: {scale.toFixed(2)}x </div> : null} */}\n            <ToolsPanel\n              settings={editorSettings}\n              onSettingsChange={handleSettingsChange}\n              onToolChange={handleToolChange}\n            ></ToolsPanel>\n          </div>\n          {image ? <div> Scale: {scale.toFixed(2)}x </div> : null}\n        </div>\n        <div className=\"image-container\">\n          {image ? (\n            <EditorCanvas\n              image={image}\n              settings={editorSettings}\n              palette={palette}\n              selectedPaletteIndex={selectedColorIndex}\n              scale={scale}\n              onMouseWheel={handleMouseWheelEvent}\n            />\n          ) : (\n            <div className=\"start-message\">\n              <em>Import an image to get started</em>\n            </div>\n          )}\n        </div>\n        <div className=\"right-panel\">\n          <PalettePanel\n            palette={palette}\n            updatePalette={setPalette}\n            selectedColorIndex={selectedColorIndex}\n            onChangeSelectedColorIndex={handleChangeSelectedColor}\n            onChangeColor={handleColorChange}\n            handleQuantize={handleQuantize}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles/styles.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}